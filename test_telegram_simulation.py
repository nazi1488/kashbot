#!/usr/bin/env python3
"""
–°–∏–º—É–ª—è—Ü–∏—è Telegram –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è Random Face Generator

–≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π workflow –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import asyncio
import sys
from pathlib import Path
from unittest.mock import Mock, AsyncMock, MagicMock
from io import BytesIO

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from features.random_face.handlers import RandomFaceHandlers
from features.random_face.keyboard import RandomFaceKeyboard
from infra.redis import redis_manager


class MockUpdate:
    """–ú–æ–∫ Telegram Update"""
    
    def __init__(self, user_id: int = 12345):
        self.callback_query = Mock()
        self.callback_query.from_user.id = user_id
        self.callback_query.message.chat_id = user_id
        self.callback_query.answer = AsyncMock()
        self.callback_query.edit_message_text = AsyncMock()
        self.callback_query.delete_message = AsyncMock()


class MockContext:
    """–ú–æ–∫ Telegram Context"""
    
    def __init__(self):
        self.bot = Mock()
        self.bot.send_photo = AsyncMock()
        self.bot_data = {'FACE_QUOTA_PER_DAY': 10}


async def test_telegram_simulation():
    """–ü–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è Telegram –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
    
    print("ü§ñ –°–∏–º—É–ª—è—Ü–∏—è Telegram –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Random Face...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis –∏ handlers
        redis_client = await redis_manager.initialize()
        handlers = RandomFaceHandlers(redis_client)
        keyboard = RandomFaceKeyboard()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏
        update = MockUpdate(user_id=33333)
        context = MockContext()
        
        print("\nüì± –¢–µ—Å—Ç 1: –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        await handlers.show_random_face_menu(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ–Ω—é –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ
        update.callback_query.edit_message_text.assert_called_once()
        call_args = update.callback_query.edit_message_text.call_args
        assert "Random Face Generator" in call_args[1]['text']
        print("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        print("\nüì± –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏—Ü–∞")
        update.callback_query.edit_message_text.reset_mock()
        context.bot.send_photo.reset_mock()
        
        await handlers.generate_random_face(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        update.callback_query.edit_message_text.assert_called()
        loading_call = update.callback_query.edit_message_text.call_args_list[0]
        assert "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –ª–∏—Ü–æ" in loading_call[1]['text']
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∫–∞–∑–∞–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        context.bot.send_photo.assert_called_once()
        photo_call = context.bot.send_photo.call_args
        assert photo_call[1]['chat_id'] == 33333
        assert "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ" in photo_call[1]['caption']
        print("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —É–¥–∞–ª–µ–Ω–æ
        update.callback_query.delete_message.assert_called_once()
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —É–¥–∞–ª–µ–Ω–æ")
        
        print("\nüì± –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
        main_keyboard = keyboard.main_menu()
        after_keyboard = keyboard.after_generation()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_buttons = [btn.text for row in main_keyboard.inline_keyboard for btn in row]
        assert "üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å" in main_buttons
        assert "üîÅ –ï—â—ë" in main_buttons
        assert "‚Ü©Ô∏è –ù–∞–∑–∞–¥" in main_buttons
        print("‚úÖ –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        after_buttons = [btn.text for row in after_keyboard.inline_keyboard for btn in row]
        assert "üîÅ –ï—â—ë –æ–¥–Ω–æ" in after_buttons
        assert "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" in after_buttons
        print("‚úÖ –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        
        print("\nüì± –¢–µ—Å—Ç 4: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
        update2 = MockUpdate(user_id=44444)
        context.bot.send_photo.reset_mock()
        
        await handlers.handle_more_generation(update2, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–Ω–æ–≤–∞ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ
        context.bot.send_photo.assert_called_once()
        print("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("\nüì± –¢–µ—Å—Ç 5: –ê–Ω—Ç–∏—Å–ø–∞–º –∑–∞—â–∏—Ç–∞")
        # –ë—ã—Å—Ç—Ä–æ –¥–µ–ª–∞–µ–º –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Ç–µ–º –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        update3 = MockUpdate(user_id=33333)  # –¢–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        update3.callback_query.edit_message_text.reset_mock()
        context.bot.send_photo.reset_mock()
        
        await handlers.generate_random_face(update3, context)
        
        # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∞ –æ—à–∏–±–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
        error_call = update3.callback_query.edit_message_text.call_args
        assert "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ" in error_call[1]['text']
        print("‚úÖ –ê–Ω—Ç–∏—Å–ø–∞–º –∑–∞—â–∏—Ç–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞")
        
        await redis_manager.close()
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã Telegram —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


async def test_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏...")
    
    try:
        redis_client = await redis_manager.initialize()
        handlers = RandomFaceHandlers(redis_client)
        
        # –¢–µ—Å—Ç —Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º API (–º–æ–∫–∞–µ–º –æ—à–∏–±–∫—É)
        update = MockUpdate(user_id=55555)
        context = MockContext()
        
        # –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏ API
        original_service = handlers.service
        mock_service = Mock()
        mock_service.fetch_face_image = AsyncMock(return_value=(None, "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ"))
        handlers.service = mock_service
        
        print("üîç –¢–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...")
        await handlers.generate_random_face(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–∞ –æ—à–∏–±–∫–∞
        error_call = update.callback_query.edit_message_text.call_args
        assert "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–æ" in error_call[1]['text']
        print("‚úÖ –û—à–∏–±–∫–∞ API –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        handlers.service = original_service
        
        await redis_manager.close()
        print("‚úÖ –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: {e}")


if __name__ == "__main__":
    print("üé≠ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ Telegram –±–æ—Ç–∞")
    print("=" * 50)
    
    asyncio.run(test_telegram_simulation())
    asyncio.run(test_edge_cases())
    
    print("\n" + "=" * 50)
    print("üèÅ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
