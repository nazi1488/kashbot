#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ Telegram API "File is too big"
"""

import asyncio
import tempfile
import os
from pathlib import Path
from unittest.mock import AsyncMock, MagicMock, patch
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/benutzer/Desktop/–∫–µ—à/bot')

from utils.smart_compressor import compress_for_telegram


async def test_telegram_api_error_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ Telegram API –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ 'File is too big'...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
    mock_bot = AsyncMock()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "File is too big" –æ—Ç Telegram API
    mock_bot.get_file.side_effect = Exception("File is too big")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –æ—à–∏–±–∫–æ–π API
        result_path, error = await compress_for_telegram(
            bot=mock_bot,
            file_id="large_file_id",
            original_filename="large_video.mp4"
        )
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏:")
        print(f"- –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {'–î–∞' if result_path else '–ù–µ—Ç'}")
        print(f"- –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {error}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
        if not result_path and error:
            print("‚úÖ –£–°–ü–ï–•: –û—à–∏–±–∫–∞ Telegram API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return True
        else:
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API")
            return False
            
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


async def test_large_file_download_mock():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞–º–∏"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
    mock_bot = AsyncMock()
    mock_file = AsyncMock()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª (30MB)
    mock_file.file_size = 30 * 1024 * 1024
    mock_file.file_path = "documents/large_video.mp4"
    mock_bot.get_file.return_value = mock_file
    
    # –ú–æ–∫–∞–µ–º download_large_file
    with patch('utils.smart_compressor.download_large_file') as mock_download:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ
        with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp_file:
            test_data = b"test video data" * 1000000  # ~15MB
            temp_file.write(test_data)
            temp_file_path = temp_file.name
            
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            async def mock_download_func(bot, file_id, dest_path):
                # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª
                with open(dest_path, 'wb') as f:
                    f.write(test_data)
                return True
            
            mock_download.side_effect = mock_download_func
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            result_path, error = await compress_for_telegram(
                bot=mock_bot,
                file_id="large_file_id",
                original_filename="large_video.mp4"
            )
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞:")
            print(f"- –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {'–î–∞' if result_path else '–ù–µ—Ç'}")
            print(f"- –û—à–∏–±–∫–∞: {error if error else '–ù–µ—Ç'}")
            
            if result_path:
                file_size = result_path.stat().st_size
                print(f"- –†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞: {file_size / (1024*1024):.1f}MB")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                if file_size <= 20 * 1024 * 1024:
                    print("‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (‚â§20MB)")
                    return True
                else:
                    print("‚ö†Ô∏è –§–∞–π–ª –≤—Å–µ –µ—â–µ –±–æ–ª—å—à–æ–π")
                    return False
            else:
                print("‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                return False
                
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_file_path):
                os.unlink(temp_file_path)


async def test_small_file_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ñ–∞–π–ª–∞"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ñ–∞–π–ª–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
    mock_bot = AsyncMock()
    mock_file = AsyncMock()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª (5MB) 
    mock_file.file_size = 5 * 1024 * 1024
    mock_file.file_path = "documents/small_video.mp4"
    mock_bot.get_file.return_value = mock_file
    
    # –ú–æ–∫–∞–µ–º download_large_file
    with patch('utils.smart_compressor.download_large_file') as mock_download:
        with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp_file:
            test_data = b"small video" * 100000  # ~1MB
            temp_file.write(test_data)
            temp_file_path = temp_file.name
            
        try:
            async def mock_download_func(bot, file_id, dest_path):
                with open(dest_path, 'wb') as f:
                    f.write(test_data)
                return True
            
            mock_download.side_effect = mock_download_func
            
            result_path, error = await compress_for_telegram(
                bot=mock_bot,
                file_id="small_file_id",
                original_filename="small_video.mp4"
            )
            
            print(f"‚úÖ –ú–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {'–î–∞' if result_path else '–ù–µ—Ç'}")
            
            if result_path:
                file_size = result_path.stat().st_size / (1024 * 1024)
                print(f"‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.1f}MB (—Å–∂–∞—Ç–∏–µ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª–æ—Å—å)")
                return True
            
            return False
            
        finally:
            if os.path.exists(temp_file_path):
                os.unlink(temp_file_path)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram API\n")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API
        test1_success = await test_telegram_api_error_handling()
        
        # –¢–µ—Å—Ç 2: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞
        test2_success = await test_large_file_download_mock()
        
        # –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ñ–∞–π–ª–∞
        test3_success = await test_small_file_handling()
        
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test1_success else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
        print(f"- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test2_success else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
        print(f"- –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ñ–∞–π–ª–∞: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test3_success else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
        
        if test1_success and test2_success and test3_success:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –ë–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—à–∏–±–æ–∫ 'File is too big'")
            print("‚úÖ –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏")
        else:
            print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
