#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
"""

import asyncio
import sys
from unittest.mock import AsyncMock, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/benutzer/Desktop/–∫–µ—à/bot')

from handlers.uniqizer import file_handler
from telegram import Update, Message, User, Chat, Document
from telegram.ext import ContextTypes


async def test_large_document_redirect():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ - –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –≤–∏–¥–µ–æ"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ–ª—å—à–æ–π –¥–æ–∫—É–º–µ–Ω—Ç (50–ú–ë)...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
    mock_user = User(id=12345, first_name="Test", is_bot=False)
    mock_chat = Chat(id=12345, type="private")
    
    # –ú–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ 50MB
    mock_document = MagicMock()
    mock_document.file_size = 50 * 1024 * 1024  # 50MB
    mock_document.file_name = "large_video.mp4"
    
    mock_message = MagicMock()
    mock_message.document = mock_document
    mock_message.reply_text = AsyncMock()
    
    mock_update = MagicMock()
    mock_update.message = mock_message
    
    mock_context = MagicMock()
    mock_context.user_data = {'copies_count': 2}
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        result = await file_handler(mock_update, mock_context)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"- –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ WAITING_FOR_FILE: {'–î–∞' if result == 1 else '–ù–µ—Ç'}")  # WAITING_FOR_FILE = 1
        print(f"- reply_text –±—ã–ª –≤—ã–∑–≤–∞–Ω: {'–î–∞' if mock_message.reply_text.called else '–ù–µ—Ç'}")
        
        if mock_message.reply_text.called:
            call_args = mock_message.reply_text.call_args[0][0]  # –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
            print(f"- –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '–≤–∏–¥–µ–æ': {'–î–∞' if '–≤–∏–¥–µ–æ' in call_args else '–ù–µ—Ç'}")
            print(f"- –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏': {'–î–∞' if '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏' in call_args else '–ù–µ—Ç'}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            print(f"- –ù–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {call_args[:50]}...")
            
            if '–≤–∏–¥–µ–æ' in call_args and '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏' in call_args:
                print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Å—è—Ç –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ")
                return True
            else:
                print("‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return False
        else:
            print("‚ùå –ü–†–û–í–ê–õ: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_small_document_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ - –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (5–ú–ë)...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
    mock_user = User(id=12345, first_name="Test", is_bot=False)
    mock_chat = Chat(id=12345, type="private")
    
    # –ú–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ 5MB
    mock_document = MagicMock()
    mock_document.file_size = 5 * 1024 * 1024  # 5MB
    mock_document.file_name = "small_video.mp4"
    
    mock_message = MagicMock()
    mock_message.document = mock_document
    mock_message.reply_text = AsyncMock()
    
    mock_update = MagicMock()
    mock_update.message = mock_message
    mock_update.effective_user = mock_user
    
    mock_context = MagicMock()
    mock_context.user_data = {'copies_count': 1}
    mock_context.bot = AsyncMock()
    
    # –ú–æ–∫–∞–µ–º process_media_file —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —É—Å–ø–µ—Ö
    from unittest.mock import patch
    with patch('handlers.uniqizer.process_media_file') as mock_process:
        mock_process.return_value = 0  # ConversationHandler.END
        
        try:
            result = await file_handler(mock_update, mock_context)
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"- process_media_file –≤—ã–∑–≤–∞–Ω–∞: {'–î–∞' if mock_process.called else '–ù–µ—Ç'}")
            print(f"- –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            if mock_process.called:
                print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ú–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É")
                return True
            else:
                print("‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: –ú–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–ù–ê–õ–¨–ù–û–ì–û —Ä–µ—à–µ–Ω–∏—è\n")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç 1: –ë–æ–ª—å—à–æ–π –¥–æ–∫—É–º–µ–Ω—Ç ‚Üí –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è
        test1_success = await test_large_document_redirect()
        
        # –¢–µ—Å—Ç 2: –ú–∞–ª–µ–Ω—å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç ‚Üí –æ–±—Ä–∞–±–æ—Ç–∫–∞
        test2_success = await test_small_document_processing()
        
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"- –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã: {'‚úÖ –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–Ø–Æ–¢–°–Ø' if test1_success else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        print(f"- –ú–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã: {'‚úÖ –û–ë–†–ê–ë–ê–¢–´–í–ê–Æ–¢–°–Ø' if test2_success else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        
        if test1_success and test2_success:
            print("\nüéâ –†–ï–®–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢!")
            print("‚úÖ –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã ‚Üí –ø—Ä–æ—Å—å–±–∞ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ")
            print("‚úÖ –ú–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã ‚Üí –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é")
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –í–°–ï–ì–î–ê –ø–æ–ª—É—á–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
        else:
            print("\n‚ùå –†–ï–®–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
