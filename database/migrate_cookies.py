"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã platform_cookies
"""

import os
import asyncio
import logging
from datetime import datetime
from database import Database

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def migrate_cookies_table(db: Database):
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É platform_cookies"""
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        check_table_query = """
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'platform_cookies'
            );
        """
        
        result = await db.execute(check_table_query, fetch=True)
        table_exists = result[0]['exists'] if result else False
        
        if not table_exists:
            logger.info("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É platform_cookies...")
            
            create_table_query = """
                CREATE TABLE platform_cookies (
                    id SERIAL PRIMARY KEY,
                    platform VARCHAR(50) NOT NULL,
                    cookies_json TEXT NOT NULL,
                    user_agent TEXT,
                    proxy TEXT,
                    notes TEXT,
                    added_by INTEGER,
                    created_at TIMESTAMP DEFAULT NOW(),
                    updated_at TIMESTAMP DEFAULT NOW(),
                    expires_at TIMESTAMP,
                    is_active BOOLEAN DEFAULT TRUE,
                    success_count INTEGER DEFAULT 0,
                    error_count INTEGER DEFAULT 0,
                    last_used TIMESTAMP,
                    deleted_at TIMESTAMP NULL
                );
            """
            
            await db.execute(create_table_query)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            indexes = [
                "CREATE INDEX idx_platform_cookies_platform ON platform_cookies(platform);",
                "CREATE INDEX idx_platform_cookies_active ON platform_cookies(is_active, deleted_at);",
                "CREATE INDEX idx_platform_cookies_expires ON platform_cookies(expires_at);",
                "CREATE INDEX idx_platform_cookies_platform_active ON platform_cookies(platform, is_active, deleted_at);",
            ]
            
            for index_query in indexes:
                await db.execute(index_query)
                
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ platform_cookies —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        else:
            logger.info("–¢–∞–±–ª–∏—Ü–∞ platform_cookies —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ deleted_at
            check_column_query = """
                SELECT EXISTS (
                    SELECT 1 FROM information_schema.columns 
                    WHERE table_name = 'platform_cookies' 
                    AND column_name = 'deleted_at'
                );
            """
            
            result = await db.execute(check_column_query, fetch=True)
            column_exists = result[0]['exists'] if result else False
            
            if not column_exists:
                logger.info("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É deleted_at...")
                
                add_column_query = """
                    ALTER TABLE platform_cookies 
                    ADD COLUMN deleted_at TIMESTAMP NULL;
                """
                
                await db.execute(add_column_query)
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
                await db.execute("CREATE INDEX idx_platform_cookies_deleted ON platform_cookies(deleted_at);")
                
                logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ deleted_at –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            else:
                logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ deleted_at —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            required_columns = {
                'success_count': 'INTEGER DEFAULT 0',
                'error_count': 'INTEGER DEFAULT 0',
                'last_used': 'TIMESTAMP',
                'expires_at': 'TIMESTAMP',
                'updated_at': 'TIMESTAMP DEFAULT NOW()'
            }
            
            for column_name, column_definition in required_columns.items():
                check_query = f"""
                    SELECT EXISTS (
                        SELECT 1 FROM information_schema.columns 
                        WHERE table_name = 'platform_cookies' 
                        AND column_name = '{column_name}'
                    );
                """
                
                result = await db.execute(check_query, fetch=True)
                exists = result[0]['exists'] if result else False
                
                if not exists:
                    logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É {column_name}...")
                    add_query = f"ALTER TABLE platform_cookies ADD COLUMN {column_name} {column_definition};"
                    await db.execute(add_query)
                    logger.info(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {column_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        raise


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º DATABASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë —Ç–∞–∫: export DATABASE_URL='postgresql://user:password@host:port/dbname'")
        return
    
    db = Database(database_url)
    
    try:
        await migrate_cookies_table(db)
    except Exception as e:
        logger.error(f"‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
        exit(1)


if __name__ == "__main__":
    asyncio.run(main())
