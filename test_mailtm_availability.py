#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Mail.tm API
"""

import asyncio
import aiohttp
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_mailtm_api():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Mail.tm API"""
    base_url = "https://api.mail.tm"
    
    try:
        async with aiohttp.ClientSession() as session:
            # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            logger.info("Testing Mail.tm API availability...")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤
            async with session.get(f"{base_url}/domains") as response:
                logger.info(f"GET /domains - Status: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"Response data: {data}")
                    
                    domains = data.get("hydra:member", [])
                    if domains:
                        logger.info(f"‚úÖ Found {len(domains)} domains:")
                        for domain in domains[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                            logger.info(f"  - {domain.get('domain', 'Unknown')}")
                    else:
                        logger.warning("‚ö†Ô∏è No domains found in response")
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå API request failed: {response.status}")
                    logger.error(f"Error response: {error_text}")
                    
    except aiohttp.ClientError as e:
        logger.error(f"‚ùå Network error: {e}")
    except Exception as e:
        logger.error(f"‚ùå Unexpected error: {e}")

async def test_alternative_endpoints():
    """–¢–µ—Å—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö endpoints"""
    endpoints = [
        "https://api.mail.tm/domains",
        "https://api.mail.tm/",
    ]
    
    async with aiohttp.ClientSession() as session:
        for url in endpoints:
            try:
                logger.info(f"Testing {url}...")
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    logger.info(f"  Status: {response.status}")
                    if response.status == 200:
                        content_type = response.headers.get('content-type', '')
                        logger.info(f"  Content-Type: {content_type}")
                        
                        if 'json' in content_type:
                            data = await response.json()
                            logger.info(f"  JSON response keys: {list(data.keys()) if isinstance(data, dict) else type(data)}")
                        else:
                            text = await response.text()
                            logger.info(f"  Text response (first 100 chars): {text[:100]}")
                    else:
                        error_text = await response.text()
                        logger.warning(f"  Error: {error_text[:100]}")
                        
            except Exception as e:
                logger.error(f"  Error testing {url}: {e}")

if __name__ == "__main__":
    logger.info("üß™ Testing Mail.tm API availability...")
    
    asyncio.run(test_mailtm_api())
    
    logger.info("\nüîç Testing alternative endpoints...")
    asyncio.run(test_alternative_endpoints())
    
    logger.info("\n‚úÖ Test completed!")
