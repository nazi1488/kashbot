#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è cookies
"""

import asyncio
import logging
import json
from database import Database
from utils.cookies_manager import CookiesManager, FingerprintGenerator
from utils.video_downloader_v2 import EnhancedVideoDownloader
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_cookies_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä cookies"""
    logger.info("üß™ Testing Cookies Manager...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        db = Database(config.DATABASE_URL)
        cookies_manager = CookiesManager(db)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ cookies –¥–ª—è Instagram
        test_cookies = json.dumps([
            {
                "domain": ".instagram.com",
                "name": "test_cookie",
                "value": "test_value",
                "path": "/",
                "secure": True,
                "httpOnly": True
            }
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ cookies
        logger.info("Adding test cookies...")
        success = await cookies_manager.add_cookies(
            platform="instagram",
            cookies_data=test_cookies,
            notes="Test cookies for system check"
        )
        
        if success:
            logger.info("‚úÖ Cookies added successfully!")
        else:
            logger.error("‚ùå Failed to add cookies")
        
        # –ü–æ–ª—É—á–∞–µ–º cookies
        logger.info("Getting cookies...")
        cookie_data = await cookies_manager.get_cookies("instagram")
        
        if cookie_data:
            logger.info(f"‚úÖ Got cookies: ID={cookie_data['id']}")
        else:
            logger.warning("‚ö†Ô∏è No cookies found")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info("Getting statistics...")
        stats = await cookies_manager.get_statistics()
        
        for platform, data in stats.items():
            logger.info(f"üìä {platform}: {data['active']} active, {data['total']} total")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error in cookies manager test: {e}")
        return False

async def test_fingerprint_generator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä fingerprints"""
    logger.info("üß™ Testing Fingerprint Generator...")
    
    platforms = ['instagram', 'tiktok', 'youtube']
    
    for platform in platforms:
        fingerprint = FingerprintGenerator.generate(platform)
        logger.info(f"‚úÖ {platform} fingerprint:")
        logger.info(f"   User-Agent: {fingerprint['user_agent'][:50]}...")
        logger.info(f"   Language: {fingerprint['language']}")
        logger.info(f"   Resolution: {fingerprint['resolution']}")
    
    return True

async def test_video_downloader():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç video downloader"""
    logger.info("üß™ Testing Video Downloader...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        db = Database(config.DATABASE_URL)
        cookies_manager = CookiesManager(db)
        downloader = EnhancedVideoDownloader(
            cookies_manager=cookies_manager,
            db=db
        )
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º
        test_urls = [
            "https://www.tiktok.com/@test/video/123456",
            "https://www.youtube.com/shorts/abc123",
            "https://www.instagram.com/reel/xyz789"
        ]
        
        for url in test_urls:
            platform = downloader.detect_platform(url)
            if platform:
                logger.info(f"‚úÖ Detected {platform} for {url}")
            else:
                logger.error(f"‚ùå Failed to detect platform for {url}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error in video downloader test: {e}")
        return False

async def test_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
    logger.info("üß™ Testing Full Integration...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
        if not config.DATABASE_URL:
            logger.warning("‚ö†Ô∏è DATABASE_URL not configured, skipping integration test")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        db = Database(config.DATABASE_URL)
        cookies_manager = CookiesManager(db)
        downloader = EnhancedVideoDownloader(
            cookies_manager=cookies_manager,
            db=db
        )
        
        logger.info("‚úÖ All components initialized successfully!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await cookies_manager.get_statistics()
        
        total_cookies = sum(s.get('total', 0) for s in stats.values())
        active_cookies = sum(s.get('active', 0) for s in stats.values())
        
        logger.info(f"üìä System status:")
        logger.info(f"   Total cookies: {total_cookies}")
        logger.info(f"   Active cookies: {active_cookies}")
        
        if active_cookies == 0:
            logger.warning("‚ö†Ô∏è No active cookies! Add cookies through admin panel")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error in integration test: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("=" * 50)
    logger.info("üöÄ COOKIES SYSTEM TEST")
    logger.info("=" * 50)
    
    tests = [
        ("Fingerprint Generator", test_fingerprint_generator),
        ("Cookies Manager", test_cookies_manager),
        ("Video Downloader", test_video_downloader),
        ("Full Integration", test_integration)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"\nüìù Running: {test_name}")
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            logger.error(f"‚ùå Test failed with error: {e}")
            results.append((test_name, False))
        logger.info("-" * 30)
    
    # –ò—Ç–æ–≥–∏
    logger.info("\n" + "=" * 50)
    logger.info("üìä TEST RESULTS:")
    logger.info("=" * 50)
    
    passed = 0
    failed = 0
    
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        logger.info(f"{test_name}: {status}")
        if result:
            passed += 1
        else:
            failed += 1
    
    logger.info("-" * 50)
    logger.info(f"Total: {passed} passed, {failed} failed")
    
    if failed == 0:
        logger.info("üéâ All tests passed! System is ready to use!")
    else:
        logger.warning(f"‚ö†Ô∏è {failed} tests failed. Please check the logs above.")
    
    return failed == 0

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = asyncio.run(main())
    exit(0 if success else 1)
