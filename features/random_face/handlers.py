"""
Random Face Handlers

–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –ª–∏—Ü.

UX: —Ç–æ–ª—å–∫–æ sendPhoto, –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
–ö–∞–∂–¥–æ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–∏—Ü–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.
"""

import logging
from typing import TYPE_CHECKING

from telegram import Update, InputFile
from telegram.ext import ContextTypes, CallbackQueryHandler

from features.random_face.service import RandomFaceService
from features.random_face.keyboard import RandomFaceKeyboard
from utils.localization import get_text

if TYPE_CHECKING:
    from redis.asyncio import Redis

logger = logging.getLogger(__name__)


class RandomFaceHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –ª–∏—Ü"""
    
    def __init__(self, redis: 'Redis'):
        self.service = RandomFaceService(redis)
        self.keyboard = RandomFaceKeyboard()
    
    async def show_random_face_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ Random Face
        
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
        """
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        remaining_quota = await self.service.get_remaining_quota(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é
        menu_text = (
            "üë§ **Random Face Generator**\n\n"
            "üß™ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
            "üé® –ö–∞–∂–¥–æ–µ –ª–∏—Ü–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ –∏ —Å–æ–∑–¥–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é.\n\n"
            f"üìä **–û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è:** {remaining_quota} –∏–∑ {context.bot_data.get('FACE_QUOTA_PER_DAY', 10)}\n\n"
            "üí° –ù–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ª–∏—Ü–∞."
        )
        
        await query.edit_message_text(
            text=menu_text,
            reply_markup=self.keyboard.main_menu(),
            parse_mode='Markdown'
        )
    
    async def generate_random_face(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –ª–∏—Ü–æ
        
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∫ –ø–µ—Ä–≤–∏—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, —Ç–∞–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.
        """
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_text = "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –ª–∏—Ü–æ...\n\nüé® –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç
        try:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            if query.message.text:
                await query.edit_message_text(text=loading_text)
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                loading_message = await query.message.reply_text(text=loading_text)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                context.user_data['loading_message'] = loading_message
        except Exception:
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            loading_message = await query.message.reply_text(text=loading_text)
            context.user_data['loading_message'] = loading_message
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
            image_data, error_message = await self.service.fetch_face_image(user_id)
            
            if error_message:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                error_text = f"‚ùå {error_message}"
                try:
                    if query.message.text:
                        await query.edit_message_text(
                            text=error_text,
                            reply_markup=self.keyboard.main_menu()
                        )
                    else:
                        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
                        if 'loading_message' in context.user_data:
                            try:
                                await context.user_data['loading_message'].delete()
                                del context.user_data['loading_message']
                            except:
                                pass
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
                        await query.message.reply_text(
                            text=error_text,
                            reply_markup=self.keyboard.main_menu()
                        )
                except:
                    # Fallback: –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.message.reply_text(
                        text=error_text,
                        reply_markup=self.keyboard.main_menu()
                    )
                return
            
            if image_data is None:
                # –û–±—â–∞—è –æ—à–∏–±–∫–∞
                error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                try:
                    if query.message.text:
                        await query.edit_message_text(
                            text=error_text,
                            reply_markup=self.keyboard.main_menu()
                        )
                    else:
                        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
                        if 'loading_message' in context.user_data:
                            try:
                                await context.user_data['loading_message'].delete()
                                del context.user_data['loading_message']
                            except:
                                pass
                        await query.message.reply_text(
                            text=error_text,
                            reply_markup=self.keyboard.main_menu()
                        )
                except:
                    await query.message.reply_text(
                        text=error_text,
                        reply_markup=self.keyboard.main_menu()
                    )
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            image_file = InputFile(
                obj=image_data,
                filename="random_face.jpg"
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
            caption = (
                "üß™ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–Ω–µ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫).\n"
                "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é thispersondoesnotexist.com\n\n"
                "üîÅ –û–±–Ω–æ–≤–∏ –µ—â—ë —Ä–∞–∑, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=image_file,
                caption=caption,
                reply_markup=self.keyboard.after_generation()
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π
            try:
                if query.message.text:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –º–æ–∂–µ–º –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
                    await query.delete_message()
                elif 'loading_message' in context.user_data:
                    # –£–¥–∞–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    await context.user_data['loading_message'].delete()
                    del context.user_data['loading_message']
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                logger.warning(f"Could not delete loading message: {e}")
            
            logger.info(f"Successfully sent random face to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error generating face for user {user_id}: {type(e).__name__}: {e}")
            
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            try:
                if query.message.text:
                    await query.edit_message_text(
                        text=error_text,
                        reply_markup=self.keyboard.main_menu()
                    )
                else:
                    # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                    if 'loading_message' in context.user_data:
                        try:
                            await context.user_data['loading_message'].delete()
                            del context.user_data['loading_message']
                        except:
                            pass
                    await query.message.reply_text(
                        text=error_text,
                        reply_markup=self.keyboard.main_menu()
                    )
            except:
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
                try:
                    await query.message.reply_text(
                        text=error_text,
                        reply_markup=self.keyboard.main_menu()
                    )
                except:
                    pass
    
    async def handle_more_generation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        
        –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –Ω–æ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∞.
        """
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É
        await self.generate_random_face(update, context)


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è handlers
_handlers_instance = None

def get_handlers_instance(redis: 'Redis') -> RandomFaceHandlers:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä handlers (singleton)"""
    global _handlers_instance
    if _handlers_instance is None:
        _handlers_instance = RandomFaceHandlers(redis)
    return _handlers_instance


async def show_random_face_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é Random Face"""
    if 'random_face_handlers' in context.bot_data:
        await context.bot_data['random_face_handlers'].show_random_face_menu(update, context)


async def generate_random_face_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Callback –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—Ü–∞"""
    if 'random_face_handlers' in context.bot_data:
        await context.bot_data['random_face_handlers'].generate_random_face(update, context)


async def handle_more_generation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Callback –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    if 'random_face_handlers' in context.bot_data:
        await context.bot_data['random_face_handlers'].handle_more_generation(update, context)


def register_random_face_handlers(application, redis: 'Redis') -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Random Face –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    
    Args:
        application: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram –±–æ—Ç–∞
        redis: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    """
    handlers = get_handlers_instance(redis)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º handlers –≤ bot_data –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ callbacks
    application.bot_data['random_face_handlers'] = handlers
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(
        CallbackQueryHandler(
            show_random_face_menu_callback,
            pattern="^random_face_menu$"
        )
    )
    
    application.add_handler(
        CallbackQueryHandler(
            generate_random_face_callback,
            pattern="^random_face_generate$"
        )
    )
    
    application.add_handler(
        CallbackQueryHandler(
            handle_more_generation_callback,
            pattern="^random_face_more$"
        )
    )
    
    logger.info("Random Face handlers registered successfully")
