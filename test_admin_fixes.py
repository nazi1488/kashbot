#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

import asyncio
import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from analytics import Analytics
from database import Database
from config import DATABASE_URL

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_analytics_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    try:
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –í –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò")
        print("=" * 50)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        db = Database(DATABASE_URL)
        analytics = Analytics(db)
        
        print("\nüìä 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º get_total_users()...")
        total_users = await analytics.get_total_users()
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {total_users}")
        
        print("\nüìä 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º get_dau_wau_mau()...")
        dau_wau_mau = await analytics.get_dau_wau_mau()
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {dau_wau_mau}")
        
        print("\nüìä 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º get_users_for_broadcast()...")
        users_broadcast = await analytics.get_users_for_broadcast()
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(users_broadcast)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        if users_broadcast:
            print(f"   –ü—Ä–∏–º–µ—Ä: {users_broadcast[0]}")
        
        print("\nüìä 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º get_new_users()...")
        new_users = await analytics.get_new_users(7)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {new_users}")
        
        print("\nüìä 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º get_hourly_activity()...")
        hourly_activity = await analytics.get_hourly_activity(7)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(hourly_activity)} —á–∞—Å–æ–≤—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤")
        active_hours = [h for h, count in hourly_activity.items() if count > 0]
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã: {active_hours}")
        
        print("\nüìä 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º get_average_retention()...")
        retention_1d = await analytics.get_average_retention(1, 30)
        retention_7d = await analytics.get_average_retention(7, 30)
        retention_30d = await analytics.get_average_retention(30, 30)
        print(f"‚úÖ Retention D1: {retention_1d}%, D7: {retention_7d}%, D30: {retention_30d}%")
        
        print("\nüìä 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º get_churn_rate()...")
        churn_rate = await analytics.get_churn_rate(30)
        print(f"‚úÖ Churn rate: {churn_rate}%")
        
        print("\nüéâ –í–°–ï –ú–ï–¢–û–î–´ –ê–ù–ê–õ–ò–¢–ò–ö–ò –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_data_types():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–∞–º–∏"""
    
    try:
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–û–í –î–ê–ù–ù–´–•")
        print("=" * 30)
        
        db = Database(DATABASE_URL)
        analytics = Analytics(db)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º get_new_users –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict
        new_users = await analytics.get_new_users(7)
        print(f"get_new_users() —Ç–∏–ø: {type(new_users)}")
        assert isinstance(new_users, dict), "get_new_users –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å dict"
        assert 'total' in new_users and 'active' in new_users, "get_new_users –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'total' –∏ 'active'"
        print("‚úÖ get_new_users() - –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º get_hourly_activity –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict
        hourly_activity = await analytics.get_hourly_activity(7)
        print(f"get_hourly_activity() —Ç–∏–ø: {type(hourly_activity)}")
        assert isinstance(hourly_activity, dict), "get_hourly_activity –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å dict"
        assert len(hourly_activity) == 24, "get_hourly_activity –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 24 —á–∞—Å–∞"
        print("‚úÖ get_hourly_activity() - –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º get_users_for_broadcast –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç list
        users_broadcast = await analytics.get_users_for_broadcast()
        print(f"get_users_for_broadcast() —Ç–∏–ø: {type(users_broadcast)}")
        assert isinstance(users_broadcast, list), "get_users_for_broadcast –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å list"
        print("‚úÖ get_users_for_broadcast() - –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø")
        
        print("\n‚úÖ –í–°–ï –¢–ò–ü–´ –î–ê–ù–ù–´–• –ö–û–†–†–ï–ö–¢–ù–´!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô...")
    
    success = True
    
    # –¢–µ—Å—Ç 1: –ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    if not await test_analytics_methods():
        success = False
    
    # –¢–µ—Å—Ç 2: –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    if not await test_data_types():
        success = False
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫")
    else:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò!")
        print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    return success


if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)
