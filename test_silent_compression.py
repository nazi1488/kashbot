#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∂–∞—Ç–∏—è —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import tempfile
import os
from pathlib import Path
from unittest.mock import AsyncMock, MagicMock
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/benutzer/Desktop/–∫–µ—à/bot')

from utils.smart_compressor import compress_for_telegram


async def test_silent_compression():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ —Ñ–∞–π–ª–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
    mock_bot = AsyncMock()
    mock_file = AsyncMock()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª (30MB)
    mock_file.file_size = 30 * 1024 * 1024  # 30MB
    mock_file.download_to_drive = AsyncMock()
    mock_bot.get_file.return_value = mock_file
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp_file:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = b"test video data" * 1000000  # ~15MB –¥–∞–Ω–Ω—ã—Ö
        temp_file.write(test_data)
        temp_file_path = temp_file.name
    
    try:
        # –ú–æ–∫–∞–µ–º download_to_drive –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        async def mock_download(path):
            with open(path, 'wb') as f:
                f.write(test_data)
        
        mock_file.download_to_drive.side_effect = mock_download
        
        # –ú–æ–∫–∞–µ–º callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–∂–∞—Ç–∏–∏
        callback_calls = []
        
        async def progress_callback(stage, info):
            callback_calls.append((stage, info))
            print(f"üìû Callback: {stage} - {info}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        result_path, error = await compress_for_telegram(
            bot=mock_bot,
            file_id="test_file_id",
            original_filename="test_video.mp4",
            progress_callback=progress_callback
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:")
        print(f"- –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {'–î–∞' if result_path else '–ù–µ—Ç'}")
        print(f"- –û—à–∏–±–∫–∞: {error if error else '–ù–µ—Ç'}")
        print(f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(callback_calls)}")
        
        if result_path:
            file_size = result_path.stat().st_size
            print(f"- –†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞: {file_size / (1024*1024):.1f}MB")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∂–∞—Ç –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            if file_size <= 20 * 1024 * 1024:
                print("‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ (‚â§20MB)")
            else:
                print("‚ö†Ô∏è –§–∞–π–ª –≤—Å–µ –µ—â–µ –±–æ–ª—å—à–æ–π")
        
        # –í–∞–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∏–∫–∞–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
        compression_notifications = [call for call in callback_calls if 'compress' in call[0].lower()]
        if not compression_notifications:
            print("‚úÖ –£–°–ü–ï–•: –ù–∏–∫–∞–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–∂–∞—Ç–∏–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∂–∞—Ç–∏–∏: {compression_notifications}")
        
        return result_path is not None and error is None
        
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(temp_file_path):
            os.unlink(temp_file_path)


async def test_small_file():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ñ–∞–π–ª–∞"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ñ–∞–π–ª–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
    mock_bot = AsyncMock()
    mock_file = AsyncMock()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª (5MB)
    mock_file.file_size = 5 * 1024 * 1024  # 5MB
    mock_file.download_to_drive = AsyncMock()
    mock_bot.get_file.return_value = mock_file
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp_file:
        test_data = b"small video" * 100000  # ~1MB –¥–∞–Ω–Ω—ã—Ö
        temp_file.write(test_data)
        temp_file_path = temp_file.name
    
    try:
        async def mock_download(path):
            with open(path, 'wb') as f:
                f.write(test_data)
        
        mock_file.download_to_drive.side_effect = mock_download
        
        callback_calls = []
        async def progress_callback(stage, info):
            callback_calls.append((stage, info))
        
        result_path, error = await compress_for_telegram(
            bot=mock_bot,
            file_id="test_small_file_id", 
            original_filename="small_video.mp4",
            progress_callback=progress_callback
        )
        
        print(f"‚úÖ –ú–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {'–î–∞' if result_path else '–ù–µ—Ç'}")
        print(f"‚úÖ –°–∂–∞—Ç–∏–µ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª–æ—Å—å (—Ñ–∞–π–ª <20MB): {'–î–∞' if len(callback_calls) <= 1 else '–ù–µ—Ç'}")
        
        return result_path is not None
        
    finally:
        if os.path.exists(temp_file_path):
            os.unlink(temp_file_path)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∂–∞—Ç–∏—è\n")
    
    try:
        # –¢–µ—Å—Ç 1: –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–∂–∞—Ç–∏–µ–º
        success1 = await test_silent_compression()
        
        # –¢–µ—Å—Ç 2: –ú–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª –±–µ–∑ —Å–∂–∞—Ç–∏—è  
        success2 = await test_small_file()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"- –¢–µ—Å—Ç –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: {'‚úÖ –ü–†–û–ô–î–ï–ù' if success1 else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
        print(f"- –¢–µ—Å—Ç –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ñ–∞–π–ª–∞: {'‚úÖ –ü–†–û–ô–î–ï–ù' if success2 else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
        
        if success1 and success2:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –ª–∏—à–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            print("‚úÖ –§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏")
        else:
            print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
