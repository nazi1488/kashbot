#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è ROI-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
"""

import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from handlers.roi.metrics import ROIMetrics
from handlers.roi.validators import parse_number, validate_number

def test_parse_number():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–µ–ª"""
    print("üî¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å–µ–ª")
    print("-" * 40)
    
    test_cases = [
        ("1000", 1000.0),
        ("1,000", 1000.0),
        ("1 000", 1000.0),
        ("1000.50", 1000.50),
        ("1,000.50", 1000.50),
        ("1000,50", 1000.50),
        ("1 000,50", 1000.50),
        ("$1000", 1000.0),
        ("1000$", 1000.0),
        ("abc", None),
        ("-100", None),  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º
        ("", None),
    ]
    
    for input_text, expected in test_cases:
        result = parse_number(input_text)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} '{input_text}' -> {result} (–æ–∂–∏–¥–∞–ª–∏: {expected})")
    
    return True

def test_roi_metrics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ ROI –º–µ—Ç—Ä–∏–∫")
    print("-" * 40)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–¥–∞–Ω–∏—è
    test_data = {
        'spend': 1095.0,      # —Ä–∞—Å—Ö–æ–¥
        'income': 1500.0,     # –¥–æ—Ö–æ–¥
        'shows': 60000.0,     # –ø–æ–∫–∞–∑—ã
        'clicks': 2500.0,     # –∫–ª–∏–∫–∏
        'leads': 85.0,        # –∑–∞—è–≤–∫–∏
        'sales': 41.0         # –ø—Ä–æ–¥–∞–∂–∏
    }
    
    calculator = ROIMetrics(test_data)
    results = calculator.calculate_all()
    metrics = results['metrics']
    
    print("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
    for metric, value in metrics.items():
        print(f"  {metric}: {value}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    expected_checks = [
        # ROI ‚âà 37.0% = (1500-1095)/1095*100 = 405/1095*100 ‚âà 37.0%
        ('ROI', lambda x: '37.0%' in x or '36.9%' in x),
        # CTR ‚âà 4.2% = 2500/60000*100 ‚âà 4.17%
        ('CTR', lambda x: '4.1%' in x or '4.2%' in x),
        # CTC ‚âà 3.4% = 85/2500*100 = 3.4%
        ('CTC', lambda x: '3.4%' in x),
        # CTB ‚âà 48.2% = 41/85*100 ‚âà 48.2%
        ('CTB', lambda x: '48.2%' in x or '48.1%' in x),
        # ROAS ‚âà 1.37 = 1500/1095 ‚âà 1.37
        ('ROAS', lambda x: '1.37' in x or '1.36' in x),
    ]
    
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫:")
    all_passed = True
    for metric_name, check_func in expected_checks:
        if metric_name in metrics:
            passed = check_func(metrics[metric_name])
            status = "‚úÖ" if passed else "‚ùå"
            print(f"{status} {metric_name}: {metrics[metric_name]}")
            if not passed:
                all_passed = False
        else:
            print(f"‚ùå {metric_name}: –ù–ï –ù–ê–ô–î–ï–ù")
            all_passed = False
    
    return all_passed

def test_edge_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
    print("-" * 40)
    
    # –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥ –∏ –¥–æ—Ö–æ–¥
    minimal_data = {'spend': 100.0, 'income': 150.0}
    calculator = ROIMetrics(minimal_data)
    results = calculator.calculate_all()
    
    if 'ROI' in results['metrics']:
        print("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ä–∞—Å—Ö–æ–¥+–¥–æ—Ö–æ–¥): ROI —Ä–∞—Å—Å—á–∏—Ç–∞–Ω")
    else:
        print("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ROI –ù–ï —Ä–∞—Å—Å—á–∏—Ç–∞–Ω")
        return False
    
    # –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    empty_data = {}
    calculator = ROIMetrics(empty_data)
    results = calculator.calculate_all()
    
    if not results['metrics']:
        print("‚úÖ –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ: –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")
    else:
        print("‚ùå –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ: –µ—Å—Ç—å –ª–∏—à–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏")
        return False
    
    # –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
    zero_data = {'spend': 0, 'income': 100, 'shows': 0, 'clicks': 100}
    calculator = ROIMetrics(zero_data)
    results = calculator.calculate_all()
    
    # ROI –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å—Å—è (spend = 0)
    # CTR –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å—Å—è (shows = 0)
    if 'ROI' not in results['metrics'] and 'CTR' not in results['metrics']:
        print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False
    
    return True

def test_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("\nüíÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("-" * 40)
    
    test_data = {
        'spend': 1000.0,
        'income': 1500.0,
        'shows': 10000.0,
        'clicks': 500.0
    }
    
    calculator = ROIMetrics(test_data)
    card = calculator.format_results_card()
    
    print("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞:")
    print(card)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    required_elements = [
        "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞**",
        "ROI:",
        "üìã **–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**"
    ]
    
    all_found = True
    for element in required_elements:
        if element in card:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: {element}")
        else:
            print(f"‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: {element}")
            all_found = False
    
    return all_found

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ROI-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")
    print("=" * 50)
    
    tests = [
        test_parse_number,
        test_roi_metrics,
        test_edge_cases,
        test_formatting
    ]
    
    results = []
    for test_func in tests:
        try:
            result = test_func()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
            results.append(False)
    
    print("\n" + "=" * 50)
    passed = sum(results)
    total = len(results)
    
    if passed == total:
        print(f"üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! ({passed}/{total})")
        print("\nüí° ROI-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("   ‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–µ–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   ‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ") 
        print("   ‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print("   ‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ")
    else:
        print(f"‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã: {passed}/{total}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
