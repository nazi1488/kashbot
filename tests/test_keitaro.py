"""
–¢–µ—Å—Ç—ã –¥–ª—è Keitaro –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import pytest
import asyncio
import hashlib
from datetime import datetime, timedelta
from unittest.mock import Mock, AsyncMock, MagicMock

from features.keitaro.templates import (
    normalize_status, format_amount, get_message_template, escape_html
)


class TestKeitaroTemplates:
    """–¢–µ—Å—Ç—ã —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def test_normalize_status(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤"""
        assert normalize_status("registration") == "registration"
        assert normalize_status("lead") == "registration"
        assert normalize_status("signup") == "registration"
        assert normalize_status("DEPOSIT") == "deposit"
        assert normalize_status("sale") == "deposit"
        assert normalize_status("ftd") == "deposit"
        assert normalize_status("rejected") == "rejected"
        assert normalize_status("trash") == "rejected"
        assert normalize_status("unknown") == "registration"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def test_format_amount(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã"""
        assert format_amount("100", "", "USD") == "100 USD"
        assert format_amount("100.00", "", "EUR") == "100 EUR"
        assert format_amount("100.50", "", "USD") == "100.50 USD"
        assert format_amount("", "50", "RUB") == "50 RUB"
        assert format_amount("", "50.00", "") == "50"
        assert format_amount("", "", "") == "0"
    
    def test_escape_html(self):
        """–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML"""
        assert escape_html("<script>") == "&lt;script&gt;"
        assert escape_html("Test & Co") == "Test &amp; Co"
        assert escape_html("Normal text") == "Normal text"
        assert escape_html("") == ""
        assert escape_html(None) == ""
    
    def test_registration_template(self):
        """–¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        event = {
            'status': 'registration',
            'campaign_name': 'Test Campaign',
            'offer_name': 'Test Offer',
            'country': 'US',
            'sub_id_1': 'sub1',
            'transaction_id': 'tx123'
        }
        
        message = get_message_template(event)
        assert "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>" in message
        assert "Test Campaign" in message
        assert "Test Offer" in message
        assert "US" in message
        assert "sub1" in message
        assert "tx123" in message
    
    def test_deposit_template(self):
        """–¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–∞"""
        event = {
            'status': 'deposit',
            'campaign_name': 'Campaign 1',
            'creative_id': 'cr123',
            'offer_name': 'Landing 1',
            'conversion_revenue': '100',
            'currency': 'USD',
            'country': 'UK',
            'sub_id_1': 'test',
            'transaction_id': 'tx456'
        }
        
        message = get_message_template(event)
        assert "üí∞ <b>–î–µ–ø–æ–∑–∏—Ç</b>" in message
        assert "Campaign 1" in message
        assert "cr123" in message
        assert "Landing 1" in message
        assert "100 USD" in message
        assert "UK" in message
        assert "test" in message
        assert "tx456" in message
    
    def test_rejected_template(self):
        """–¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–∞ –æ—Ç–∫–∞–∑–∞"""
        event = {
            'status': 'rejected',
            'campaign_name': 'Campaign X',
            'sub_id_2': 'invalid_geo',  # –ü—Ä–∏—á–∏–Ω–∞ —á–∞—Å—Ç–æ –≤ sub_id_2
            'transaction_id': 'tx789'
        }
        
        message = get_message_template(event)
        assert "‚õîÔ∏è <b>–û—Ç–∫–∞–∑</b>" in message
        assert "Campaign X" in message
        assert "invalid_geo" in message
        assert "tx789" in message


class TestKeitaroDuplication:
    """–¢–µ—Å—Ç—ã –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π"""
    
    @pytest.fixture
    def mock_db(self):
        """–ú–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        db = AsyncMock()
        db.execute = AsyncMock()
        return db
    
    @pytest.mark.asyncio
    async def test_dedup_check(self, mock_db):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        from web_server import KeitaroWebServer
        from telegram import Bot
        
        mock_bot = Mock(spec=Bot)
        server = KeitaroWebServer(mock_bot, mock_db, 8080)
        
        # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–∞
        mock_db.execute.return_value = []
        is_dup = await server._check_duplicate(1, "tx123", 3600)
        assert is_dup is False
        
        # –í—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç
        mock_db.execute.return_value = [{'id': 1}]
        is_dup = await server._check_duplicate(1, "tx123", 3600)
        assert is_dup is True


class TestKeitaroRouting:
    """–¢–µ—Å—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π"""
    
    @pytest.fixture
    def mock_db(self):
        """–ú–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        db = AsyncMock()
        db.execute = AsyncMock()
        return db
    
    @pytest.fixture
    def mock_profile(self):
        """–ú–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
        from database.keitaro_models import KeitaroProfile
        profile = KeitaroProfile()
        profile.id = 1
        profile.default_chat_id = -1001234567890
        profile.default_topic_id = None
        profile.enabled = True
        profile.rate_limit_rps = 27
        profile.dedup_ttl_sec = 3600
        return profile
    
    @pytest.mark.asyncio
    async def test_route_by_campaign_id(self, mock_db, mock_profile):
        """–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ campaign_id"""
        from web_server import KeitaroWebServer
        from telegram import Bot
        
        mock_bot = Mock(spec=Bot)
        server = KeitaroWebServer(mock_bot, mock_db, 8080)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        routes = [
            {
                'match_by': 'campaign_id',
                'match_value': 'camp123',
                'is_regex': False,
                'target_chat_id': -1009999999999,
                'target_topic_id': None,
                'status_filter': None,
                'geo_filter': None
            }
        ]
        mock_db.execute.return_value = routes
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º campaign_id
        event_data = {'campaign_id': 'camp123'}
        chat_id, topic_id = await server._route_event(mock_profile, event_data)
        
        assert chat_id == -1009999999999
        assert topic_id is None
    
    @pytest.mark.asyncio
    async def test_route_with_filters(self, mock_db, mock_profile):
        """–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        from web_server import KeitaroWebServer
        from telegram import Bot
        
        mock_bot = Mock(spec=Bot)
        server = KeitaroWebServer(mock_bot, mock_db, 8080)
        
        # –ü—Ä–∞–≤–∏–ª–æ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
        routes = [
            {
                'match_by': 'any',
                'match_value': '*',
                'is_regex': False,
                'target_chat_id': -1008888888888,
                'target_topic_id': None,
                'status_filter': ['deposit', 'sale'],
                'geo_filter': ['US', 'UK']
            }
        ]
        mock_db.execute.return_value = routes
        
        # –°–æ–±—ã—Ç–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ñ–∏–ª—å—Ç—Ä—ã
        event_data = {'status': 'deposit', 'country': 'US'}
        chat_id, topic_id = await server._route_event(mock_profile, event_data)
        assert chat_id == -1008888888888
        
        # –°–æ–±—ã—Ç–∏–µ –ù–ï –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        event_data = {'status': 'registration', 'country': 'US'}
        chat_id, topic_id = await server._route_event(mock_profile, event_data)
        assert chat_id == mock_profile.default_chat_id  # Fallback –Ω–∞ –¥–µ—Ñ–æ–ª—Ç
    
    @pytest.mark.asyncio
    async def test_route_fallback_to_default(self, mock_db, mock_profile):
        """–¢–µ—Å—Ç fallback –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        from web_server import KeitaroWebServer
        from telegram import Bot
        
        mock_bot = Mock(spec=Bot)
        server = KeitaroWebServer(mock_bot, mock_db, 8080)
        
        # –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–∞–≤–∏–ª
        mock_db.execute.return_value = []
        
        event_data = {'campaign_id': 'unknown'}
        chat_id, topic_id = await server._route_event(mock_profile, event_data)
        
        assert chat_id == mock_profile.default_chat_id
        assert topic_id == mock_profile.default_topic_id


class TestKeitaroRateLimit:
    """–¢–µ—Å—Ç—ã rate limiting"""
    
    def test_rate_limit_basic(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç rate limit"""
        from web_server import KeitaroWebServer
        from telegram import Bot
        
        mock_bot = Mock(spec=Bot)
        mock_db = Mock()
        server = KeitaroWebServer(mock_bot, mock_db, 8080)
        
        profile_id = 1
        max_rps = 3
        
        # –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
        for i in range(3):
            assert server._check_rate_limit(profile_id, max_rps) is True
        
        # 4-–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        assert server._check_rate_limit(profile_id, max_rps) is False
    
    def test_rate_limit_time_window(self):
        """–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ rate limit"""
        import time
        from web_server import KeitaroWebServer
        from telegram import Bot
        
        mock_bot = Mock(spec=Bot)
        mock_db = Mock()
        server = KeitaroWebServer(mock_bot, mock_db, 8080)
        
        profile_id = 2
        max_rps = 2
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–∏–º–∏—Ç
        assert server._check_rate_limit(profile_id, max_rps) is True
        assert server._check_rate_limit(profile_id, max_rps) is True
        assert server._check_rate_limit(profile_id, max_rps) is False
        
        # –ñ–¥–µ–º > 1 —Å–µ–∫—É–Ω–¥—ã
        time.sleep(1.1)
        
        # –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞—Ç—å
        assert server._check_rate_limit(profile_id, max_rps) is True


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
