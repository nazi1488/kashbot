#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
"""

import asyncio
import sys
from unittest.mock import AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/benutzer/Desktop/–∫–µ—à/bot')

from utils.large_file_downloader import download_large_file


async def test_compressed_video_download():
    """–¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ –æ—Ç Telegram"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞
    mock_bot = AsyncMock()
    
    # –ú–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ
    mock_file = AsyncMock()
    mock_file.download_to_drive = AsyncMock()
    mock_bot.get_file.return_value = mock_file
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    from pathlib import Path
    import tempfile
    
    with tempfile.TemporaryDirectory() as temp_dir:
        dest_path = Path(temp_dir) / "compressed_video.mp4"
        
        success = await download_large_file(
            bot=mock_bot,
            file_id="compressed_video_id",
            destination=dest_path
        )
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"- get_file –≤—ã–∑–≤–∞–Ω: {'–î–∞' if mock_bot.get_file.called else '–ù–µ—Ç'}")
        print(f"- download_to_drive –≤—ã–∑–≤–∞–Ω: {'–î–∞' if mock_file.download_to_drive.called else '–ù–µ—Ç'}")
        print(f"- –£—Å–ø–µ—à–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {'–î–∞' if success else '–ù–µ—Ç'}")
        
        if success and mock_file.download_to_drive.called:
            print("‚úÖ –£–°–ü–ï–•: –°–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            return True
        else:
            print("‚ùå –ü–†–û–í–ê–õ: –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º")
            return False


async def test_failed_download():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
    mock_bot = AsyncMock()
    mock_bot.get_file.side_effect = Exception("File is too big")
    
    from pathlib import Path
    import tempfile
    
    with tempfile.TemporaryDirectory() as temp_dir:
        dest_path = Path(temp_dir) / "failed_video.mp4"
        
        success = await download_large_file(
            bot=mock_bot,
            file_id="failed_video_id", 
            destination=dest_path
        )
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"- get_file –≤—ã–∑–≤–∞–Ω: {'–î–∞' if mock_bot.get_file.called else '–ù–µ—Ç'}")
        print(f"- –£—Å–ø–µ—à–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {'–î–∞' if success else '–ù–µ—Ç'}")
        print(f"- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏: {'–î–∞' if not success else '–ù–µ—Ç'}")
        
        if not success:
            print("‚úÖ –£–°–ü–ï–•: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚ùå –ü–†–û–í–ê–õ: –û—à–∏–±–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–û–õ–ù–û–ì–û –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ
        test1_success = await test_compressed_video_download()
        
        # –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        test2_success = await test_failed_download()
        
        print("\n" + "=" * 50)
        print("üìä –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {'‚úÖ –î–ê' if test1_success else '‚ùå –ù–ï–¢'}")
        print(f"- –û—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è: {'‚úÖ –î–ê' if test2_success else '‚ùå –ù–ï–¢'}")
        
        if test1_success and test2_success:
            print("\nüéâ –ü–û–õ–ù–´–ô –ü–û–¢–û–ö –†–ê–ë–û–¢–ê–ï–¢!")
            print("‚úÖ –°–∂–∞—Ç—ã–µ –≤–∏–¥–µ–æ —Å–∫–∞—á–∏–≤–∞—é—Ç—Å—è")
            print("‚úÖ –û—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
            print("\nüî• –õ–û–ì–ò–ß–ï–°–ö–ê–Ø –¶–ï–ü–û–ß–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê:")
            print("1. –ë–æ–ª—å—à–æ–π –¥–æ–∫—É–º–µ–Ω—Ç ‚Üí –ø—Ä–æ—Å—å–±–∞ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ")
            print("2. –°–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ ‚Üí —É—Å–ø–µ—à–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ") 
            print("3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ ‚Üí —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è")
            print("4. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–û–õ–£–ß–ê–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢! üéØ")
        else:
            print("\n‚ùå –ü–û–¢–û–ö –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
            print("‚ö†Ô∏è –õ–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ø–æ—á–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
