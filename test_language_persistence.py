#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import asyncio
import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import Database
from config import DATABASE_URL

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_language_persistence():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    try:
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø –Ø–ó–´–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("=" * 50)
        
        db = Database(DATABASE_URL)
        
        # –¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞
        print("\nüìù –¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        test_user_id = 999999999
        test_language = "en"
        test_username = "test_user"
        
        success = await db.set_user_language(test_user_id, test_language, test_username)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞: {'—É—Å–ø–µ—à–Ω–æ' if success else '–æ—à–∏–±–∫–∞'}")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        print("\nüìñ –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞")
        saved_language = await db.get_user_language(test_user_id)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —è–∑—ã–∫: {saved_language}")
        print(f"‚úÖ –Ø–∑—ã–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: {'–¥–∞' if saved_language == test_language else '–Ω–µ—Ç'}")
        
        # –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\nüîÑ –¢–µ—Å—Ç 3: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        new_language = "ru"
        success = await db.set_user_language(test_user_id, new_language, test_username)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞: {'—É—Å–ø–µ—à–Ω–æ' if success else '–æ—à–∏–±–∫–∞'}")
        
        updated_language = await db.get_user_language(test_user_id)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫: {updated_language}")
        print(f"‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è: {'–¥–∞' if updated_language == new_language else '–Ω–µ—Ç'}")
        
        # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n‚ùì –¢–µ—Å—Ç 4: –Ø–∑—ã–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        nonexistent_user_id = 888888888
        no_language = await db.get_user_language(nonexistent_user_id)
        print(f"‚úÖ –Ø–∑—ã–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {no_language}")
        print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None: {'–¥–∞' if no_language is None else '–Ω–µ—Ç'}")
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("\nüóÑÔ∏è –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ")
        check_query = """
            SELECT tg_id, username, language, first_seen_at, last_seen_at 
            FROM users 
            WHERE tg_id = %s
        """
        result = await db.execute(check_query, (test_user_id,), fetch=True)
        
        if result:
            user_data = result[0]
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:")
            print(f"   üÜî TG ID: {user_data['tg_id']}")
            print(f"   üë§ Username: {user_data['username']}")
            print(f"   üåê Language: {user_data['language']}")
            print(f"   üìÖ First seen: {user_data['first_seen_at']}")
            print(f"   üìÖ Last seen: {user_data['last_seen_at']}")
        else:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        cleanup_query = "DELETE FROM users WHERE tg_id = %s"
        await db.execute(cleanup_query, (test_user_id,))
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_database_methods():
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –º–µ—Ç–æ–¥–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        print("\n" + "=" * 50)
        print("üî¨ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–û–í –ë–î")
        print("=" * 50)
        
        db = Database(DATABASE_URL)
        
        # –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        languages_to_test = ['ru', 'en', 'uk', 'de', 'fr']
        test_users = [
            (111111111, 'user_ru', 'ru'),
            (222222222, 'user_en', 'en'), 
            (333333333, 'user_uk', 'uk'),
            (444444444, None, 'de'),  # –ë–µ–∑ username
            (555555555, 'user_fr', 'fr'),
        ]
        
        print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤:")
        for user_id, username, lang in test_users:
            success = await db.set_user_language(user_id, lang, username)
            saved_lang = await db.get_user_language(user_id)
            status = "‚úÖ" if success and saved_lang == lang else "‚ùå"
            print(f"   {status} User {user_id}: {lang} -> {saved_lang}")
        
        # –û—á–∏—Å—Ç–∫–∞
        print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        for user_id, _, _ in test_users:
            await db.execute("DELETE FROM users WHERE tg_id = %s", (user_id,))
        
        print("‚úÖ –¢–µ—Å—Ç—ã —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –Ø–ó–´–ö–û–í...")
    
    success1 = await test_language_persistence()
    success2 = await test_database_methods()
    
    print("\n" + "=" * 50)
    if success1 and success2:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("üì± –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—Ä–∞–∑—É –ø–æ–ø–∞–¥—É—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    else:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò!")
        print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    return success1 and success2


if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)
