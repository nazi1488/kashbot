#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ owner_user_id –≤ keitaro_profiles
"""

import asyncio
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from database.models import Database
import config

async def test_unique_constraint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏ ON CONFLICT"""
    
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è Keitaro")
    print("=" * 60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        db = Database(config.DATABASE_URL)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_user_id = 999999999  # –¢–µ—Å—Ç–æ–≤—ã–π user_id
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ON CONFLICT —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç
        print("üìä –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã ON CONFLICT —Å owner_user_id")
        
        query = """
            INSERT INTO keitaro_profiles (
                owner_user_id, secret, default_chat_id, default_topic_id,
                enabled, rate_limit_rps, dedup_ttl_sec, pull_enabled,
                created_at, updated_at
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, NOW(), NOW())
            ON CONFLICT (owner_user_id) DO UPDATE SET
                secret = EXCLUDED.secret,
                default_chat_id = EXCLUDED.default_chat_id,
                default_topic_id = EXCLUDED.default_topic_id,
                updated_at = NOW()
            RETURNING id, owner_user_id
        """
        
        # –ü–µ—Ä–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞
        result1 = await db.execute(query, (
            test_user_id, 'test_secret_1', -1001234567890, None, True, 27, 3600, False
        ), fetch=True)
        
        profile_id_1 = result1[0]['id']
        print(f"   ‚úÖ –ü–µ—Ä–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, profile_id: {profile_id_1}")
        
        # –í—Ç–æ—Ä–∞—è –≤—Å—Ç–∞–≤–∫–∞ (–¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å UPDATE)
        result2 = await db.execute(query, (
            test_user_id, 'test_secret_2', -1001234567891, 123, True, 27, 3600, False
        ), fetch=True)
        
        profile_id_2 = result2[0]['id']
        print(f"   ‚úÖ –í—Ç–æ—Ä–∞—è –≤—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞ (UPDATE), profile_id: {profile_id_2}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –æ—Å—Ç–∞–ª—Å—è —Ç–æ—Ç –∂–µ (—ç—Ç–æ –±—ã–ª UPDATE, –∞ –Ω–µ INSERT)
        if profile_id_1 == profile_id_2:
            print("   ‚úÖ ON CONFLICT —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–∏–ª—Å—è, –∞ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –Ω–æ–≤—ã–π")
        else:
            print("   ‚ùå ON CONFLICT —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - —Å–æ–∑–¥–∞–ª—Å—è –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
            return False
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("üìä –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        check_query = "SELECT secret, default_chat_id FROM keitaro_profiles WHERE owner_user_id = %s"
        result = await db.execute(check_query, (test_user_id,), fetch=True)
        
        if result and result[0]['secret'] == 'test_secret_2':
            print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("   ‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å")
            return False
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cleanup_query = "DELETE FROM keitaro_profiles WHERE owner_user_id = %s"
        await db.execute(cleanup_query, (test_user_id,))
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ owner_user_id —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ ON CONFLICT —Ç–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ –û—à–∏–±–∫–∞ 'InvalidColumnReference' –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_unique_constraint())
    sys.exit(0 if success else 1)
