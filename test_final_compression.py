#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∂–∞—Ç–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–º
"""

import asyncio
import tempfile
import os
from pathlib import Path
from unittest.mock import AsyncMock
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É  
sys.path.append('/Users/benutzer/Desktop/–∫–µ—à/bot')

from utils.smart_compressor import compress_video_ffmpeg


async def create_test_video(output_path: Path, duration_seconds: int = 10, size_mb: int = 25):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é ffmpeg"""
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é ffmpeg
        import ffmpeg
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –ø–æ–ª–æ—Å–∞–º–∏
        stream = ffmpeg.input('color=size=1280x720:duration=10:rate=30:color=red', f='lavfi')
        stream = ffmpeg.output(stream, str(output_path), vcodec='libx264', acodec='aac', b='20M')
        
        process = await asyncio.create_subprocess_exec(
            *ffmpeg.compile(stream, overwrite_output=True),
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        await process.wait()
        
        if output_path.exists():
            actual_size = output_path.stat().st_size / (1024 * 1024)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ: {actual_size:.1f}MB")
            return True
        
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
        return False


async def test_real_video_compression():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ...\n")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        
        # –°–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ (~20MB)
        input_video = temp_path / "large_video.mp4"
        print("üìπ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ...")
        
        if not await create_test_video(input_video, duration_seconds=10, size_mb=20):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        original_size_mb = input_video.stat().st_size / (1024 * 1024)
        print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {original_size_mb:.1f}MB")
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ 20MB, —Å–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–∏–π
        if original_size_mb < 20:
            print("üìπ –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞...")
            bigger_video = temp_path / "bigger_video.mp4" 
            if await create_test_video(bigger_video, duration_seconds=30, size_mb=30):
                input_video = bigger_video
                original_size_mb = input_video.stat().st_size / (1024 * 1024)
                print(f"üìä –ù–æ–≤—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {original_size_mb:.1f}MB")
        
        # –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ
        output_video = temp_path / "compressed_video.mp4"
        
        print("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∂–∞—Ç–∏–µ...")
        success = await compress_video_ffmpeg(input_video, output_video, target_size_mb=18)
        
        if success and output_video.exists():
            compressed_size_mb = output_video.stat().st_size / (1024 * 1024)
            compression_ratio = (original_size_mb - compressed_size_mb) / original_size_mb * 100
            
            print(f"‚úÖ –°–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä: {compressed_size_mb:.1f}MB")
            print(f"üìâ –£–º–µ–Ω—å—à–µ–Ω–∏–µ: {compression_ratio:.1f}%")
            
            if compressed_size_mb <= 20:
                print("‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è Telegram (‚â§20MB)")
                return True
            else:
                print("‚ö†Ô∏è –§–∞–π–ª –≤—Å–µ –µ—â–µ –±–æ–ª—å—à–æ–π –¥–ª—è Telegram")
                return False
        else:
            print("‚ùå –°–∂–∞—Ç–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return False


async def test_image_compression():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n")
    
    try:
        from PIL import Image
        from utils.smart_compressor import compress_image_pillow
        
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            input_image = temp_path / "large_image.jpg"
            
            print("üñºÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 4K —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            image = Image.new('RGB', (3840, 2160), color='red')
            image.save(input_image, 'JPEG', quality=95)
            
            original_size_mb = input_image.stat().st_size / (1024 * 1024)
            print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {original_size_mb:.1f}MB")
            
            # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            output_image = temp_path / "compressed_image.jpg"
            
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∂–∞—Ç–∏–µ...")
            success = await compress_image_pillow(input_image, output_image, target_size_mb=18)
            
            if success and output_image.exists():
                compressed_size_mb = output_image.stat().st_size / (1024 * 1024)
                compression_ratio = (original_size_mb - compressed_size_mb) / original_size_mb * 100
                
                print(f"‚úÖ –°–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                print(f"üìä –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä: {compressed_size_mb:.1f}MB")
                print(f"üìâ –£–º–µ–Ω—å—à–µ–Ω–∏–µ: {compression_ratio:.1f}%")
                
                if compressed_size_mb <= 20:
                    print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è Telegram (‚â§20MB)")
                    return True
                else:
                    print("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ –±–æ–ª—å—à–æ–µ")
                    return False
            else:
                print("‚ùå –°–∂–∞—Ç–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
                return False
                
    except ImportError:
        print("‚ö†Ô∏è PIL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∂–∞—Ç–∏—è\n")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ
        video_success = await test_real_video_compression()
        
        # –¢–µ—Å—Ç —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_success = await test_image_compression()
        
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"- –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if video_success else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        print(f"- –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if image_success else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        
        if video_success and image_success:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
            print("‚úÖ –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —Å–∂–∏–º–∞—Ç—å—Å—è –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("‚úÖ –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏ –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞")
        else:
            print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
            print("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É ffmpeg –∏ ffmpeg-python")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
