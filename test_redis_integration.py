#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç Random Face —Å —Ä–µ–∞–ª—å–Ω—ã–º Redis

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–¥—É–ª—è —Å –Ω–∞—Å—Ç–æ—è—â–∏–º Redis-—Å–µ—Ä–≤–µ—Ä–æ–º.
–¢—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ Redis –Ω–∞ localhost:6379
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from features.random_face.service import RandomFaceService
from infra.redis import redis_manager


async def test_redis_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º Redis"""
    
    print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º Random Face —Å —Ä–µ–∞–ª—å–Ω—ã–º Redis...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis
        redis_client = await redis_manager.initialize()
        print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service = RandomFaceService(redis_client)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–≤–æ—Ç—ã
        user_id = 99999  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–≤–æ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–≤–æ—Ç—É
        initial_quota = await service.get_remaining_quota(user_id)
        print(f"   –ù–∞—á–∞–ª—å–Ω–∞—è –∫–≤–æ—Ç–∞: {initial_quota}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏)
        is_limited = await service._is_rate_limited(user_id)
        print(f"   –ê–Ω—Ç–∏—Å–ø–∞–º –∞–∫—Ç–∏–≤–µ–Ω: {is_limited}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
        await service._set_rate_limit(user_id)
        print("   ‚úÖ –ê–Ω—Ç–∏—Å–ø–∞–º —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º (—Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å)
        is_limited = await service._is_rate_limited(user_id)
        print(f"   –ê–Ω—Ç–∏—Å–ø–∞–º –∞–∫—Ç–∏–≤–µ–Ω: {is_limited}")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–≤–æ—Ç—É
        await service._increment_quota(user_id)
        print("   ‚úÖ –ö–≤–æ—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –∫–≤–æ—Ç—É
        new_quota = await service.get_remaining_quota(user_id)
        print(f"   –ù–æ–≤–∞—è –∫–≤–æ—Ç–∞: {new_quota}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª—é—á–µ–π
        quota_key = service._get_quota_key(user_id)
        print(f"   –ö–ª—é—á –∫–≤–æ—Ç—ã: {quota_key}")
        
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Redis –æ–ø–µ—Ä–∞—Ü–∏–∏:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π
        exists = await redis_client.exists(quota_key)
        print(f"   –ö–ª—é—á –∫–≤–æ—Ç—ã —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {exists}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        quota_value = await redis_client.get(quota_key)
        print(f"   –ó–Ω–∞—á–µ–Ω–∏–µ –∫–≤–æ—Ç—ã: {quota_value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
        ttl = await redis_client.ttl(quota_key)
        print(f"   TTL –∫–≤–æ—Ç—ã: {ttl} —Å–µ–∫—É–Ω–¥")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await redis_client.delete(quota_key)
        await redis_client.delete(f"face:lock:{user_id}")
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
        await redis_manager.close()
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        
        try:
            await redis_manager.close()
        except:
            pass


async def test_quota_limits():
    """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∫–≤–æ—Ç—ã"""
    
    print("\nüöß –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–≤–æ—Ç—ã...")
    
    try:
        redis_client = await redis_manager.initialize()
        service = RandomFaceService(redis_client)
        
        user_id = 99998  # –î—Ä—É–≥–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–≤–æ—Ç—É –Ω–∞ –º–∞–∫—Å–∏–º—É–º
        quota_key = service._get_quota_key(user_id)
        from config import settings
        await redis_client.set(quota_key, settings.FACE_QUOTA_PER_DAY)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∫–≤–æ—Ç—ã
        is_exceeded = await service._is_quota_exceeded(user_id)
        print(f"   –ö–≤–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∞: {is_exceeded}")
        
        remaining = await service.get_remaining_quota(user_id)
        print(f"   –û—Å—Ç–∞–≤—à–∞—è—Å—è –∫–≤–æ—Ç–∞: {remaining}")
        
        # –û—á–∏—Å—Ç–∫–∞
        await redis_client.delete(quota_key)
        
        await redis_manager.close()
        print("   ‚úÖ –¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ Random Face + Redis")
    print("üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: Redis –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:6379")
    
    asyncio.run(test_redis_integration())
    asyncio.run(test_quota_limits())
    
    print("\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
