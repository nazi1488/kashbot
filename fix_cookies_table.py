#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã platform_cookies
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∫–æ–ª–æ–Ω–∫—É deleted_at
"""

import os
import sys
import asyncio
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import Database
from config import DATABASE_URL

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def fix_cookies_table():
    """–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã cookies"""
    
    # –ü–æ–ª—É—á–∞–µ–º DATABASE_URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    database_url = DATABASE_URL
    if not database_url:
        logger.error("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ config.py")
        return False
    
    logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        db = Database(database_url)
        logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É platform_cookies...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        check_table = """
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = 'platform_cookies'
            );
        """
        
        result = await db.execute(check_table, fetch=True)
        table_exists = result[0]['exists'] if result else False
        
        if not table_exists:
            logger.info("üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É platform_cookies...")
            
            create_table = """
                CREATE TABLE platform_cookies (
                    id SERIAL PRIMARY KEY,
                    platform VARCHAR(50) NOT NULL,
                    cookies_json TEXT NOT NULL,
                    user_agent TEXT,
                    proxy TEXT,
                    notes TEXT,
                    added_by INTEGER,
                    created_at TIMESTAMP DEFAULT NOW(),
                    updated_at TIMESTAMP DEFAULT NOW(),
                    expires_at TIMESTAMP,
                    is_active BOOLEAN DEFAULT TRUE,
                    success_count INTEGER DEFAULT 0,
                    error_count INTEGER DEFAULT 0,
                    last_used TIMESTAMP,
                    deleted_at TIMESTAMP NULL
                );
                
                CREATE INDEX idx_platform_cookies_platform ON platform_cookies(platform);
                CREATE INDEX idx_platform_cookies_active ON platform_cookies(is_active, deleted_at);
            """
            
            await db.execute(create_table)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        else:
            logger.info("üìã –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É deleted_at...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É deleted_at
            check_column = """
                SELECT EXISTS (
                    SELECT 1 FROM information_schema.columns 
                    WHERE table_name = 'platform_cookies' 
                    AND column_name = 'deleted_at'
                );
            """
            
            result = await db.execute(check_column, fetch=True)
            column_exists = result[0]['exists'] if result else False
            
            if not column_exists:
                logger.info("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É deleted_at...")
                
                add_column = """
                    ALTER TABLE platform_cookies 
                    ADD COLUMN deleted_at TIMESTAMP NULL;
                """
                
                await db.execute(add_column)
                logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ deleted_at –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            else:
                logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ deleted_at —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—É–∫–æ–≤...")
        
        stats_query = """
            SELECT 
                platform,
                COUNT(*) as total,
                SUM(CASE WHEN is_active AND deleted_at IS NULL THEN 1 ELSE 0 END) as active
            FROM platform_cookies
            WHERE deleted_at IS NULL
            GROUP BY platform
        """
        
        stats = await db.execute(stats_query, fetch=True)
        
        if stats:
            logger.info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É–∫–æ–≤:")
            for row in stats:
                logger.info(f"  {row['platform']}: {row['active']}/{row['total']} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        else:
            logger.info("üì≠ –ö—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        logger.info("üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã platform_cookies...")
    print("=" * 50)
    
    success = asyncio.run(fix_cookies_table())
    
    if success:
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∫—É–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.")
    else:
        print("\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        sys.exit(1)
