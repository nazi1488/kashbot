#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 2FA TOTP –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
"""

import asyncio
import sys
import os
import time
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils.totp_generator import (
    TOTPGenerator, 
    totp_gen, 
    get_demo_data, 
    generate_new_secret_with_code,
    generate_code_for_secret
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_totp_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å TOTP –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò 2FA")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–∞
        print("\nüìù –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞")
        secret = totp_gen.generate_secret()
        print(f"‚úÖ –°–µ–∫—Ä–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {secret}")
        print(f"‚úÖ –î–ª–∏–Ω–∞ —Å–µ–∫—Ä–µ—Ç–∞: {len(secret)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ–∫—Ä–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        valid_chars = set('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567')
        secret_chars = set(secret.upper())
        is_valid = secret_chars.issubset(valid_chars)
        print(f"‚úÖ –°–µ–∫—Ä–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ Base32 —Å–∏–º–≤–æ–ª—ã: {'–¥–∞' if is_valid else '–Ω–µ—Ç'}")
        
        # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TOTP –∫–æ–¥–∞
        print("\nüî¢ –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TOTP –∫–æ–¥–∞")
        code = totp_gen.generate_totp_code(secret)
        print(f"‚úÖ TOTP –∫–æ–¥: {code}")
        print(f"‚úÖ –î–ª–∏–Ω–∞ –∫–æ–¥–∞: {len(code)} —Ü–∏—Ñ—Ä")
        print(f"‚úÖ –ö–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä: {code.isdigit()}")
        
        # –¢–µ—Å—Ç 3: –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        print("\n‚è∞ –¢–µ—Å—Ç 3: –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è")
        remaining = totp_gen.get_remaining_time()
        print(f"‚úÖ –°–µ–∫—É–Ω–¥ –¥–æ —Å–º–µ–Ω—ã –∫–æ–¥–∞: {remaining}")
        print(f"‚úÖ –í—Ä–µ–º—è –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö (1-30): {1 <= remaining <= 30}")
        
        # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–∞
        print("\nüîç –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤")
        valid_secret = "JNXW24DTPEBXXX3NNFSGK2LO"
        invalid_secret = "invalid_secret_123"
        
        is_valid1 = totp_gen.validate_secret(valid_secret)
        is_valid2 = totp_gen.validate_secret(invalid_secret)
        
        print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–π —Å–µ–∫—Ä–µ—Ç '{valid_secret}': {'–ø—Ä–∏–Ω—è—Ç' if is_valid1 else '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}")
        print(f"‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–µ–∫—Ä–µ—Ç '{invalid_secret}': {'–ø—Ä–∏–Ω—è—Ç' if is_valid2 else '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}")
        
        # –¢–µ—Å—Ç 5: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print("\nüíÖ –¢–µ—Å—Ç 5: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞")
        formatted = totp_gen.format_secret_display(secret)
        print(f"‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π —Å–µ–∫—Ä–µ—Ç: {secret}")
        print(f"‚úÖ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {formatted}")
        
        print("\nüéâ –í–°–ï –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–∞—Ö: {e}")
        return False


def test_totp_consistency():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–æ–≤"""
    
    print("\n" + "=" * 50)
    print("üîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò")
    print("=" * 50)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç
        test_secret = "JNXW24DTPEBXXX3NNFSGK2LOMRQXS3DP"
        current_time = int(time.time())
        
        print(f"\nüîë –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç: {test_secret}")
        print(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        codes = []
        for i in range(5):
            code = totp_gen.generate_totp_code(test_secret, current_time)
            codes.append(code)
        
        # –í—Å–µ –∫–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏
        all_same = len(set(codes)) == 1
        print(f"‚úÖ –ö–æ–¥—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {codes}")
        print(f"‚úÖ –í—Å–µ –∫–æ–¥—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã: {'–¥–∞' if all_same else '–Ω–µ—Ç'}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        print(f"\n‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤:")
        time_codes = {}
        for offset in [0, 30, 60, 90]:  # 0, 30, 60, 90 —Å–µ–∫—É–Ω–¥
            test_time = current_time + offset
            code = totp_gen.generate_totp_code(test_secret, test_time)
            time_codes[test_time] = code
            print(f"   –í—Ä–µ–º—è {test_time} (+{offset}s): {code}")
        
        # –ö–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö 30-—Å–µ–∫—É–Ω–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
        unique_codes = len(set(time_codes.values()))
        print(f"‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: {unique_codes} –∏–∑ {len(time_codes)}")
        
        print("\nüéâ –¢–ï–°–¢–´ –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")
        return False


def test_demo_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    print("\n" + "=" * 50) 
    print("üé≠ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–• –§–£–ù–ö–¶–ò–ô")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –¢–µ—Å—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        demo_code, demo_secret, demo_remaining = get_demo_data()
        
        print(f"‚úÖ –î–µ–º–æ –∫–æ–¥: {demo_code}")
        print(f"‚úÖ –î–µ–º–æ —Å–µ–∫—Ä–µ—Ç: {demo_secret}")
        print(f"‚úÖ –î–µ–º–æ –≤—Ä–µ–º—è: {demo_remaining} —Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ–º–æ —Å–µ–∫—Ä–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        demo_code2, demo_secret2, _ = get_demo_data()
        is_same_secret = demo_secret == demo_secret2
        print(f"‚úÖ –î–µ–º–æ —Å–µ–∫—Ä–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {'–¥–∞' if is_same_secret else '–Ω–µ—Ç'}")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
        print("\nüé≤ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞:")
        new_code, new_secret, new_remaining = generate_new_secret_with_code()
        
        print(f"‚úÖ –ù–æ–≤—ã–π –∫–æ–¥: {new_code}")
        print(f"‚úÖ –ù–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç: {new_secret}")
        print(f"‚úÖ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_remaining} —Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–µ —Å–µ–∫—Ä–µ—Ç—ã —Ä–∞–∑–Ω—ã–µ
        new_code2, new_secret2, _ = generate_new_secret_with_code()
        is_different = new_secret != new_secret2
        print(f"‚úÖ –ù–æ–≤—ã–µ —Å–µ–∫—Ä–µ—Ç—ã —Ä–∞–∑–Ω—ã–µ: {'–¥–∞' if is_different else '–Ω–µ—Ç'}")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
        print("\n‚öôÔ∏è –¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞:")
        custom_secret = "ABCD1234EFGH5678IJKL9012"
        custom_code, custom_remaining = generate_code_for_secret(custom_secret)
        
        if custom_code:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–¥: {custom_code}")
            print(f"‚úÖ –í—Ä–µ–º—è: {custom_remaining} —Å–µ–∫")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞")
        
        # –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
        invalid_code, _ = generate_code_for_secret("invalid")
        is_none = invalid_code is None
        print(f"‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω: {'–¥–∞' if is_none else '–Ω–µ—Ç'}")
        
        print("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö: {e}")
        return False


def test_qr_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR –∫–æ–¥–æ–≤"""
    
    print("\n" + "=" * 50)
    print("üì± –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò QR –ö–û–î–û–í")  
    print("=" * 50)
    
    try:
        test_secret = "JNXW24DTPEBXXX3NNFSGK2LO"
        
        print(f"\nüîë –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç: {test_secret}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
        qr_buffer = totp_gen.generate_qr_code(test_secret, "TestUser", "2FA Test")
        
        if qr_buffer:
            qr_size = len(qr_buffer.getvalue())
            print(f"‚úÖ QR –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"‚úÖ –†–∞–∑–º–µ—Ä QR –∫–æ–¥–∞: {qr_size} –±–∞–π—Ç")
            print(f"‚úÖ QR –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ: {'–¥–∞' if qr_size > 100 else '–Ω–µ—Ç'}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            qr_buffer.seek(0)
            with open("/tmp/test_qr.png", "wb") as f:
                f.write(qr_buffer.read())
            print(f"‚úÖ QR –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ /tmp/test_qr.png –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥")
            return False
        
        print("\nüéâ –¢–ï–°–¢–´ QR –ö–û–î–û–í –ü–†–û–ô–î–ï–ù–´!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö QR –∫–æ–¥–æ–≤: {e}")
        return False


def test_real_world_scenario():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    print("\n" + "=" * 50)
    print("üåç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ì–û –°–¶–ï–ù–ê–†–ò–Ø")
    print("=" * 50)
    
    try:
        print("\nüì± –°—Ü–µ–Ω–∞—Ä–∏–π: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π 2FA")
        
        # –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç
        code1, secret1, remaining1 = generate_new_secret_with_code()
        print(f"‚úÖ –®–∞–≥ 1: –ù–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç —Å–æ–∑–¥–∞–Ω")
        print(f"   –°–µ–∫—Ä–µ—Ç: {totp_gen.format_secret_display(secret1)}")
        print(f"   –ö–æ–¥: {code1}")
        print(f"   –í—Ä–µ–º—è: {remaining1} —Å–µ–∫")
        
        # –®–∞–≥ 2: –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ —Ç–æ—Ç –∂–µ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 30 —Å–µ–∫)
        import time
        time.sleep(2)
        code2, remaining2 = generate_code_for_secret(secret1)
        
        print(f"‚úÖ –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫")
        print(f"   –ö–æ–¥: {code2}")
        print(f"   –í—Ä–µ–º—è: {remaining2} —Å–µ–∫")
        print(f"   –ö–æ–¥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: {'–¥–∞' if code1 == code2 else '–Ω–µ—Ç'}")
        
        # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        qr_buffer = totp_gen.generate_qr_code(secret1, "TestUser")
        qr_success = qr_buffer is not None
        print(f"‚úÖ –®–∞–≥ 3: QR –∫–æ–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: {'—Å–æ–∑–¥–∞–Ω' if qr_success else '–æ—à–∏–±–∫–∞'}")
        
        # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –∫–æ–¥—ã
        code3, secret3, _ = generate_new_secret_with_code()
        different_secrets = secret1 != secret3
        different_codes = code1 != code3
        
        print(f"‚úÖ –®–∞–≥ 4: –†–∞–∑–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –∫–æ–¥—ã")
        print(f"   –°–µ–∫—Ä–µ—Ç—ã —Ä–∞–∑–Ω—ã–µ: {'–¥–∞' if different_secrets else '–Ω–µ—Ç'}")
        print(f"   –ö–æ–¥—ã —Ä–∞–∑–Ω—ã–µ: {'–¥–∞' if different_codes else '–Ω–µ—Ç'}")
        
        print(f"\nüéâ –†–ï–ê–õ–¨–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø 2FA –ì–ï–ù–ï–†–ê–¢–û–†–ê")
    print("üîê –ê–Ω–∞–ª–æ–≥ —Å–∞–π—Ç–∞ https://2fa.cn/")
    print("=" * 60)
    
    tests = [
        ("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", test_totp_basic_functionality),
        ("–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å", test_totp_consistency), 
        ("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", test_demo_functions),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤", test_qr_generation),
        ("–†–µ–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", test_real_world_scenario)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {status}")
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {test_name}")
    
    print(f"\nüìà –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    success_rate = (passed / total) * 100 if total > 0 else 0
    print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ 2FA –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("üîê –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ https://2fa.cn/")
    else:
        print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print(f"üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ {total - passed} —Ç–µ—Å—Ç–æ–≤")
    
    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
