#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å self-hosted Telegram Bot API
"""

import asyncio
import tempfile
import os
import sys
from pathlib import Path
from unittest.mock import AsyncMock, MagicMock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/benutzer/Desktop/–∫–µ—à/bot')

import config
from handlers.uniqizer import start_uniqizer, file_handler, wrong_media_handler, copies_input_handler
from utils.smart_compressor import compress_for_telegram


class TestSelfHostedAPI:
    """–¢–µ—Å—Ç—ã –¥–ª—è self-hosted Bot API"""
    
    def __init__(self):
        self.passed = 0
        self.failed = 0
        self.total = 0
    
    async def test_config_loading(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è self-hosted API"""
        print("\nüß™ –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        try:
            # –ú–æ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            with patch.dict('os.environ', {
                'USE_LOCAL_BOT_API': 'true',
                'LOCAL_BOT_API_URL': 'http://localhost:8081',
                'MAX_FILE_SIZE': str(500 * 1024 * 1024)  # 500MB
            }):
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config
                import importlib
                importlib.reload(config)
                
                assert config.USE_LOCAL_BOT_API == True
                assert config.LOCAL_BOT_API_URL == 'http://localhost:8081'
                assert config.MAX_FILE_SIZE == 500 * 1024 * 1024
                
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                print(f"   - Self-hosted API: {config.USE_LOCAL_BOT_API}")
                print(f"   - URL: {config.LOCAL_BOT_API_URL}")
                print(f"   - Max file size: {config.MAX_FILE_SIZE / (1024*1024)}MB")
                self.passed += 1
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.failed += 1
            return False
    
    async def test_new_flow_file_first(self):
        """–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞: —Å–Ω–∞—á–∞–ª–∞ —Ñ–∞–π–ª, –ø–æ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π"""
        print("\nüß™ –¢–µ—Å—Ç 2: –ù–æ–≤—ã–π –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
            mock_update = MagicMock()
            mock_query = MagicMock()
            mock_query.answer = AsyncMock()
            mock_query.message.reply_text = AsyncMock()
            mock_update.callback_query = mock_query
            
            mock_context = MagicMock()
            mock_context.user_data = {}
            
            # –¢–µ—Å—Ç start_uniqizer - –¥–æ–ª–∂–µ–Ω –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–∞–π–ª
            result = await start_uniqizer(mock_update, mock_context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª (WAITING_FOR_FILE = 0)
            assert result == 0, f"–û–∂–∏–¥–∞–ª—Å—è WAITING_FOR_FILE (0), –ø–æ–ª—É—á–µ–Ω {result}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
            call_args = mock_query.message.reply_text.call_args
            assert call_args is not None, "reply_text –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω"
            
            print("‚úÖ –ù–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
            print("   - –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª")
            print("   - WAITING_FOR_FILE = 0")
            self.passed += 1
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            self.failed += 1
            return False
    
    async def test_file_processing_large(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ (300MB) —Å self-hosted API"""
        print("\nüß™ –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ (300MB)")
        
        try:
            # –ú–æ–∫–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è self-hosted API
            with patch.object(config, 'USE_LOCAL_BOT_API', True):
                with patch.object(config, 'MAX_FILE_SIZE', 500 * 1024 * 1024):  # 500MB
                    
                    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ 300MB
                    mock_document = MagicMock()
                    mock_document.file_size = 300 * 1024 * 1024  # 300MB
                    mock_document.file_name = "large_video.mp4"
                    
                    mock_message = MagicMock()
                    mock_message.document = mock_document
                    mock_message.reply_text = AsyncMock()
                    
                    mock_update = MagicMock()
                    mock_update.message = mock_message
                    
                    mock_context = MagicMock()
                    mock_context.user_data = {}
                    
                    # –í—ã–∑—ã–≤–∞–µ–º file_handler
                    result = await file_handler(mock_update, mock_context)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ø—Ä–∏–Ω—è—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π
                    assert result == 1, f"–û–∂–∏–¥–∞–ª—Å—è WAITING_FOR_COPIES (1), –ø–æ–ª—É—á–µ–Ω {result}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ context
                    assert 'file_obj' in mock_context.user_data
                    assert mock_context.user_data['file_obj'] == mock_document
                    assert mock_context.user_data['file_name'] == "large_video.mp4"
                    
                    print("‚úÖ –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω:")
                    print("   - –§–∞–π–ª 300MB –ø—Ä–∏–Ω—è—Ç")
                    print("   - –ó–∞–ø—Ä–æ—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π")
                    print("   - –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
                    self.passed += 1
                    return True
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            self.failed += 1
            return False
    
    async def test_copies_processing(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        print("\nüß™ –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Ñ–∞–π–ª–∞
            mock_file = MagicMock()
            mock_file.file_id = "test_file_id"
            mock_file.file_size = 100 * 1024 * 1024  # 100MB
            
            mock_message = MagicMock()
            mock_message.text = "5"
            mock_message.reply_text = AsyncMock()
            
            mock_update = MagicMock()
            mock_update.message = mock_message
            
            mock_context = MagicMock()
            mock_context.user_data = {
                'file_obj': mock_file,
                'file_name': 'test_video.mp4',
                'is_compressed': False
            }
            
            # –ú–æ–∫–∞–µ–º process_media_file
            with patch('handlers.uniqizer.process_media_file', new_callable=AsyncMock) as mock_process:
                mock_process.return_value = 0  # ConversationHandler.END
                
                # –í—ã–∑—ã–≤–∞–µ–º copies_input_handler
                result = await copies_input_handler(mock_update, mock_context)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
                assert context.user_data.get('copies_count') == 5
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ process_media_file –≤—ã–∑–≤–∞–Ω
                assert mock_process.called
                
                print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π:")
                print("   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π: 5")
                print("   - –ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω")
                self.passed += 1
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            self.failed += 1
            return False
    
    async def test_download_large_file(self):
        """–¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ self-hosted API"""
        print("\nüß™ –¢–µ—Å—Ç 5: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞ —Å self-hosted API
            mock_bot = AsyncMock()
            mock_file = AsyncMock()
            mock_file.file_size = 400 * 1024 * 1024  # 400MB
            mock_file.download_to_drive = AsyncMock()
            mock_bot.get_file.return_value = mock_file
            
            with tempfile.TemporaryDirectory() as temp_dir:
                temp_path = Path(temp_dir) / "test_video.mp4"
                
                # –í—ã–∑—ã–≤–∞–µ–º compress_for_telegram
                result_path, error = await compress_for_telegram(
                    bot=mock_bot,
                    file_id="large_file_id",
                    original_filename="test_video.mp4"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª "—Å–∫–∞—á–∞–Ω"
                assert mock_bot.get_file.called
                assert mock_file.download_to_drive.called
                
                print("‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞:")
                print("   - –§–∞–π–ª 400MB —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                print("   - Self-hosted API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                self.passed += 1
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            self.failed += 1
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SELF-HOSTED TELEGRAM BOT API")
        print("=" * 60)
        
        tests = [
            self.test_config_loading(),
            self.test_new_flow_file_first(),
            self.test_file_processing_large(),
            self.test_copies_processing(),
            self.test_download_large_file()
        ]
        
        for test in tests:
            self.total += 1
            await test
        
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.passed}/{self.total}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.failed}/{self.total}")
        
        if self.failed == 0:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("\n‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï:")
            print("1. Self-hosted API –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("2. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ 500MB —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("3. –ù–æ–≤—ã–π –ø–æ—Ç–æ–∫ (—Ñ–∞–π–ª ‚Üí –∫–æ–ø–∏–∏) —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("4. –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            print("\nüì¶ –î–õ–Ø –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø –ù–ê VPS:")
            print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo bash install_telegram_bot_api.sh")
            print("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ USE_LOCAL_BOT_API=true –≤ .env")
            print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python3 main.py")
        else:
            print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê")
        
        return self.failed == 0


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = TestSelfHostedAPI()
    success = await tester.run_all_tests()
    
    if not success:
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
