"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
"""

import logging
import traceback
import asyncio
from typing import Optional, Dict, Any, Callable
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from utils.localization import get_text
import config

logger = logging.getLogger(__name__)


class BotError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ –±–æ—Ç–∞"""

    def __init__(self, message: str, user_message: Optional[str] = None, error_code: Optional[str] = None):
        self.message = message
        self.user_message = user_message or message
        self.error_code = error_code or "UNKNOWN_ERROR"
        super().__init__(self.message)


class FileProcessingError(BotError):
    """–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"""
    pass


class ValidationError(BotError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    pass


class QueueError(BotError):
    """–û—à–∏–±–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á"""
    pass


class DatabaseError(BotError):
    """–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    pass


class ExternalServiceError(BotError):
    """–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    pass


class ErrorHandler:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""

    def __init__(self):
        self.error_counts = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –æ—à–∏–±–æ–∫
        self.admin_notifications = set()  # –û—à–∏–±–∫–∏, –æ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞

    async def handle_error(
        self,
        update: Optional[Update],
        context: ContextTypes.DEFAULT_TYPE,
        error: Exception,
        user_id: Optional[int] = None
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –∏ –≤–µ—Ä–Ω—É—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        Returns:
            dict: {
                'user_message': str,
                'should_notify_admin': bool,
                'log_level': str,
                'error_code': str
            }
        """

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        error_type = type(error).__name__

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        error_context = {
            'user_id': user_id or (update.effective_user.id if update and update.effective_user else None),
            'chat_id': update.effective_chat.id if update and update.effective_chat else None,
            'message_id': update.effective_message.id if update and update.effective_message else None,
            'error_type': error_type,
            'error_message': str(error),
            'traceback': traceback.format_exc()
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω—É–∂–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –∞–¥–º–∏–Ω–∞
        should_notify_admin = False
        log_level = 'error'

        if isinstance(error, (FileProcessingError, QueueError, DatabaseError)):
            should_notify_admin = True
            log_level = 'warning' if isinstance(error, ValidationError) else 'error'
        elif isinstance(error, ExternalServiceError):
            should_notify_admin = True
            log_level = 'error'

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await self._log_error(error_context, log_level)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = await self._get_user_message(error, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –æ—à–∏–±–∫–∏
        if should_notify_admin:
            await self._check_repeated_errors(error_context)

        return {
            'user_message': user_message,
            'should_notify_admin': should_notify_admin,
            'log_level': log_level,
            'error_code': getattr(error, 'error_code', 'UNKNOWN_ERROR')
        }

    async def _log_error(self, error_context: Dict[str, Any], level: str = 'error'):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""

        log_data = {
            'user_id': error_context['user_id'],
            'chat_id': error_context['chat_id'],
            'error_type': error_context['error_type'],
            'error_message': error_context['error_message']
        }

        log_message = (
            f"Error occurred: {error_context['error_type']} - {error_context['error_message']}\n"
            f"User ID: {error_context['user_id']}\n"
            f"Chat ID: {error_context['chat_id']}\n"
            f"Full traceback:\n{error_context['traceback']}"
        )

        if level == 'error':
            logger.error(log_message, extra=log_data)
        elif level == 'warning':
            logger.warning(log_message, extra=log_data)
        else:
            logger.info(log_message, extra=log_data)

    async def _get_user_message(self, error: Exception, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏"""

        if isinstance(error, ValidationError):
            return get_text(context, 'validation_error', error=error.user_message)
        elif isinstance(error, FileProcessingError):
            return get_text(context, 'file_processing_error', error=error.user_message)
        elif isinstance(error, QueueError):
            return get_text(context, 'queue_error', error=error.user_message)
        elif isinstance(error, DatabaseError):
            return get_text(context, 'database_error')
        elif isinstance(error, ExternalServiceError):
            return get_text(context, 'service_error', error=error.user_message)
        else:
            # Safely get user_message or fallback to string representation
            error_msg = getattr(error, 'user_message', str(error))
            return get_text(context, 'generic_error', error=error_msg)

    async def _check_repeated_errors(self, error_context: Dict[str, Any]):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –æ—à–∏–±–∫–∏"""

        error_key = f"{error_context['error_type']}_{error_context['user_id']}"

        current_time = asyncio.get_event_loop().time()
        if error_key in self.error_counts:
            last_time, count = self.error_counts[error_key]
            if current_time - last_time < 300:  # 5 –º–∏–Ω—É—Ç
                count += 1
                if count >= 5:  # 5 –æ—à–∏–±–æ–∫ –∑–∞ 5 –º–∏–Ω—É—Ç
                    await self._notify_admin(error_context, repeated=True)
                    del self.error_counts[error_key]
                else:
                    self.error_counts[error_key] = (current_time, count)
            else:
                self.error_counts[error_key] = (current_time, 1)
        else:
            self.error_counts[error_key] = (current_time, 1)

    async def _notify_admin(self, error_context: Dict[str, Any], repeated: bool = False):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ"""

        if not hasattr(config, 'BOT_ADMINS') or not config.BOT_ADMINS:
            return

        from telegram.ext import Application

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        if repeated:
            logger.critical(
                f"REPEATED ERROR detected for user {error_context['user_id']}: "
                f"{error_context['error_type']} - {error_context['error_message']}"
            )
        else:
            logger.warning(
                f"ADMIN NOTIFICATION: {error_context['error_type']} - {error_context['error_message']} "
                f"for user {error_context['user_id']}"
            )

    async def send_error_message(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
        error_info: Dict[str, Any]
    ):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not update or not update.effective_message:
            logger.warning("Cannot send error message: no update or effective_message")
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.effective_message.reply_text(
                text=error_info['user_message'],
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )

        except Exception as e:
            logger.error(f"Failed to send error message to user: {e}")
            # Fallback - –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
                )
            except:
                logger.error("Completely failed to send error message")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
error_handler = ErrorHandler()
