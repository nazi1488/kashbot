"""
–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
"""

import logging
import logging.handlers
import json
from typing import Dict, Any, Optional
from datetime import datetime
from pathlib import Path
import sys
import os

from utils.error_handler import error_handler


class ContextFilter(logging.Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –ª–æ–≥–∏"""

    def __init__(self, context_data: Optional[Dict[str, Any]] = None):
        super().__init__()
        self.context_data = context_data or {}

    def filter(self, record):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞"""
        for key, value in self.context_data.items():
            setattr(record, key, value)
        return True


class TelegramBotFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"""

    def __init__(self, include_context: bool = True):
        self.include_context = include_context
        super().__init__(
            fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )

    def format(self, record):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        level_emojis = {
            'DEBUG': 'üêõ',
            'INFO': '‚ÑπÔ∏è',
            'WARNING': '‚ö†Ô∏è',
            'ERROR': '‚ùå',
            'CRITICAL': 'üö®'
        }

        # –ó–∞–º–µ–Ω—è–µ–º –∏–º—è —É—Ä–æ–≤–Ω—è –Ω–∞ —ç–º–æ–¥–∑–∏ + —Ç–µ–∫—Å—Ç
        original_levelname = record.levelname
        if record.levelname in level_emojis:
            record.levelname = f"{level_emojis[record.levelname]} {record.levelname}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.include_context and hasattr(record, 'user_id'):
            context_info = []
            if hasattr(record, 'user_id'):
                context_info.append(f"User: {record.user_id}")
            if hasattr(record, 'chat_id'):
                context_info.append(f"Chat: {record.chat_id}")
            if hasattr(record, 'error_code'):
                context_info.append(f"Error: {record.error_code}")

            if context_info:
                record.msg = f"[{', '.join(context_info)}] {record.msg}"

        result = super().format(record)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —É—Ä–æ–≤–Ω—è
        record.levelname = original_levelname

        return result


class ErrorTrackingHandler(logging.Handler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫"""

    def __init__(self):
        super().__init__()
        self.error_count = {}
        self.critical_errors = []

    def emit(self, record):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–∞"""
        if record.levelno >= logging.ERROR:
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
            error_key = f"{record.name}:{record.levelname}"
            current_time = datetime.now()

            if error_key in self.error_count:
                last_time, count = self.error_count[error_key]
                if (current_time - last_time).seconds < 300:  # 5 –º–∏–Ω—É—Ç
                    count += 1
                    if count >= 10:  # 10 –æ—à–∏–±–æ–∫ –∑–∞ 5 –º–∏–Ω—É—Ç
                        self._handle_critical_error(record, error_key, count)
                else:
                    self.error_count[error_key] = (current_time, 1)
            else:
                self.error_count[error_key] = (current_time, 1)

    def _handle_critical_error(self, record, error_key, count):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –æ—à–∏–±–∫–∞–º–∏"""
        critical_error = {
            'error_key': error_key,
            'count': count,
            'first_seen': datetime.now(),
            'last_seen': datetime.now(),
            'message': record.getMessage(),
            'level': record.levelname
        }

        self.critical_errors.append(critical_error)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        asyncio.create_task(
            error_handler._notify_admin({
                'error_type': 'REPEATED_ERRORS',
                'error_message': f"Critical error flood detected: {error_key} ({count} errors in 5 minutes)"
            }, repeated=True)
        )


def setup_logging(
    log_level: str = "INFO",
    log_file: str = "bot.log",
    max_file_size: int = 10 * 1024 * 1024,  # 10MB
    backup_count: int = 5,
    include_context: bool = True
):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    log_path = Path(log_file)
    log_path.parent.mkdir(parents=True, exist_ok=True)

    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger()
    logger.setLevel(getattr(logging, log_level.upper(), logging.INFO))

    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    for handler in logger.handlers[:]:
        logger.removeHandler(handler)

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_formatter = TelegramBotFormatter(include_context=include_context)
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)

    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    file_handler = logging.handlers.RotatingFileHandler(
        log_file,
        maxBytes=max_file_size,
        backupCount=backup_count,
        encoding='utf-8'
    )
    file_handler.setLevel(logging.DEBUG)
    file_formatter = TelegramBotFormatter(include_context=include_context)
    file_handler.setFormatter(file_formatter)
    logger.addHandler(file_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
    error_tracker = ErrorTrackingHandler()
    error_tracker.setLevel(logging.WARNING)
    logger.addHandler(error_tracker)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('telegram').setLevel(logging.INFO)
    logging.getLogger('asyncio').setLevel(logging.WARNING)

    return logger, error_tracker


def log_with_context(
    logger: logging.Logger,
    level: str,
    message: str,
    context: Optional[Dict[str, Any]] = None,
    **kwargs
):
    """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    if context:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        context_filter = ContextFilter(context)
        logger.addFilter(context_filter)

    try:
        log_method = getattr(logger, level.lower())
        log_method(message, **kwargs)
    finally:
        # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
        if context:
            logger.removeFilter(context_filter)


def create_error_report(error_tracker, include_critical: bool = True) -> str:
    """–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö"""
    report = []

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
    report.append("üìä –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö\n")

    if error_tracker.error_count:
        report.append("üîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –æ—à–∏–±–∫–∏:")
        for error_key, (last_time, count) in error_tracker.error_count.items():
            report.append(f"  ‚Ä¢ {error_key}: {count} —Ä–∞–∑")

    if include_critical and error_tracker.critical_errors:
        report.append("\nüö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:")
        for error in error_tracker.critical_errors[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
            report.append(
                f"  ‚Ä¢ {error['error_key']}: {error['count']} –æ—à–∏–±–æ–∫\n"
                f"    –°–æ–æ–±—â–µ–Ω–∏–µ: {error['message'][:100]}..."
            )

    return "\n".join(report)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
_bot_logger = None
_error_tracker = None


def get_logger() -> logging.Logger:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä"""
    global _bot_logger
    if _bot_logger is None:
        _bot_logger, _error_tracker = setup_logging()
    return _bot_logger


def get_error_tracker():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä –æ—à–∏–±–æ–∫"""
    global _error_tracker
    if _error_tracker is None:
        _, _error_tracker = setup_logging()
    return _error_tracker
