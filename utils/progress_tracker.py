"""
–¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
"""

import asyncio
import time
from typing import Optional, Callable, Dict, Any
from telegram import Message
import logging

logger = logging.getLogger(__name__)


class ProgressTracker:
    """–¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self, message: Message, operation_name: str = "–û–±—Ä–∞–±–æ—Ç–∫–∞"):
        """
        Args:
            message: Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        self.message = message
        self.operation_name = operation_name
        self.start_time = time.time()
        self.last_update = 0
        self.update_interval = 2  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.progress_emojis = ["‚è≥", "‚åõ", "üîÑ", "‚öôÔ∏è", "üõ†Ô∏è", "‚è±Ô∏è"]
        self.current_emoji_index = 0
        
    async def update_progress(self, stage: str, progress: Optional[float] = None):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
        
        Args:
            stage: –¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            progress: –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100), –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        """
        current_time = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        if current_time - self.last_update < self.update_interval:
            return
        
        try:
            elapsed_time = int(current_time - self.start_time)
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            emoji = self.progress_emojis[self.current_emoji_index]
            self.current_emoji_index = (self.current_emoji_index + 1) % len(self.progress_emojis)
            
            message_text = f"{emoji} {self.operation_name}...\n"
            message_text += f"üìç {stage}\n"
            message_text += f"‚è∞ –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_time}—Å"
            
            if progress is not None:
                progress_bar = self._create_progress_bar(progress)
                message_text += f"\n{progress_bar} {progress:.1f}%"
            
            await self.message.edit_text(message_text)
            self.last_update = current_time
            
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ)
            logger.debug(f"Failed to update progress: {e}")
    
    def _create_progress_bar(self, progress: float, length: int = 10) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        filled = int(progress / 100 * length)
        empty = length - filled
        return "üü©" * filled + "‚¨ú" * empty
    
    async def finish_success(self, result_message: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å —É—Å–ø–µ—Ö–æ–º"""
        try:
            elapsed_time = int(time.time() - self.start_time)
            final_message = f"‚úÖ {self.operation_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            final_message += f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time}—Å\n\n"
            final_message += result_message
            
            await self.message.edit_text(final_message)
        except Exception as e:
            logger.error(f"Failed to finish progress with success: {e}")
    
    async def finish_error(self, error_message: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å –æ—à–∏–±–∫–æ–π"""
        try:
            elapsed_time = int(time.time() - self.start_time)
            final_message = f"‚ùå {self.operation_name} –Ω–µ —É–¥–∞–ª–∞—Å—å\n"
            final_message += f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time}—Å\n\n"
            final_message += error_message
            
            await self.message.edit_text(final_message)
        except Exception as e:
            logger.error(f"Failed to finish progress with error: {e}")


class DownloadProgressCallback:
    """Callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ yt-dlp"""
    
    def __init__(self, progress_tracker: ProgressTracker):
        self.tracker = progress_tracker
        self.last_update = 0
        
    def __call__(self, d: Dict[str, Any]):
        """Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è yt-dlp"""
        try:
            if d['status'] == 'downloading':
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                downloaded = d.get('downloaded_bytes', 0)
                total = d.get('total_bytes') or d.get('total_bytes_estimate', 0)
                
                if total > 0:
                    progress = (downloaded / total) * 100
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
                    downloaded_mb = downloaded / 1024 / 1024
                    total_mb = total / 1024 / 1024
                    
                    stage = f"–ó–∞–≥—Ä—É–∑–∫–∞: {downloaded_mb:.1f}MB / {total_mb:.1f}MB"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (—Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É)
                    asyncio.create_task(self.tracker.update_progress(stage, progress))
                    
            elif d['status'] == 'finished':
                filename = d.get('filename', '—Ñ–∞–π–ª')
                stage = f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {filename}"
                asyncio.create_task(self.tracker.update_progress(stage))
                
        except Exception as e:
            logger.debug(f"Progress callback error: {e}")


class VideoProcessingProgressTracker:
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
    
    STAGES = {
        'validation': '–ü—Ä–æ–≤–µ—Ä–∫–∞ URL',
        'extracting_info': '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ',
        'downloading': '–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ',
        'processing': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ',
        'compressing': '–°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ',
        'removing_watermark': '–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤',
        'uploading': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ',
        'extracting_audio': '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ'
    }
    
    def __init__(self, message: Message, platform: str):
        self.tracker = ProgressTracker(message, f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å {platform}")
        self.current_stage = None
        
    async def set_stage(self, stage_key: str, progress: Optional[float] = None):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞–¥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.current_stage = stage_key
        stage_name = self.STAGES.get(stage_key, stage_key)
        await self.tracker.update_progress(stage_name, progress)
    
    async def update_progress(self, progress: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏"""
        if self.current_stage:
            stage_name = self.STAGES.get(self.current_stage, self.current_stage)
            await self.tracker.update_progress(stage_name, progress)
    
    async def finish_success(self, platform: str, file_type: str, 
                           file_size: int, watermark_removed: bool = False):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å —É—Å–ø–µ—Ö–æ–º –∏ –∫—Ä–∞—Å–∏–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        from .download_config import ErrorMessages
        
        success_message = ErrorMessages.get_success_message(
            platform, file_type, file_size, watermark_removed
        )
        await self.tracker.finish_success(success_message)
    
    async def finish_error(self, platform: str, error_type: str, **kwargs):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        from .download_config import ErrorMessages
        
        error_message = ErrorMessages.get_error_message(platform, error_type, **kwargs)
        await self.tracker.finish_error(error_message)
    
    def get_progress_callback(self) -> DownloadProgressCallback:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç callback –¥–ª—è yt-dlp"""
        return DownloadProgressCallback(self.tracker)
