"""
–£–º–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä–µ
"""

import asyncio
import logging
import tempfile
import os
from pathlib import Path
from typing import Optional, Tuple
import config

logger = logging.getLogger(__name__)


async def compress_for_telegram(
    bot,
    file_id: str, 
    original_filename: str,
    progress_callback: Optional[callable] = None
) -> Tuple[Optional[Path], Optional[str]]:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∂–∏–º–∞—è –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    Args:
        bot: Telegram Bot instance
        file_id: ID —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è/—Å–∂–∞—Ç–∏—è
        original_filename: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        progress_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    
    Returns:
        Tuple[Path, str]: (–ø—É—Ç—å –∫ –≥–æ—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    try:
        # –° self-hosted API –º–æ–∂–µ–º —Å–∫–∞—á–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã –¥–æ 2GB
        file = await bot.get_file(file_id)
        file_size_mb = file.file_size / (1024 * 1024)
        
        temp_dir = tempfile.mkdtemp()
        temp_path = Path(temp_dir) / original_filename
        
        if progress_callback:
            await progress_callback("downloading", file_size_mb)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
        await file.download_to_drive(temp_path)
        
        logger.info(f"Downloaded file: {temp_path.name} ({file_size_mb:.1f}MB)")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        return temp_path, None
        
    except Exception as e:
        logger.error(f"Error in compress_for_telegram: {e}")
        return None, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"


async def compress_video_ffmpeg(
    input_path: Path,
    output_path: Path,
    target_size_mb: int = 18,
    progress_callback: Optional[callable] = None
) -> bool:
    """
    –°–∂–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é FFmpeg
    """
    try:
        if progress_callback:
            await progress_callback("compressing", target_size_mb)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        import ffmpeg
        
        probe = ffmpeg.probe(str(input_path))
        duration = float(probe['streams'][0]['duration'])
        current_size_mb = input_path.stat().st_size / (1024 * 1024)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç
        target_bitrate = int((target_size_mb * 8 * 1024) / duration * 0.9)  # 90% –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –¥–ª—è –∑–∞–ø–∞—Å–∞
        
        # –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ
        stream = ffmpeg.input(str(input_path))
        stream = ffmpeg.output(
            stream, 
            str(output_path),
            vcodec='libx264',
            video_bitrate=f'{target_bitrate}k',
            acodec='aac',
            audio_bitrate='128k',
            preset='medium',
            crf=28,  # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
            maxrate=f'{int(target_bitrate * 1.2)}k',
            bufsize=f'{int(target_bitrate * 2)}k'
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∂–∞—Ç–∏–µ
        process = await asyncio.create_subprocess_exec(
            *ffmpeg.compile(stream, overwrite_output=True),
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        await process.wait()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if output_path.exists():
            compressed_size_mb = output_path.stat().st_size / (1024 * 1024)
            logger.info(f"Video compressed: {current_size_mb:.1f}MB -> {compressed_size_mb:.1f}MB")
            return True
        
        return False
        
    except Exception as e:
        logger.error(f"Error compressing video: {e}")
        return False


async def compress_image_pillow(
    input_path: Path,
    output_path: Path,
    target_size_mb: int = 18,
    progress_callback: Optional[callable] = None
) -> bool:
    """
    –°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    """
    try:
        if progress_callback:
            await progress_callback("compressing_image", target_size_mb)
        
        from PIL import Image
        
        with Image.open(input_path) as img:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            quality = 95
            
            while quality > 20:
                img.save(output_path, 'JPEG', quality=quality, optimize=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
                size_mb = output_path.stat().st_size / (1024 * 1024)
                if size_mb <= target_size_mb:
                    logger.info(f"Image compressed to {size_mb:.1f}MB with quality {quality}")
                    return True
                
                quality -= 10
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –±–æ–ª—å—à–æ–µ, —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            width, height = img.size
            scale_factor = 0.8
            
            while scale_factor > 0.3:
                new_width = int(width * scale_factor)
                new_height = int(height * scale_factor)
                
                resized_img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
                resized_img.save(output_path, 'JPEG', quality=85, optimize=True)
                
                size_mb = output_path.stat().st_size / (1024 * 1024)
                if size_mb <= target_size_mb:
                    logger.info(f"Image resized and compressed to {size_mb:.1f}MB")
                    return True
                
                scale_factor -= 0.1
            
            return output_path.exists()
        
    except Exception as e:
        logger.error(f"Error compressing image: {e}")
        return False


async def try_alternative_approach(
    file_size: int,
    progress_callback: Optional[callable] = None
) -> Tuple[Optional[str], Optional[str]]:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    
    Returns:
        Tuple[suggestion, error]: (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ—à–∏–±–∫–∞)
    """
    file_size_mb = file_size / (1024 * 1024)
    
    if progress_callback:
        await progress_callback("analyzing", file_size_mb)
    
    if file_size_mb > 100:
        suggestion = (
            f"üìÅ **–§–∞–π–ª –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π ({file_size_mb:.1f}–ú–ë)**\n\n"
            f"üîß **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å —Å–∂–∞—Ç–∏—è\n"
            f"‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ <20–ú–ë\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n"
            f"üí° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {config.MAX_FILE_SIZE / (1024*1024):.0f}–ú–ë"
        )
        return suggestion, "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π"
    
    # –î–ª—è —Ñ–∞–π–ª–æ–≤ 20-100–ú–ë
    suggestion = (
        f"‚ö†Ô∏è **–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª ({file_size_mb:.1f}–ú–ë)**\n\n"
        f"ü§ñ Telegram Bot API –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ 20–ú–ë\n\n"
        f"üîß **–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
        f"‚Ä¢ –°–æ–∂–º–∏—Ç–µ —Ñ–∞–π–ª –¥–æ 20–ú–ë –≤ –ª—é–±–æ–º –≤–∏–¥–µ–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä–µ\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–Ω–ª–∞–π–Ω-–∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä—ã\n"
        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á–∞—Å—Ç—è–º–∏\n\n"
        f"üí° –ü–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–Ω–æ–≤–∞"
    )
    return suggestion, None


def estimate_compression_ratio(file_extension: str) -> float:
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—É—é —Å—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
    """
    video_extensions = {'.mp4': 0.3, '.avi': 0.2, '.mov': 0.35, '.mkv': 0.25}
    image_extensions = {'.jpg': 0.8, '.png': 0.4, '.bmp': 0.1}
    
    return video_extensions.get(file_extension.lower(), 0.3)


async def suggest_compression_settings(file_size: int, file_extension: str) -> str:
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∂–∞—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    file_size_mb = file_size / (1024 * 1024)
    target_size_mb = 18  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
    
    compression_ratio = estimate_compression_ratio(file_extension)
    estimated_result = file_size_mb * compression_ratio
    
    if file_extension.lower() in ['.mp4', '.avi', '.mov', '.mkv']:
        if estimated_result > target_size_mb:
            # –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —Å–∂–∞—Ç–∏—è
            return (
                f"üé¨ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ —Å–∂–∞—Ç–∏—è:**\n\n"
                f"üìä –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {file_size_mb:.1f}–ú–ë\n"
                f"üéØ –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä: ‚â§{target_size_mb}–ú–ë\n\n"
                f"‚öôÔ∏è **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
                f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 720p –∏–ª–∏ –º–µ–Ω—å—à–µ\n"
                f"‚Ä¢ –ë–∏—Ç—Ä–µ–π—Ç: 1000-1500 kbps\n"
                f"‚Ä¢ –ö–æ–¥–µ–∫: H.264\n"
                f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤: 24-30 fps"
            )
        else:
            return f"‚úÖ –ü–æ—Å–ª–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è —Ä–∞–∑–º–µ—Ä –±—É–¥–µ—Ç ~{estimated_result:.1f}–ú–ë"
    
    elif file_extension.lower() in ['.jpg', '.png', '.bmp']:
        return (
            f"üñº **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n\n"
            f"üìä –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {file_size_mb:.1f}–ú–ë\n"
            f"üéØ –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä: ‚â§{target_size_mb}–ú–ë\n\n"
            f"‚öôÔ∏è **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ JPEG: 80-90%\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä: –¥–æ 1920x1080\n"
            f"‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG –¥–ª—è —Ñ–æ—Ç–æ, PNG –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∏"
        )
    
    return f"üìÅ –°–æ–∂–º–∏—Ç–µ —Ñ–∞–π–ª —Å {file_size_mb:.1f}–ú–ë –¥–æ {target_size_mb}–ú–ë"
