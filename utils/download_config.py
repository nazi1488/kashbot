"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –≤–∏–¥–µ–æ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

from dataclasses import dataclass
from typing import Dict, List, Optional
import os


@dataclass
class DownloadConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –≤–∏–¥–µ–æ"""
    
    # –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    max_file_size: int = int(os.getenv("MAX_FILE_SIZE", 50 * 1024 * 1024))  # –ß–∏—Ç–∞–µ—Ç—Å—è –∏–∑ .env
    max_video_size: int = 100 * 1024 * 1024  # 100MB –¥–ª—è premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    max_audio_size: int = 25 * 1024 * 1024  # 25MB –¥–ª—è –∞—É–¥–∏–æ
    
    # –ö–∞—á–µ—Å—Ç–≤–æ
    video_quality: str = "best[height<=1080]"
    audio_quality: str = "192"
    compression_crf: int = 23  # 18-28, —á–µ–º –≤—ã—à–µ - —Ç–µ–º –±–æ–ª—å—à–µ —Å–∂–∞—Ç–∏–µ
    
    # –¢–∞–π–º–∞—É—Ç—ã
    socket_timeout: int = 30
    retries: int = 3
    max_download_time: int = 300  # 5 –º–∏–Ω—É—Ç
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    supported_video_formats: List[str] = None
    supported_audio_formats: List[str] = None
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º
    platform_settings: Dict[str, Dict] = None
    
    def __post_init__(self):
        if self.supported_video_formats is None:
            self.supported_video_formats = ['.mp4', '.webm', '.mkv', '.avi', '.mov']
        
        if self.supported_audio_formats is None:
            self.supported_audio_formats = ['.mp3', '.m4a', '.ogg']
        
        if self.platform_settings is None:
            self.platform_settings = {
                'tiktok': {
                    'format': 'best[ext=mp4]/best',
                    'http_chunk_size': 10485760,  # 10MB chunks
                    'user_agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15'
                },
                'youtube': {
                    'format': 'best[height<=1080][ext=mp4]/best[height<=1080]/best',
                    'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                },
                'instagram': {
                    'format': 'best',
                    'user_agent': 'Instagram 219.0.0.12.117 Android (29/10; 420dpi; 1080x2137; samsung; SM-G973F; beyond2; qcom; en_US; 301484394)',
                    'headers': {
                        'Referer': 'https://www.instagram.com/',
                        'Origin': 'https://www.instagram.com',
                        'X-IG-App-ID': '936619743392459',
                        'X-IG-WWW-Claim': '0'
                    }
                }
            }
    
    @classmethod
    def for_user(cls, user_id: int, is_premium: bool = False) -> 'DownloadConfig':
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            is_premium: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º
        """
        config = cls()
        
        if is_premium:
            config.max_file_size = config.max_video_size
            config.video_quality = "best[height<=1440]"  # 1440p –¥–ª—è premium
            config.audio_quality = "320"  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ
            config.compression_crf = 20  # –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è
        
        return config
    
    @classmethod
    def from_env(cls) -> 'DownloadConfig':
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        config = cls()
        
        # –ß–∏—Ç–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if max_size := os.getenv('MAX_FILE_SIZE'):
            config.max_file_size = int(max_size)
        
        if video_quality := os.getenv('VIDEO_QUALITY'):
            config.video_quality = video_quality
        
        if audio_quality := os.getenv('AUDIO_QUALITY'):
            config.audio_quality = audio_quality
        
        if socket_timeout := os.getenv('SOCKET_TIMEOUT'):
            config.socket_timeout = int(socket_timeout)
        
        return config


class ErrorMessages:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö"""
    
    PLATFORM_MESSAGES = {
        'tiktok': {
            'private': "–≠—Ç–æ –≤–∏–¥–µ–æ TikTok –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –ø—É–±–ª–∏—á–Ω—ã–º.",
            'age_restricted': "–í–∏–¥–µ–æ TikTok –∏–º–µ–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.",
            'not_found': "–í–∏–¥–µ–æ TikTok –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.",
            'geo_blocked': "–≠—Ç–æ –≤–∏–¥–µ–æ TikTok –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ."
        },
        'youtube': {
            'private': "–≠—Ç–æ –≤–∏–¥–µ–æ YouTube –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ.",
            'age_restricted': "–í–∏–¥–µ–æ YouTube –∏–º–µ–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç YouTube –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
            'not_found': "–í–∏–¥–µ–æ YouTube –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ.",
            'geo_blocked': "–≠—Ç–æ –≤–∏–¥–µ–æ YouTube –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.",
            'copyright': "–í–∏–¥–µ–æ YouTube –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∞–≤—Ç–æ—Ä—Å–∫–∏–º –ø—Ä–∞–≤–∞–º."
        },
        'instagram': {
            'private': "–≠—Ç–æ—Ç –ø–æ—Å—Ç Instagram –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.",
            'not_found': "–ü–æ—Å—Ç Instagram –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            'login_required': "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Instagram —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è."
        }
    }
    
    GENERAL_MESSAGES = {
        'network_error': "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        'server_error': "–°–µ—Ä–≤–µ—Ä –≤–∏–¥–µ–æ–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        'file_too_large': "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size}MB.",
        'invalid_format': "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.",
        'download_timeout': "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ.",
        'processing_error': "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ.",
        'compression_failed': "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –≤–∏–¥–µ–æ –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
    }
    
    @classmethod
    def get_error_message(cls, platform: str, error_type: str, **kwargs) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        
        Args:
            platform: –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (tiktok, youtube, instagram)
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if platform in cls.PLATFORM_MESSAGES:
            platform_msgs = cls.PLATFORM_MESSAGES[platform]
            if error_type in platform_msgs:
                return platform_msgs[error_type].format(**kwargs)
        
        if error_type in cls.GENERAL_MESSAGES:
            return cls.GENERAL_MESSAGES[error_type].format(**kwargs)
        
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ."
    
    @classmethod
    def get_success_message(cls, platform: str, file_type: str, file_size: int, 
                          watermark_removed: bool = False) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ"""
        size_mb = file_size / 1024 / 1024
        
        platform_names = {
            'tiktok': 'TikTok',
            'youtube': 'YouTube',
            'instagram': 'Instagram'
        }
        
        platform_name = platform_names.get(platform, platform)
        file_type_name = "–≤–∏–¥–µ–æ" if file_type == "video" else "–∞—É–¥–∏–æ"
        
        message = f"‚úÖ {file_type_name.capitalize()} —Å {platform_name} –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
        message += f"\nüìÅ –†–∞–∑–º–µ—Ä: {size_mb:.1f} MB"
        
        if watermark_removed:
            message += "\nüé® –í–æ–¥—è–Ω—ã–µ –∑–Ω–∞–∫–∏ —É–¥–∞–ª–µ–Ω—ã"
        
        return message
