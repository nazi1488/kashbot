#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç Gmail-–∞–ª–∏–∞—Å–æ–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os
from datetime import datetime, date

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.gmail_aliases import generate_gmail_aliases, validate_gmail_input
from database import Database
import config


async def test_gmail_aliases_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç Gmail-–∞–ª–∏–∞—Å–æ–≤"""
    
    print("üß™ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GMAIL-–ê–õ–ò–ê–°–û–í")
    print("=" * 60)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Database(config.DATABASE_URL)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        test_user_id = 999999999
        
        print(f"\nüìä –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–æ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        initial_usage = await db.get_gmail_usage_today(test_user_id)
        initial_quota = await db.get_gmail_remaining_quota(test_user_id)
        
        print(f"   üìà –ù–∞—á–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {initial_usage}")
        print(f"   ‚ö° –ù–∞—á–∞–ª—å–Ω–∞—è –∫–≤–æ—Ç–∞: {initial_quota}")
        
        # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–∞—è –∫–≤–æ—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        expected_quota = 10 - initial_usage
        assert initial_quota == expected_quota, f"–û–∂–∏–¥–∞–ª–∞—Å—å –∫–≤–æ—Ç–∞ {expected_quota}, –ø–æ–ª—É—á–µ–Ω–∞ {initial_quota}"
        
        print(f"\nüé≤ –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–∏–∞—Å–æ–≤")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–ª–∏–∞—Å—ã
        test_email = "john.doe@gmail.com"
        count_to_generate = min(3, initial_quota)
        
        if count_to_generate > 0:
            aliases = generate_gmail_aliases(test_email, count_to_generate)
            
            print(f"   üìß –¢–µ—Å—Ç–æ–≤—ã–π email: {test_email}")
            print(f"   üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–ª–∏–∞—Å–æ–≤: {len(aliases)}")
            print(f"   üìã –ê–ª–∏–∞—Å—ã:")
            for i, alias in enumerate(aliases, 1):
                print(f"      {i}. {alias}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∞–ª–∏–∞—Å–æ–≤
            assert len(aliases) == count_to_generate
            assert len(set(aliases)) == count_to_generate  # –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
            
            # –í—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ Gmail –¥–æ–º–µ–Ω–µ
            for alias in aliases:
                assert alias.endswith("@gmail.com")
            
            print(f"   ‚úÖ –ê–ª–∏–∞—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            
            print(f"\nüìä –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–≤–æ—Ç –≤ –ë–î")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–≤–æ—Ç—É
            success = await db.increment_gmail_usage(test_user_id, count_to_generate)
            assert success, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–≤–æ—Ç—É"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–≤–æ—Ç—ã
            new_usage = await db.get_gmail_usage_today(test_user_id)
            new_quota = await db.get_gmail_remaining_quota(test_user_id)
            
            print(f"   üìà –ù–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {new_usage}")
            print(f"   ‚ö° –ù–æ–≤–∞—è –∫–≤–æ—Ç–∞: {new_quota}")
            
            expected_new_usage = initial_usage + count_to_generate
            expected_new_quota = 10 - expected_new_usage
            
            assert new_usage == expected_new_usage, f"–û–∂–∏–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {expected_new_usage}, –ø–æ–ª—É—á–µ–Ω–æ {new_usage}"
            assert new_quota == expected_new_quota, f"–û–∂–∏–¥–∞–ª–∞—Å—å –∫–≤–æ—Ç–∞ {expected_new_quota}, –ø–æ–ª—É—á–µ–Ω–∞ {new_quota}"
            
            print(f"   ‚úÖ –ö–≤–æ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            print(f"   ‚ö†Ô∏è –ö–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
        
        print(f"\nüîç –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö email")
        
        test_cases = [
            ("valid@gmail.com", True, True),
            ("test@googlemail.com", True, True), 
            ("user@yahoo.com", True, False),
            ("invalid-email", False, False),
            ("@gmail.com", False, False),
            ("user@", False, False)
        ]
        
        for email, should_be_valid, should_be_gmail in test_cases:
            is_valid, error, is_gmail = validate_gmail_input(email)
            
            print(f"   üìß {email:<20} ‚Üí {'‚úÖ' if is_valid else '‚ùå'} –≤–∞–ª–∏–¥, {'üìß' if is_gmail else 'üìÑ'} Gmail")
            
            assert is_valid == should_be_valid, f"–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è {email}"
            if is_valid:
                assert is_gmail == should_be_gmail, f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Gmail –¥–ª—è {email}"
        
        print(f"\nüìã –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        today = date.today()
        query = "SELECT * FROM gmail_alias_usage WHERE user_id = %s AND usage_date = %s"
        result = await db.execute(query, (test_user_id, today), fetch=True)
        
        if result:
            usage_record = result[0]
            print(f"   üóÑÔ∏è –ó–∞–ø–∏—Å—å –≤ –ë–î –Ω–∞–π–¥–µ–Ω–∞:")
            print(f"      üìä ID: {usage_record['id']}")
            print(f"      üë§ User ID: {usage_record['user_id']}")
            print(f"      üìÖ –î–∞—Ç–∞: {usage_record['usage_date']}")
            print(f"      üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {usage_record['count']}")
            
            assert usage_record['user_id'] == test_user_id
            assert usage_record['usage_date'] == today
            assert usage_record['count'] >= 0
        else:
            print(f"   ‚ÑπÔ∏è –ó–∞–ø–∏—Å–∏ –≤ –ë–î –Ω–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∞–ª–∏–∞—Å—ã)")
        
        print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        cleanup_query = "DELETE FROM gmail_alias_usage WHERE user_id = %s"
        await db.execute(cleanup_query, (test_user_id,))
        print(f"   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
        
        print(f"\nüéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_quota_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å –∫–≤–æ—Ç–∞–º–∏"""
    
    print(f"\n" + "=" * 60)
    print(f"üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í –ö–í–û–¢")
    print("=" * 60)
    
    try:
        db = Database(config.DATABASE_URL)
        test_user_id = 888888888
        
        print(f"\nüìä –¢–µ—Å—Ç: –ò—Å—á–µ—Ä–ø–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π –∫–≤–æ—Ç—ã")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∫–≤–æ—Ç—É
        today = date.today()
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –∏—Å—á–µ—Ä–ø–∞–Ω–Ω–æ–π –∫–≤–æ—Ç–æ–π
        insert_query = """
            INSERT INTO gmail_alias_usage (user_id, usage_date, count)
            VALUES (%s, %s, %s)
            ON CONFLICT (user_id, usage_date) 
            DO UPDATE SET count = EXCLUDED.count
        """
        await db.execute(insert_query, (test_user_id, today, 10))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞
        remaining = await db.get_gmail_remaining_quota(test_user_id)
        print(f"   ‚ö° –û—Å—Ç–∞–≤—à–∞—è—Å—è –∫–≤–æ—Ç–∞: {remaining}")
        assert remaining == 0, f"–û–∂–∏–¥–∞–ª–∞—Å—å –∫–≤–æ—Ç–∞ 0, –ø–æ–ª—É—á–µ–Ω–∞ {remaining}"
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
        success = await db.increment_gmail_usage(test_user_id, 1)
        assert success, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–∏–ª—Å—è (–Ω–æ –∫–≤–æ—Ç–∞ —Å—Ç–∞–ª–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π)
        usage = await db.get_gmail_usage_today(test_user_id)
        remaining = await db.get_gmail_remaining_quota(test_user_id)
        
        print(f"   üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {usage}")
        print(f"   ‚ö° –ö–≤–æ—Ç–∞: {remaining}")
        
        assert usage == 11, f"–û–∂–∏–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 11, –ø–æ–ª—É—á–µ–Ω–æ {usage}"
        assert remaining == 0, f"–ö–≤–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è 0 (–Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π)"
        
        # –û—á–∏—Å—Ç–∫–∞
        await db.execute("DELETE FROM gmail_alias_usage WHERE user_id = %s", (test_user_id,))
        
        print(f"\nüéâ –ì–†–ê–ù–ò–ß–ù–´–ï –°–õ–£–ß–ê–ò –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö: {e}")
        return False


async def demo_generation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª–∏–∞—Å–æ–≤"""
    
    print(f"\n" + "=" * 60)
    print(f"üé≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ê–õ–ò–ê–°–û–í")
    print("=" * 60)
    
    try:
        demo_emails = [
            "john.doe@gmail.com",
            "simple@googlemail.com", 
            "user123@gmail.com",
            "test.email+tag@gmail.com"
        ]
        
        for email in demo_emails:
            print(f"\nüìß –ò—Å—Ö–æ–¥–Ω—ã–π email: {email}")
            
            aliases = generate_gmail_aliases(email, 5)
            
            print(f"   üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–ª–∏–∞—Å—ã:")
            for i, alias in enumerate(aliases, 1):
                print(f"      {i}. {alias}")
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
            plus_aliases = [a for a in aliases if '+' in a]
            dot_aliases = [a for a in aliases if '+' not in a]
            
            print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"      +tag –∞–ª–∏–∞—Å—ã: {len(plus_aliases)}")
            print(f"      dot –∞–ª–∏–∞—Å—ã: {len(dot_aliases)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("üìß Gmail-–∞–ª–∏–∞—Å—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä")
    
    tests = [
        ("–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç", test_gmail_aliases_integration),
        ("–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∫–≤–æ—Ç", test_quota_edge_cases),
        ("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", demo_generation)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            result = await test_func()
            results.append((test_name, result))
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {status}")
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {test_name}")
    
    print(f"\nüìà –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    success_rate = (passed / total) * 100 if total > 0 else 0
    print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    if passed == total:
        print(f"\nüéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print(f"‚úÖ Gmail-–∞–ª–∏–∞—Å—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print(f"üîê –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∫–≤–æ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print(f"üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ {total - passed} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    return passed == total


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
