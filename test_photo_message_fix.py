#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ "There is no text in the message to edit"

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É callback'–æ–≤ –Ω–∞ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è—Ö
"""

import asyncio
import sys
from pathlib import Path
from unittest.mock import Mock, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from features.random_face.handlers import RandomFaceHandlers
from infra.redis import redis_manager


class MockPhotoMessage:
    """–ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"""
    
    def __init__(self, chat_id: int = 12345):
        self.chat_id = chat_id
        self.text = None  # –§–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–º–µ–µ—Ç text
        self.photo = [Mock()]  # –ï—Å—Ç—å —Ñ–æ—Ç–æ
        self.reply_text = AsyncMock()
        self.delete = AsyncMock()


class MockTextMessage:
    """–ú–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    def __init__(self, chat_id: int = 12345):
        self.chat_id = chat_id
        self.text = "Random Face Generator menu text"  # –ï—Å—Ç—å —Ç–µ–∫—Å—Ç
        self.reply_text = AsyncMock()
        self.delete = AsyncMock()


class MockCallbackQuery:
    """–ú–æ–∫ callback query"""
    
    def __init__(self, user_id: int = 12345, message_type: str = "text"):
        self.from_user = Mock()
        self.from_user.id = user_id
        
        if message_type == "text":
            self.message = MockTextMessage(user_id)
        else:
            self.message = MockPhotoMessage(user_id)
            
        self.answer = AsyncMock()
        self.edit_message_text = AsyncMock()
        self.delete_message = AsyncMock()


class MockUpdate:
    """–ú–æ–∫ Update"""
    
    def __init__(self, user_id: int = 12345, message_type: str = "text"):
        self.callback_query = MockCallbackQuery(user_id, message_type)


class MockContext:
    """–ú–æ–∫ Context"""
    
    def __init__(self):
        self.bot = Mock()
        self.bot.send_photo = AsyncMock()
        self.bot_data = {'FACE_QUOTA_PER_DAY': 10}
        self.user_data = {}


async def test_text_message_scenario():
    """–¢–µ—Å—Ç —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    
    print("üìù –¢–µ—Å—Ç 1: Callback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
    
    try:
        redis_client = await redis_manager.initialize()
        handlers = RandomFaceHandlers(redis_client)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        update = MockUpdate(user_id=11111, message_type="text")
        context = MockContext()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        await handlers.generate_random_face(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ edit_message_text –±—ã–ª –≤—ã–∑–≤–∞–Ω (–¥–ª—è loading)
        update.callback_query.edit_message_text.assert_called()
        print("   ‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        context.bot.send_photo.assert_called_once()
        print("   ‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        update.callback_query.delete_message.assert_called()
        print("   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —É–¥–∞–ª–µ–Ω–æ")
        
        await redis_manager.close()
        print("   ‚úÖ –¢–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω\n")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}\n")


async def test_photo_message_scenario():
    """–¢–µ—Å—Ç —Å —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥—Ñ–∏–∫—Å–∞)"""
    
    print("üì∑ –¢–µ—Å—Ç 2: Callback –Ω–∞ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–∏ (–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è '–ï—â—ë –æ–¥–Ω–æ')")
    
    try:
        redis_client = await redis_manager.initialize()
        handlers = RandomFaceHandlers(redis_client)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è
        update = MockUpdate(user_id=22222, message_type="photo")
        context = MockContext()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (–∏–º–∏—Ç–∏—Ä—É—è –Ω–∞–∂–∞—Ç–∏–µ "–ï—â—ë –æ–¥–Ω–æ")
        await handlers.generate_random_face(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ edit_message_text –ù–ï –±—ã–ª –≤—ã–∑–≤–∞–Ω
        update.callback_query.edit_message_text.assert_not_called()
        print("   ‚úÖ edit_message_text –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–ª—Å—è –¥–ª—è —Ñ–æ—Ç–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ reply_text –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è loading
        update.callback_query.message.reply_text.assert_called()
        print("   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ reply_text")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        context.bot.send_photo.assert_called_once()
        print("   ‚úÖ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ loading message –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ
        assert 'loading_message' not in context.user_data  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—á–∏—â–µ–Ω–æ
        print("   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—á–∏—â–µ–Ω–æ")
        
        await redis_manager.close()
        print("   ‚úÖ –¢–µ—Å—Ç —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω\n")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}\n")


async def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    print("‚ö†Ô∏è –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    
    try:
        redis_client = await redis_manager.initialize()
        handlers = RandomFaceHandlers(redis_client)
        
        # –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—à–∏–±–∫–∏
        original_service = handlers.service
        mock_service = Mock()
        mock_service.fetch_face_image = AsyncMock(
            return_value=(None, "–õ–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –î–æ—Å—Ç—É–ø —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞.")
        )
        handlers.service = mock_service
        
        # –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        update_text = MockUpdate(user_id=33333, message_type="text")
        context_text = MockContext()
        
        await handlers.generate_random_face(update_text, context_text)
        update_text.callback_query.edit_message_text.assert_called()
        print("   ‚úÖ –û—à–∏–±–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        
        # –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–∏
        update_photo = MockUpdate(user_id=44444, message_type="photo")
        context_photo = MockContext()
        
        await handlers.generate_random_face(update_photo, context_photo)
        update_photo.callback_query.message.reply_text.assert_called()
        print("   ‚úÖ –û—à–∏–±–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        handlers.service = original_service
        
        await redis_manager.close()
        print("   ‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–æ–π–¥–µ–Ω\n")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}\n")


if __name__ == "__main__":
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ 'There is no text in the message to edit'")
    print("=" * 70)
    
    asyncio.run(test_text_message_scenario())
    asyncio.run(test_photo_message_scenario())
    asyncio.run(test_error_handling())
    
    print("=" * 70)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–≥—Ñ–∏–∫—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\n–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç:")
    print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å callback'–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
    print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å callback'–∏ –Ω–∞ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è—Ö") 
    print("‚úÖ –ò–∑–±–µ–≥–∞—Ç—å –æ—à–∏–±–∫–∏ 'There is no text in the message to edit'")
    print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏")
