#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∂–∞—Ç–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
"""

import asyncio
import tempfile
import os
from pathlib import Path
from unittest.mock import AsyncMock, MagicMock, patch
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/benutzer/Desktop/–∫–µ—à/bot')

from handlers.uniqizer import process_media_file
from telegram import Update, Message, User, Chat, Document, Video
from telegram.ext import ContextTypes


async def test_large_document_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (>20MB)"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ–ª—å—à–æ–π –¥–æ–∫—É–º–µ–Ω—Ç (50–ú–ë)...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
    mock_user = User(id=12345, first_name="Test", is_bot=False)
    mock_chat = Chat(id=12345, type="private")
    mock_message = Message(message_id=1, date=None, chat=mock_chat, from_user=mock_user)
    
    # –ú–æ–∫ Update –∏ Context
    mock_update = MagicMock()
    mock_update.message = mock_message
    mock_update.effective_user = mock_user
    
    mock_context = MagicMock()
    mock_context.user_data = {'copies_count': 2}
    mock_context.bot = AsyncMock()
    
    # –ë–æ–ª—å—à–æ–π –¥–æ–∫—É–º–µ–Ω—Ç 50MB
    mock_document = MagicMock()
    mock_document.file_id = "large_doc_50mb"
    mock_document.file_size = 50 * 1024 * 1024
    mock_document.file_name = "large_video.mp4"
    
    # –ú–æ–∫ processing_msg
    mock_processing_msg = AsyncMock()
    mock_processing_msg.edit_text = AsyncMock()
    mock_processing_msg.delete = AsyncMock()
    mock_message.reply_text = AsyncMock(return_value=mock_processing_msg)
    mock_message.reply_document = AsyncMock()
    
    # –ú–æ–∫–∞–µ–º compress_for_telegram –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    with patch('handlers.uniqizer.compress_for_telegram') as mock_compress:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∂–∞—Ç–∏—è
        with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp_file:
            test_data = b"compressed video data" * 100000  # ~1.5MB —Å–∂–∞—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            temp_file.write(test_data)
            temp_file_path = Path(temp_file.name)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        mock_compress.return_value = (temp_file_path, None)
        
        # –ú–æ–∫–∞–µ–º create_multiple_unique_videos
        with patch('utils.create_multiple_unique_videos') as mock_create_videos:
            async def mock_video_creation(input_path, output_dir, count, params, callback):
                output_path = Path(output_dir)
                results = []
                for i in range(count):
                    result_file = output_path / f"unique_video_{i+1}.mp4"
                    result_file.write_bytes(b"unique video data")
                    results.append(str(result_file))
                return results
            
            mock_create_videos.side_effect = mock_video_creation
            
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                result = await process_media_file(
                    update=mock_update,
                    context=mock_context,
                    file_obj=mock_document,
                    file_name="large_video.mp4",
                    processing_msg=mock_processing_msg,
                    is_compressed=False
                )
                
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
                print(f"- –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫: {'–î–∞' if result is not None else '–ù–µ—Ç'}")
                print(f"- compress_for_telegram –≤—ã–∑–≤–∞–Ω: {'–î–∞' if mock_compress.called else '–ù–µ—Ç'}")
                print(f"- create_multiple_unique_videos –≤—ã–∑–≤–∞–Ω: {'–î–∞' if mock_create_videos.called else '–ù–µ—Ç'}")
                print(f"- reply_document –≤—ã–∑–≤–∞–Ω: {'–î–∞' if mock_message.reply_document.called else '–ù–µ—Ç'}")
                
                if mock_message.reply_document.called:
                    print("‚úÖ –£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
                    return True
                else:
                    print("‚ùå –ü–†–û–í–ê–õ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    return False
                    
            finally:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if temp_file_path.exists():
                    temp_file_path.unlink()


async def test_compressed_video_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ Telegram)"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ –æ—Ç Telegram...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
    mock_user = User(id=12345, first_name="Test", is_bot=False)
    mock_chat = Chat(id=12345, type="private")
    mock_message = Message(message_id=1, date=None, chat=mock_chat, from_user=mock_user)
    
    mock_update = MagicMock()
    mock_update.message = mock_message
    mock_update.effective_user = mock_user
    
    mock_context = MagicMock()
    mock_context.user_data = {'copies_count': 3}
    mock_context.bot = AsyncMock()
    
    # –°–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ –æ—Ç Telegram (–æ–±—ã—á–Ω–æ <20MB)
    mock_video = MagicMock()
    mock_video.file_id = "compressed_video_tg"
    mock_video.file_size = 15 * 1024 * 1024  # 15MB –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è Telegram
    
    mock_processing_msg = AsyncMock()
    mock_processing_msg.edit_text = AsyncMock()
    mock_processing_msg.delete = AsyncMock()
    mock_message.reply_document = AsyncMock()
    
    # –ú–æ–∫–∞–µ–º compress_for_telegram –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    with patch('handlers.uniqizer.compress_for_telegram') as mock_compress:
        with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp_file:
            test_data = b"telegram compressed video" * 50000
            temp_file.write(test_data)
            temp_file_path = Path(temp_file.name)
        
        mock_compress.return_value = (temp_file_path, None)
        
        with patch('utils.create_multiple_unique_videos') as mock_create_videos:
            async def mock_video_creation(input_path, output_dir, count, params, callback):
                output_path = Path(output_dir)
                results = []
                for i in range(count):
                    result_file = output_path / f"unique_video_{i+1}.mp4"  
                    result_file.write_bytes(b"unique compressed video")
                    results.append(str(result_file))
                return results
            
            mock_create_videos.side_effect = mock_video_creation
            
            try:
                result = await process_media_file(
                    update=mock_update,
                    context=mock_context,
                    file_obj=mock_video,
                    file_name="video_12345_1.mp4",
                    processing_msg=mock_processing_msg,
                    is_compressed=True
                )
                
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∂–∞—Ç–æ–≥–æ –≤–∏–¥–µ–æ:")
                print(f"- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {'–î–∞' if result is not None else '–ù–µ—Ç'}")
                print(f"- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Ñ–∞–π–ª—ã: {'–î–∞' if mock_message.reply_document.called else '–ù–µ—Ç'}")
                
                if mock_message.reply_document.called:
                    print("‚úÖ –£–°–ü–ï–•: –°–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!")
                    return True
                else:
                    print("‚ùå –ü–†–û–í–ê–õ: –°–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                    return False
                    
            finally:
                if temp_file_path.exists():
                    temp_file_path.unlink()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n")
    print("=" * 70)
    
    try:
        # –¢–µ—Å—Ç 1: –ë–æ–ª—å—à–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–∂–∞—Ç–∏–µ–º
        test1_success = await test_large_document_processing()
        
        # –¢–µ—Å—Ç 2: –°–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ –æ—Ç Telegram  
        test2_success = await test_compressed_video_processing()
        
        print("\n" + "=" * 70)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"- –ë–æ–ª—å—à–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {'‚úÖ –û–ë–†–ê–ë–ê–¢–´–í–ê–Æ–¢–°–Ø' if test1_success else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        print(f"- –°–∂–∞—Ç—ã–µ –≤–∏–¥–µ–æ: {'‚úÖ –û–ë–†–ê–ë–ê–¢–´–í–ê–Æ–¢–°–Ø' if test2_success else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        
        if test1_success and test2_success:
            print("\nüéâ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê –ü–û–õ–ù–û–°–¢–¨–Æ!")
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –í–°–ï–ì–î–ê –ø–æ–ª—É—á–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("‚úÖ –ù–∏–∫–∞–∫–∏—Ö –æ—Ç–∫–∞–∑–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
            print("‚úÖ –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        else:
            print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ï –†–ï–®–ï–ù–ê")
            print("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—Å–µ –µ—â–µ –º–æ–≥—É—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
