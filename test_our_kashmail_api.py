#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–∞—à–µ–≥–æ KashMail API –∫–ª–∏–µ–Ω—Ç–∞
"""

import asyncio
import logging
from services.kashmail_api import MailTmApi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_our_api():
    """–¢–µ—Å—Ç –Ω–∞—à–µ–≥–æ API –∫–ª–∏–µ–Ω—Ç–∞"""
    logger.info("üß™ Testing our KashMail API client...")
    
    api = MailTmApi(timeout_seconds=10)
    
    try:
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤
        logger.info("Testing get_domains()...")
        domains = await api.get_domains()
        
        if domains:
            logger.info(f"‚úÖ Successfully got domains: {domains}")
            
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
            logger.info("Testing create_account()...")
            result = await api.create_account(domains[0])
            
            if result:
                email, password, account_id = result
                logger.info(f"‚úÖ Successfully created account: {email}")
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å JWT
                logger.info("Testing get_jwt_token()...")
                jwt = await api.get_jwt_token(email, password)
                
                if jwt:
                    logger.info(f"‚úÖ Successfully got JWT token")
                    
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                    logger.info("Testing get_messages()...")
                    messages = await api.get_messages(jwt)
                    
                    if messages is not None:
                        logger.info(f"‚úÖ Successfully got messages: {len(messages)} messages")
                    else:
                        logger.error("‚ùå Failed to get messages")
                else:
                    logger.error("‚ùå Failed to get JWT token")
            else:
                logger.error("‚ùå Failed to create account")
        else:
            logger.error("‚ùå Failed to get domains")
            
    except Exception as e:
        logger.error(f"‚ùå Exception during test: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await api.close()
        logger.info("üîÑ API client closed")

if __name__ == "__main__":
    asyncio.run(test_our_api())
