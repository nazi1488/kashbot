#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–∂–∞—Ç–∏–µ–º
"""

import asyncio
import tempfile
import os
from pathlib import Path
from unittest.mock import AsyncMock, MagicMock
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/benutzer/Desktop/–∫–µ—à/bot')

from handlers.uniqizer import process_media_file
from telegram import Update, Message, User, Chat, Document
from telegram.ext import ContextTypes


async def test_uniqizer_with_large_file():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –±–æ–ª—å—à–∏–º —Ñ–∞–π–ª–æ–º"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –±–æ–ª—å—à–∏–º —Ñ–∞–π–ª–æ–º...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã Telegram
    mock_user = User(id=12345, first_name="Test", is_bot=False)
    mock_chat = Chat(id=12345, type="private")
    mock_message = Message(
        message_id=1,
        date=None,
        chat=mock_chat,
        from_user=mock_user
    )
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ Update
    mock_update = MagicMock()
    mock_update.message = mock_message
    mock_update.effective_user = mock_user
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ Context
    mock_context = MagicMock()
    mock_context.user_data = {'copies_count': 2}
    mock_context.bot = AsyncMock()
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Ñ–∞–π–ª–∞ (–±–æ–ª—å—à–æ–π –¥–æ–∫—É–º–µ–Ω—Ç 50MB)
    mock_document = MagicMOck()
    mock_document.file_id = "large_file_id"
    mock_document.file_size = 50 * 1024 * 1024  # 50MB
    mock_document.file_name = "large_video.mp4"
    
    # –ú–æ–∫–∞–µ–º bot.get_file
    mock_file = AsyncMock()
    mock_file.file_size = 50 * 1024 * 1024
    mock_file.download_to_drive = AsyncMock()
    mock_context.bot.get_file.return_value = mock_file
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp_file:
        test_data = b"test video data" * 1000000  # ~15MB
        temp_file.write(test_data)
        temp_file_path = temp_file.name
    
    try:
        # –ú–æ–∫–∞–µ–º download –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        async def mock_download(path):
            with open(path, 'wb') as f:
                f.write(test_data)
        
        mock_file.download_to_drive.side_effect = mock_download
        
        # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        from utils import create_multiple_unique_videos
        
        async def mock_create_videos(input_path, output_dir, count, params, callback):
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            output_path = Path(output_dir)
            results = []
            for i in range(count):
                result_file = output_path / f"unique_video_{i+1}.mp4"
                result_file.write_bytes(b"unique video data")
                results.append(str(result_file))
            return results
        
        # –ü–æ–¥–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ
        import utils
        original_create_videos = utils.create_multiple_unique_videos
        utils.create_multiple_unique_videos = mock_create_videos
        
        # –ú–æ–∫–∞–µ–º reply_text –∏ reply_document
        mock_processing_msg = AsyncMock()
        mock_processing_msg.edit_text = AsyncMock()
        mock_processing_msg.delete = AsyncMock()
        mock_message.reply_text = AsyncMock(return_value=mock_processing_msg)
        mock_message.reply_document = AsyncMock()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
            result = await process_media_file(
                update=mock_update,
                context=mock_context,
                file_obj=mock_document,
                file_name="large_video.mp4",
                processing_msg=mock_processing_msg,
                is_compressed=False
            )
            
            print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if mock_message.reply_document.called:
                print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            else:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Å–∂–∞—Ç–∏–∏
            edit_calls = mock_processing_msg.edit_text.call_args_list
            compression_messages = [
                call for call in edit_calls 
                if any(word in str(call).lower() for word in ['—Å–∂–∏–º', 'compress', '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'])
            ]
            
            if not compression_messages:
                print("‚úÖ –ù–∏–∫–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Å–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–∂–∞—Ç–∏–∏: {compression_messages}")
            
            return True
            
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            utils.create_multiple_unique_videos = original_create_videos
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        if os.path.exists(temp_file_path):
            os.unlink(temp_file_path)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä–∞\n")
    
    try:
        success = await test_uniqizer_with_large_file()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:")
        if success:
            print("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
            print("‚úÖ –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∂–∏–º–∞—é—Ç—Å—è")
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∏–¥–∏—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π")
            print("‚úÖ –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ")
        else:
            print("‚ùå –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")


if __name__ == "__main__":
    asyncio.run(main())
