"""
–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è ROI-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
"""

from typing import Dict, Optional, Any
from .validators import format_money, format_percent

class ROIMetrics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    
    def __init__(self, data: Dict[str, Optional[float]]):
        self.spend = data.get('spend')      # –†–∞—Å—Ö–æ–¥
        self.income = data.get('income')    # –î–æ—Ö–æ–¥
        self.shows = data.get('shows')      # –ü–æ–∫–∞–∑—ã
        self.clicks = data.get('clicks')    # –ö–ª–∏–∫–∏
        self.leads = data.get('leads')      # –ó–∞—è–≤–∫–∏
        self.sales = data.get('sales')      # –ü—Ä–æ–¥–∞–∂–∏
        
        self.metrics = {}
        self.descriptions = {}
        
    def calculate_all(self) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if self.income is not None and self.spend is not None and self.spend > 0:
            roi = (self.income - self.spend) / self.spend * 100
            self.metrics['ROI'] = format_percent(roi)
            self.descriptions['ROI'] = "–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å —Ä–∞—Å—Ö–æ–¥–æ–≤ (–≤—ã—à–µ ‚Äî –ª—É—á—à–µ)"
            
            profit = self.income - self.spend
            self.metrics['–ü—Ä–æ—Ñ–∏—Ç'] = format_money(profit)
            self.descriptions['–ü—Ä–æ—Ñ–∏—Ç'] = "–ø—Ä–∏–±—ã–ª—å (–î–æ—Ö–æ–¥ ‚àí –†–∞—Å—Ö–æ–¥)"
            
            roas = self.income / self.spend
            self.metrics['ROAS'] = f"{roas:.2f}"
            self.descriptions['ROAS'] = "–≤–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–æ—Ö–æ–¥ –±–æ–ª—å—à–µ —Ä–∞—Å—Ö–æ–¥–∞"
        
        # –ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if self.shows is not None and self.clicks is not None and self.shows > 0:
            ctr = self.clicks / self.shows * 100
            self.metrics['CTR'] = format_percent(ctr)
            self.descriptions['CTR'] = "–∫–∞–∫–æ–π % –ø–æ–∫–∞–∑–æ–≤ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ –∫–ª–∏–∫–∏"
            
        if self.clicks is not None and self.leads is not None and self.clicks > 0:
            ctc = self.leads / self.clicks * 100
            self.metrics['CTC'] = format_percent(ctc)
            self.descriptions['CTC'] = "–∫–∞–∫–æ–π % –∫–ª–∏–∫–æ–≤ —Å—Ç–∞–ª –∑–∞—è–≤–∫–∞–º–∏"
            
        if self.leads is not None and self.sales is not None and self.leads > 0:
            ctb = self.sales / self.leads * 100
            self.metrics['CTB'] = format_percent(ctb)
            self.descriptions['CTB'] = "–∫–∞–∫–æ–π % –∑–∞—è–≤–æ–∫ –¥–æ—à—ë–ª –¥–æ –ø–æ–∫—É–ø–∫–∏"
        
        # –°—Ç–æ–∏–º–æ—Å—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if self.spend is not None and self.shows is not None and self.shows > 0:
            cpm = self.spend / (self.shows / 1000)
            self.metrics['CPM'] = format_money(cpm)
            self.descriptions['CPM'] = "—Ü–µ–Ω–∞ 1000 –ø–æ–∫–∞–∑–æ–≤"
            
        if self.spend is not None and self.clicks is not None and self.clicks > 0:
            cpc = self.spend / self.clicks
            self.metrics['CPC'] = format_money(cpc)
            self.descriptions['CPC'] = "—Ü–µ–Ω–∞ –∫–ª–∏–∫–∞"
            
        if self.spend is not None and self.leads is not None and self.leads > 0:
            cpa = self.spend / self.leads
            self.metrics['CPA'] = format_money(cpa)
            self.descriptions['CPA'] = "—Ü–µ–Ω–∞ –∑–∞—è–≤–∫–∏ (–ª–∏–¥–∞)"
            
        if self.spend is not None and self.sales is not None and self.sales > 0:
            cps = self.spend / self.sales
            self.metrics['CPS'] = format_money(cps)
            self.descriptions['CPS'] = "—Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"
        
        # –°—Ä–µ–¥–Ω–∏–µ —á–µ–∫–∏
        if self.income is not None and self.sales is not None and self.sales > 0:
            apv = self.income / self.sales
            self.metrics['APV'] = format_money(apv)
            self.descriptions['APV'] = "—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –ø–æ–∫—É–ø–∫–∏"
            
        if self.income is not None and self.leads is not None and self.leads > 0:
            apc = self.income / self.leads
            self.metrics['APC'] = format_money(apc)
            self.descriptions['APC'] = "—Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –Ω–∞ –∑–∞—è–≤–∫—É"
        
        return {
            'metrics': self.metrics,
            'descriptions': self.descriptions
        }
    
    def format_results_card(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ –∫—Ä–∞—Å–∏–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏"""
        result = self.calculate_all()
        metrics = result['metrics']
        descriptions = result['descriptions']
        
        if not metrics:
            return "üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫.\n–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã —Ä–∞—Å—Ö–æ–¥ –∏ –¥–æ—Ö–æ–¥."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        card = "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        financial_line = []
        if 'ROI' in metrics:
            sign = "+" if not metrics['ROI'].startswith('-') else ""
            financial_line.append(f"ROI: {sign}{metrics['ROI']}")
        if '–ü—Ä–æ—Ñ–∏—Ç' in metrics:
            financial_line.append(f"–ü—Ä–æ—Ñ–∏—Ç: {metrics['–ü—Ä–æ—Ñ–∏—Ç']}")
        if 'ROAS' in metrics:
            financial_line.append(f"ROAS: {metrics['ROAS']}")
            
        if financial_line:
            card += " | ".join(financial_line) + "\n\n"
        
        # –ö–æ–Ω–≤–µ—Ä—Å–∏–∏
        conversion_line = []
        for metric in ['CTR', 'CTC', 'CTB']:
            if metric in metrics:
                conversion_line.append(f"{metric}: {metrics[metric]}")
                
        if conversion_line:
            card += "    ".join(conversion_line) + "\n\n"
        
        # –°—Ç–æ–∏–º–æ—Å—Ç–∏
        cost_line = []
        for metric in ['CPM', 'CPC', 'CPA', 'CPS']:
            if metric in metrics:
                cost_line.append(f"{metric}: {metrics[metric]}")
                
        if cost_line:
            card += "    ".join(cost_line) + "\n\n"
        
        # –°—Ä–µ–¥–Ω–∏–µ —á–µ–∫–∏
        avg_line = []
        for metric in ['APV', 'APC']:
            if metric in metrics:
                avg_line.append(f"{metric}: {metrics[metric]}")
                
        if avg_line:
            card += "    ".join(avg_line) + "\n\n"
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        if descriptions:
            card += "üìã **–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**\n"
            for metric, desc in descriptions.items():
                card += f"‚Ä¢ **{metric}** ‚Äî {desc}\n"
        
        return card
