"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–º–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è Facebook
"""

import os
import logging
import tempfile
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode
from utils.localization import get_text
from utils.compress_utils import (
    compress_image_for_facebook,
    compress_video_for_facebook,
    is_video_file,
    is_image_file
)
from utils.queue_manager import compression_queue
import config

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ConversationHandler
WAITING_FOR_COMPRESS_FILE = 0


async def smart_compress_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–º–Ω–æ–µ —Å–∂–∞—Ç–∏–µ'"""
    query = update.callback_query
    await query.answer()
    
    # –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    if 'event_tracker' in context.bot_data:
        await context.bot_data['event_tracker'].track_event(update, context, 'command', 'smart_compress')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    await query.message.reply_text(
        text=get_text(context, 'smart_compress_explanation'),
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard = [[InlineKeyboardButton(get_text(context, 'back'), callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
    await query.message.reply_text(
        text=get_text(context, 'upload_file_compress'),
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return WAITING_FOR_COMPRESS_FILE


async def wrong_media_handler_compress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∂–∞—Ç–æ–≥–æ –º–µ–¥–∏–∞ (–≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ –Ω–µ –∫–∞–∫ —Ñ–∞–π–ª) –¥–ª—è –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞"""
    message = update.message
    user = update.effective_user
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ–±—ä–µ–∫—Ç
    if message.video:
        media_type = "–≤–∏–¥–µ–æ"
        file_obj = message.video
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤–∏–¥–µ–æ
        file_name = f"video_{user.id}_{message.message_id}.mp4"
    elif message.photo:
        media_type = "—Ñ–æ—Ç–æ"
        # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file_obj = message.photo[-1]
        file_name = f"photo_{user.id}_{message.message_id}.jpg"
    else:
        await message.reply_text(text=get_text(context, 'error_no_file'))
        return WAITING_FOR_COMPRESS_FILE
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if file_obj.file_size > config.MAX_FILE_SIZE:
        max_size_mb = config.MAX_FILE_SIZE // (1024 * 1024)
        await message.reply_text(text=get_text(context, 'error_file_too_large', max_size=max_size_mb))
        return WAITING_FOR_COMPRESS_FILE
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ, –Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–∞–π–ª
    quality_warning = await message.reply_text(
        text=f"‚ö†Ô∏è **{media_type.capitalize()} –ø—Ä–∏–Ω—è—Ç–æ –∫ —Å–∂–∞—Ç–∏—é!**\n\n"
             f"üí° **–°–æ–≤–µ—Ç –Ω–∞ –±—É–¥—É—â–µ–µ:**\n"
             f"–î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ {media_type} –∫–∞–∫ —Ñ–∞–π–ª:\n"
             f"‚Ä¢ üìé –°–∫—Ä–µ–ø–∫–∞ ‚Üí \"–§–∞–π–ª\" ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ {media_type}\n"
             f"‚Ä¢ –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é \"–ë–µ–∑ —Å–∂–∞—Ç–∏—è\"\n\n"
             f"üîÑ –°–µ–π—á–∞—Å —Å–∂–∏–º–∞–µ–º –≤–∞—à {media_type}...",
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å process_compression_task
    class TempDocument:
        def __init__(self, file_obj, file_name):
            self.file_id = file_obj.file_id
            self.file_name = file_name
            self.file_size = file_obj.file_size
            
        async def get_file(self):
            return await context.bot.get_file(self.file_id)
    
    temp_document = TempDocument(file_obj, file_name)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å (–∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ)
    queue_result = await compression_queue.add_task(
        user_id=user.id,
        task_func=process_compression_task,
        message=message,
        document=temp_document,
        file_name=file_name,
        context=context
    )
    
    if not queue_result['success']:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—á–µ—Ä–µ–¥–∏
        if queue_result['error'] == 'too_many_tasks':
            await message.reply_text(
                text=get_text(context, 'too_many_tasks')
            )
        elif queue_result['error'] == 'queue_full':
            await message.reply_text(
                text=get_text(context, 'queue_full', queue_size=queue_result.get('queue_size', 10))
            )
        else:
            await message.reply_text(
                text=get_text(context, 'error_processing')
            )
    else:
        # –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å
        await message.reply_text(
            text=get_text(
                context,
                'queue_position',
                position=queue_result['position'],
                current=queue_result['current_tasks'],
                max=queue_result['max_concurrent']
            )
        )
        
        logger.info(f"User {user.id} added compressed {media_type} to compression queue, position: {queue_result['position']}")
    
    return ConversationHandler.END


async def process_compression_task(
    message,
    document,
    file_name: str,
    context: ContextTypes.DEFAULT_TYPE
):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∂–∞—Ç–∏—è (–±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏)"""
    processing_msg = None
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        with tempfile.TemporaryDirectory() as temp_dir:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            input_path = os.path.join(temp_dir, file_name)
            file = await document.get_file()
            await file.download_to_drive(input_path)
            
            logger.info(f"Processing compression: {file_name}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            output_dir = os.path.join(temp_dir, 'compressed')
            os.makedirs(output_dir, exist_ok=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            processing_msg = await message.reply_text(
                text=get_text(context, 'compressing')
            )
            
            # –°–∂–∏–º–∞–µ–º —Ñ–∞–π–ª
            if is_image_file(file_name):
                # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                output_path, stats = compress_image_for_facebook(
                    input_path,
                    output_dir,
                    target_format='webp'
                )
            else:
                # –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ
                output_path, stats = await compress_video_for_facebook(
                    input_path,
                    output_dir
                )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            if processing_msg:
                await processing_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª
            with open(output_path, 'rb') as compressed_file:
                await message.reply_document(
                    document=compressed_file,
                    filename=os.path.basename(output_path),
                    caption=get_text(
                        context,
                        'compression_report',
                        original_size=stats['original_size'],
                        new_size=stats['new_size'],
                        percent=stats['percent'],
                        saved=stats['saved']
                    ),
                    parse_mode=ParseMode.MARKDOWN
                )
            
            logger.info(f"Successfully compressed {file_name}: "
                       f"{stats['original_size']}MB -> {stats['new_size']}MB ({stats['percent']}%)")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è
            keyboard = [[
                InlineKeyboardButton(get_text(context, 'smart_compress'), callback_data='smart_compress'),
                InlineKeyboardButton(get_text(context, 'main_menu'), callback_data='main_menu')
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await message.reply_text(
                text=get_text(context, 'compress_more_or_menu'),
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"Error in compression task: {e}")
        if processing_msg:
            await processing_msg.edit_text(
                text=get_text(context, 'error_processing')
            )
        raise


async def compress_file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∂–∞—Ç–∏—è"""
    message = update.message
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
    if not message.document:
        await message.reply_text(
            text=get_text(context, 'error_no_file')
        )
        return WAITING_FOR_COMPRESS_FILE
    
    document = message.document
    file_name = document.file_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if not (is_image_file(file_name) or is_video_file(file_name)):
        await message.reply_text(
            text=get_text(context, 'error_unsupported_format')
        )
        return WAITING_FOR_COMPRESS_FILE
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
    queue_result = await compression_queue.add_task(
        user_id=user.id,
        task_func=process_compression_task,
        message=message,
        document=document,
        file_name=file_name,
        context=context
    )
    
    if not queue_result['success']:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—á–µ—Ä–µ–¥–∏
        if queue_result['error'] == 'too_many_tasks':
            await message.reply_text(
                text=get_text(context, 'too_many_tasks')
            )
        elif queue_result['error'] == 'queue_full':
            await message.reply_text(
                text=get_text(context, 'queue_full', queue_size=queue_result.get('queue_size', 10))
            )
        else:
            await message.reply_text(
                text=get_text(context, 'error_processing')
            )
    else:
        # –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å
        await message.reply_text(
            text=get_text(
                context,
                'queue_position',
                position=queue_result['position'],
                current=queue_result['current_tasks'],
                max=queue_result['max_concurrent']
            )
        )
        
        logger.info(f"User {user.id} added {file_name} to compression queue, position: {queue_result['position']}")
    
    return ConversationHandler.END
