"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.localization import get_text
import config

logger = logging.getLogger(__name__)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    logger.info(f"User {user.id} ({user.username}) started the bot")
    
    # –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    if 'event_tracker' in context.bot_data:
        await context.bot_data['event_tracker'].track_event(update, context, 'command', '/start')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    saved_language = None
    if 'database' in context.bot_data:
        db = context.bot_data['database']
        saved_language = await db.get_user_language(user.id)
        logger.info(f"User {user.id} saved language: {saved_language}")
    
    if saved_language:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        context.user_data['language'] = saved_language
        logger.info(f"User {user.id} using saved language: {saved_language}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ
        welcome_text = get_text(context, 'welcome_back')
        await update.message.reply_text(welcome_text)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–∑–∞—Ç–µ–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é)
        from .subscription import check_subscription_status
        await check_subscription_status(update, context)
    else:
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        logger.info(f"User {user.id} - first time, showing language selection")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        keyboard = [
            [
                InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_uk"),
                InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
                InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
            reply_markup=reply_markup
        )


async def language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    lang_code = query.data.split('_')[1]
    user = query.from_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ user_data
    context.user_data['language'] = lang_code
    logger.info(f"User {user.id} selected language: {lang_code}")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if 'database' in context.bot_data:
            db = context.bot_data['database']
            success = await db.set_user_language(user.id, lang_code, user.username)
            if success:
                logger.info(f"‚úÖ Language {lang_code} saved for user {user.id}")
            else:
                logger.error(f"‚ùå Failed to save language for user {user.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        selected_text = get_text(context, 'language_selected')
        logger.debug(f"Language selected text: {selected_text}")
        
        await query.edit_message_text(text=selected_text)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
        from .subscription import check_subscription_status
        await check_subscription_status(update, context)
        
    except Exception as e:
        logger.error(f"Error in language_callback: {e}", exc_info=True)
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await query.message.reply_text(
                "An error occurred. Please try /start again."
            )
        except:
            pass
