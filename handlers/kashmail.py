"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è KashMail - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—á—Ç–∞
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from services.kashmail_api import MailTmApi
from repos.kashmail_sessions import KashmailRepository
from utils.otp_extract import extract_codes, extract_links
from utils.localization import get_text
from database.models import Database
import config
import logging

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è)
WAITING_FOR_EMAIL_ACTION = 1


class KashmailHandler:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ KashMail"""
    
    def __init__(self):
        self.api = MailTmApi(timeout_seconds=30)
        self.active_watchers = {}  # user_id -> watcher_task
        
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        await self.api.close()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏
        for user_id, task in self.active_watchers.items():
            if task and not task.done():
                task.cancel()
        self.active_watchers.clear()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
kashmail_handler = KashmailHandler()


async def kashmail_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é KashMail"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        if 'database' not in context.bot_data:
            await query.edit_message_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        db = context.bot_data['database']
        repo = KashmailRepository(db)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        session = await repo.sessions.get_session(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        daily_limit = getattr(config, 'KASHMAIL_DAILY_LIMIT', 10)
        remaining_quota = await repo.counters.get_remaining_quota(user_id, daily_limit)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é
        menu_text = get_text(context, 'kashmail_menu_title')
        menu_text += f"\n\nüìä **{get_text(context, 'kashmail_quota')}:** {remaining_quota}/{daily_limit}"
        
        keyboard = []
        
        if session and session['status'] in ['active', 'waiting']:
            # –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
            address = session['address']
            status = session['status']
            
            menu_text += f"\n\nüìß **{get_text(context, 'kashmail_active_email')}:**\n`{address}`"
            menu_text += f"\nüìä **{get_text(context, 'kashmail_status')}:** {get_text(context, f'kashmail_status_{status}')}"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ë–ï–ó –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–∂–∏–¥–∞–Ω–∏—è
            keyboard.extend([
                [InlineKeyboardButton(get_text(context, 'kashmail_check_messages'), callback_data="kashmail_check")],
                [InlineKeyboardButton(get_text(context, 'kashmail_burn_address'), callback_data="kashmail_burn")]
            ])
        else:
            # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
            if remaining_quota > 0:
                keyboard.append([InlineKeyboardButton(get_text(context, 'kashmail_generate_email'), callback_data="kashmail_generate")])
            else:
                menu_text += f"\n\n‚ö†Ô∏è {get_text(context, 'kashmail_quota_exceeded')}"
        
        # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
        keyboard.append([InlineKeyboardButton(get_text(context, 'back_to_menu'), callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=menu_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"Error in kashmail_menu_callback: {e}")
        await query.edit_message_text(f"‚ùå {get_text(context, 'error_occurred')}")


async def kashmail_generate_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ email"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        if 'database' not in context.bot_data:
            await query.edit_message_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        db = context.bot_data['database']
        repo = KashmailRepository(db)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å email
        daily_limit = getattr(config, 'KASHMAIL_DAILY_LIMIT', 10)
        can_create, reason = await repo.can_user_create_email(user_id, daily_limit)
        
        if not can_create:
            await query.edit_message_text(f"‚ùå {reason}")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏
        loading_text = get_text(context, 'kashmail_generating')
        await query.edit_message_text(loading_text)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π email
        result = await kashmail_handler.api.create_temporary_email()
        
        if not result:
            await query.edit_message_text(f"‚ùå {get_text(context, 'kashmail_generation_failed')}")
            return
        
        email, jwt_token, expires_at = result
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
        success = await repo.create_new_email_session(user_id, email, jwt_token, expires_at)
        
        if not success:
            await query.edit_message_text(f"‚ùå {get_text(context, 'kashmail_save_failed')}")
            return
        
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å-–ø–∞–Ω–µ–ª—å –≤–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await _show_kashmail_status_panel(query, context)
        
    except Exception as e:
        logger.error(f"Error in kashmail_generate_callback: {e}")
        await query.edit_message_text(f"‚ùå {get_text(context, 'error_occurred')}")


async def _show_kashmail_status_panel(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ KashMail –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = query.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if 'database' not in context.bot_data:
            await query.edit_message_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        db = context.bot_data['database']
        repo = KashmailRepository(db)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        session = await repo.sessions.get_session(user_id)
        
        if not session:
            await query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        daily_limit = getattr(config, 'KASHMAIL_DAILY_LIMIT', 10)
        remaining_quota = await repo.counters.get_remaining_quota(user_id, daily_limit)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é
        menu_text = get_text(context, 'kashmail_menu_title')
        menu_text += f"\n\nüìä **{get_text(context, 'kashmail_quota')}:** {remaining_quota}/{daily_limit}"
        
        address = session['address']
        status = session['status']
        
        menu_text += f"\n\nüìß **{get_text(context, 'kashmail_active_email')}:**\n`{address}`"
        menu_text += f"\nüìä **{get_text(context, 'kashmail_status')}:** {get_text(context, f'kashmail_status_{status}')}"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ë–ï–ó –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–∂–∏–¥–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton(get_text(context, 'kashmail_check_messages'), callback_data="kashmail_check")],
            [InlineKeyboardButton(get_text(context, 'kashmail_burn_address'), callback_data="kashmail_burn")],
            [InlineKeyboardButton(get_text(context, 'back_to_menu'), callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=menu_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"Error in _show_kashmail_status_panel: {e}")
        await query.edit_message_text(f"‚ùå {get_text(context, 'error_occurred')}")


async def kashmail_copy_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ email –∞–¥—Ä–µ—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ callback_data
    email = query.data.replace("kashmail_copy_", "")
    
    copy_text = get_text(context, 'kashmail_copy_instruction')
    copy_text += f"\n\n`{email}`"
    copy_text += f"\n\n{get_text(context, 'kashmail_copy_hint')}"
    
    keyboard = [
        [InlineKeyboardButton(get_text(context, 'kashmail_back_to_menu'), callback_data="kashmail_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=copy_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )


async def kashmail_wait_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å–∫ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π watcher –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_id in kashmail_handler.active_watchers:
            old_task = kashmail_handler.active_watchers[user_id]
            if old_task and not old_task.done():
                old_task.cancel()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        if 'database' not in context.bot_data:
            await query.edit_message_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        db = context.bot_data['database']
        repo = KashmailRepository(db)
        
        session = await repo.sessions.get_session(user_id)
        if not session:
            await query.edit_message_text(f"‚ùå {get_text(context, 'kashmail_no_active_session')}")
            return
        
        jwt_token = session['jwt']
        address = session['address']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "waiting"
        await repo.sessions.update_session_status(user_id, 'waiting')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
        wait_timeout = getattr(config, 'KASHMAIL_WAIT_TIMEOUT', 200)
        waiting_text = get_text(context, 'kashmail_waiting_started')
        waiting_text += f"\n\nüìß **Email:** `{address}`"
        waiting_text += f"\n‚è±Ô∏è **{get_text(context, 'kashmail_timeout')}:** {wait_timeout} {get_text(context, 'seconds')}"
        waiting_text += f"\n\n{get_text(context, 'kashmail_waiting_instruction')}"
        
        keyboard = [
            [InlineKeyboardButton(get_text(context, 'kashmail_stop_waiting'), callback_data="kashmail_stop_wait")],
            [InlineKeyboardButton(get_text(context, 'kashmail_burn_address'), callback_data="kashmail_burn")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=waiting_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        watcher = KashmailEmailWatcher(kashmail_handler.api)
        task = asyncio.create_task(
            _wait_for_messages(context, user_id, jwt_token, address, wait_timeout, query.message.chat_id)
        )
        kashmail_handler.active_watchers[user_id] = task
        
    except Exception as e:
        logger.error(f"Error in kashmail_wait_callback: {e}")
        await query.edit_message_text(f"‚ùå {get_text(context, 'error_occurred')}")


async def _wait_for_messages(context, user_id: int, jwt_token: str, address: str, timeout: int, chat_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        watcher = KashmailEmailWatcher(kashmail_handler.api)
        
        async def message_callback(messages):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                for message in messages:
                    await _send_message_notification(context, user_id, message, address, chat_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
                if 'database' in context.bot_data:
                    repo = KashmailRepository(context.bot_data['database'])
                    await repo.sessions.update_session_status(user_id, 'done')
                    
            except Exception as e:
                logger.error(f"Error in message callback: {e}")
        
        # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = await watcher.watch_for_new_messages(
            jwt_token, 
            timeout_seconds=timeout,
            callback=message_callback
        )
        
        # –ï—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        if messages is None:
            timeout_text = get_text(context, 'kashmail_timeout_reached')
            timeout_text += f"\n\nüìß **Email:** `{address}`"
            timeout_text += f"\n\n{get_text(context, 'kashmail_timeout_suggestion')}"
            
            keyboard = [
                [InlineKeyboardButton(get_text(context, 'kashmail_generate_new'), callback_data="kashmail_generate")],
                [InlineKeyboardButton(get_text(context, 'back_to_menu'), callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_message(
                chat_id=chat_id,
                text=timeout_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        
    except asyncio.CancelledError:
        logger.info(f"Message watching cancelled for user {user_id}")
    except Exception as e:
        logger.error(f"Error in _wait_for_messages: {e}")
    finally:
        # –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        if user_id in kashmail_handler.active_watchers:
            del kashmail_handler.active_watchers[user_id]


async def _send_message_notification(context, user_id: int, message, address: str, chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    try:
        from utils.otp_extract import extract_codes, extract_links
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_text = f"üì® **{get_text(context, 'kashmail_new_message')}**\n\n"
        notification_text += f"üìß **To:** `{address}`\n"
        notification_text += f"üì§ **From:** `{message.from_email}`\n"
        notification_text += f"üìã **Subject:** {message.subject}\n"
        notification_text += f"üïê **Date:** {message.date.strftime('%H:%M %d.%m.%Y')}"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥—ã –∏ —Å—Å—ã–ª–∫–∏
        text_content = message.text_content or ""
        html_content = message.html_content or ""
        full_content = f"{text_content} {html_content}"
        
        codes = extract_codes(full_content, message.subject)
        links = extract_links(html_content or text_content)
        
        if codes:
            notification_text += f"\n\nüîë **{get_text(context, 'kashmail_codes_found')}:** `{codes[0]}`"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        
        if text_content.strip():
            keyboard.append([InlineKeyboardButton(get_text(context, 'kashmail_show_body'), callback_data=f"kashmail_show_{message.id}")])
        
        if codes:
            keyboard.append([InlineKeyboardButton(get_text(context, 'kashmail_copy_code'), callback_data=f"kashmail_copy_code_{codes[0]}")])
        
        if links:
            keyboard.append([InlineKeyboardButton(get_text(context, 'kashmail_show_links'), callback_data=f"kashmail_links_{message.id}")])
        
        keyboard.extend([
            [InlineKeyboardButton(get_text(context, 'kashmail_burn_address'), callback_data="kashmail_burn")],
            [InlineKeyboardButton(get_text(context, 'kashmail_back_to_menu'), callback_data="kashmail_menu")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=notification_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"Error sending message notification: {e}")


async def kashmail_stop_wait_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º watcher
    if user_id in kashmail_handler.active_watchers:
        task = kashmail_handler.active_watchers[user_id]
        if task and not task.done():
            task.cancel()
        del kashmail_handler.active_watchers[user_id]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
    if 'database' in context.bot_data:
        repo = KashmailRepository(context.bot_data['database'])
        await repo.sessions.update_session_status(user_id, 'active')
    
    stopped_text = get_text(context, 'kashmail_waiting_stopped')
    
    keyboard = [
        [InlineKeyboardButton(get_text(context, 'kashmail_back_to_menu'), callback_data="kashmail_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=stopped_text,
        reply_markup=reply_markup
    )


async def kashmail_burn_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–∂–∏–≥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º watcher –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_id in kashmail_handler.active_watchers:
            task = kashmail_handler.active_watchers[user_id]
            if task and not task.done():
                task.cancel()
            del kashmail_handler.active_watchers[user_id]
        
        # –°–∂–∏–≥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
        if 'database' in context.bot_data:
            repo = KashmailRepository(context.bot_data['database'])
            await repo.sessions.burn_session(user_id)
        
        burned_text = get_text(context, 'kashmail_address_burned')
        burned_text += f"\n\n{get_text(context, 'kashmail_burn_explanation')}"
        
        keyboard = [
            [InlineKeyboardButton(get_text(context, 'kashmail_generate_new'), callback_data="kashmail_generate")],
            [InlineKeyboardButton(get_text(context, 'back_to_menu'), callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=burned_text,
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error in kashmail_burn_callback: {e}")
        await query.edit_message_text(f"‚ùå {get_text(context, 'error_occurred')}")


async def kashmail_check_messages_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        if 'database' not in context.bot_data:
            await query.edit_message_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        db = context.bot_data['database']
        repo = KashmailRepository(db)
        
        session = await repo.sessions.get_session(user_id)
        if not session:
            await query.edit_message_text(f"‚ùå {get_text(context, 'kashmail_no_active_session')}")
            return
        
        jwt_token = session['jwt']
        address = session['address']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await query.edit_message_text(get_text(context, 'kashmail_checking_messages'))
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = await kashmail_handler.api.get_messages(jwt_token)
        
        if not messages:
            no_messages_text = get_text(context, 'kashmail_no_messages')
            no_messages_text += f"\n\nüìß **Email:** `{address}`"
            
            keyboard = [
                [InlineKeyboardButton(get_text(context, 'kashmail_back_to_menu'), callback_data="kashmail_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=no_messages_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –ï—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞
        latest_message = messages[0]  # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –¥–∞—Ç—ã
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_detail = await kashmail_handler.api.get_message_detail(latest_message['id'], jwt_token)
        
        if message_detail:
            await _show_message_content(query, context, message_detail, address)
        else:
            await query.edit_message_text(f"‚ùå {get_text(context, 'kashmail_message_load_failed')}")
        
    except Exception as e:
        logger.error(f"Error in kashmail_check_messages_callback: {e}")
        await query.edit_message_text(f"‚ùå {get_text(context, 'error_occurred')}")


async def _show_message_content(query, context, message_detail, email_address):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞ –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–π –ø–æ—á—Ç–µ"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º OTP –∫–æ–¥—ã –∏ —Å—Å—ã–ª–∫–∏
        codes = extract_codes(message_detail.html_content or message_detail.text_content, message_detail.subject)
        links = extract_links(message_detail.html_content or message_detail.text_content)
        
        # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        from utils.otp_extract import clean_html
        clean_text = clean_html(message_detail.html_content or message_detail.text_content)
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Å—å–º–∞
        header = f"üìß **–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ –≤ {email_address}**\n\n"
        header += f"üë§ **–û—Ç:** {message_detail.from_email}\n"
        header += f"üìã **–¢–µ–º–∞:** {message_detail.subject}\n"
        header += f"üìÖ **–î–∞—Ç–∞:** {message_detail.date.strftime('%H:%M %d.%m.%Y')}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if codes:
            header += f"\nüîë **–ù–∞–π–¥–µ–Ω—ã –∫–æ–¥—ã:** {', '.join(codes[:3])}"  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
        
        header += "\n" + "‚îÄ" * 30 + "\n\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram
        max_content_length = 4000 - len(header) - 200  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        
        if len(clean_text) > max_content_length:
            content = clean_text[:max_content_length] + "...\n\nüìÑ *–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω*"
        else:
            content = clean_text
            
        full_text = header + content
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë", callback_data="kashmail_check")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –í—Ä–µ–º–µ–Ω–Ω–æ–π –ü–æ—á—Ç–µ", callback_data="kashmail_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=full_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"Error in _show_message_content: {e}")
        await query.edit_message_text(f"‚ùå {get_text(context, 'error_occurred')}")


async def kashmail_show_body_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    callback_data = query.data
    
    logger.info(f"kashmail_show_body_callback called with data: {callback_data}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ callback_data: kashmail_show_{message_id}
    if not callback_data.startswith("kashmail_show_"):
        logger.error(f"Invalid callback data: {callback_data}")
        return
        
    message_id = callback_data.replace("kashmail_show_", "")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db = Database()
        repo = KashmailRepository(db)
        session = await repo.sessions.get_session(user_id)
        
        if not session:
            await query.edit_message_text(
                text=get_text(context, 'kashmail_no_active_session')
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        api = MailTmApi()
        try:
            message = await api.get_message_detail(message_id, session['jwt'])
            
            if message:
                # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                from utils.otp_extract import clean_html
                clean_text = clean_html(message.html_content or message.text_content)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è Telegram
                max_length = 4000
                if len(clean_text) > max_length:
                    clean_text = clean_text[:max_length] + "...\n\nüìÑ –¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                keyboard = [[
                    InlineKeyboardButton(
                        get_text(context, 'back'), 
                        callback_data='kashmail_menu'
                    )
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text=f"üìÑ **–¢–µ–ª–æ –ø–∏—Å—å–º–∞**\n\n{clean_text}",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text(
                    text=get_text(context, 'kashmail_message_load_failed')
                )
        finally:
            await api.close()
            
    except Exception as e:
        logger.error(f"Error showing message body: {e}")
        await query.edit_message_text(
            text=get_text(context, 'error_occurred')
        )


async def kashmail_show_links_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ —Å—Å—ã–ª–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    callback_data = query.data
    
    logger.info(f"kashmail_show_links_callback called with data: {callback_data}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ callback_data: kashmail_links_{message_id}
    if not callback_data.startswith("kashmail_links_"):
        logger.error(f"Invalid callback data: {callback_data}")
        return
        
    message_id = callback_data.replace("kashmail_links_", "")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db = Database()
        repo = KashmailRepository(db)
        session = await repo.sessions.get_session(user_id)
        
        if not session:
            await query.edit_message_text(
                text=get_text(context, 'kashmail_no_active_session')
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        api = MailTmApi()
        try:
            message = await api.get_message_detail(message_id, session['jwt'])
            
            if message:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏
                from utils.otp_extract import extract_links
                links = extract_links(message.html_content or message.text_content)
                
                if links:
                    links_text = "\n".join([f"üîó {link}" for link in links[:10]])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    if len(links) > 10:
                        links_text += f"\n\n... –∏ –µ—â–µ {len(links) - 10} —Å—Å—ã–ª–æ–∫"
                        
                    text = f"üîó **–°—Å—ã–ª–∫–∏ –∏–∑ –ø–∏—Å—å–º–∞**\n\n{links_text}"
                else:
                    text = "üîó **–°—Å—ã–ª–∫–∏ –∏–∑ –ø–∏—Å—å–º–∞**\n\n–°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                keyboard = [[
                    InlineKeyboardButton(
                        get_text(context, 'back'), 
                        callback_data='kashmail_menu'
                    )
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text(
                    text=get_text(context, 'kashmail_message_load_failed')
                )
        finally:
            await api.close()
            
    except Exception as e:
        logger.error(f"Error showing message links: {e}")
        await query.edit_message_text(
            text=get_text(context, 'error_occurred')
        )


# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
async def cleanup_kashmail():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ KashMail –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–æ—Ç–∞"""
    await kashmail_handler.cleanup()
