"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ cookies
"""

import os
import logging
import tempfile
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode
from utils.localization import get_text
from utils.video_downloader_v2 import EnhancedVideoDownloader
from utils.cookies_manager import CookiesManager
from utils.queue_manager import compression_queue
from database import Database
import config

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_VIDEO_URL, WAITING_FOR_ACTION = range(2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
db = None
cookies_manager = None
video_downloader = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
try:
    if config.DATABASE_URL:
        db = Database(config.DATABASE_URL)
        cookies_manager = CookiesManager(db)
        video_downloader = EnhancedVideoDownloader(
            cookies_manager=cookies_manager,
            db=db,
            max_file_size=config.MAX_FILE_SIZE
        )
        logger.info("Enhanced video downloader initialized with cookies manager")
    else:
        # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –±–µ–∑ –ë–î
        from utils.video_downloader import VideoDownloader
        video_downloader = VideoDownloader(max_file_size=config.MAX_FILE_SIZE)
        logger.warning("Using basic video downloader without cookies rotation")
except Exception as e:
    logger.error(f"Error initializing video downloader: {e}")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫
    from utils.video_downloader import VideoDownloader
    video_downloader = VideoDownloader(max_file_size=config.MAX_FILE_SIZE)


async def video_downloader_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ'"""
    query = update.callback_query
    await query.answer()
    
    # –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    if 'event_tracker' in context.bot_data:
        await context.bot_data['event_tracker'].track_event(update, context, 'command', 'video_downloader')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–º–µ—Ä–æ–º
    max_size_mb = config.MAX_FILE_SIZE // (1024 * 1024)
    text = get_text(context, 'video_downloader_explanation', max_size=max_size_mb)
    await query.message.reply_text(
        text=text,
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard = [[InlineKeyboardButton(get_text(context, 'back'), callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É
    await query.message.reply_text(
        text=get_text(context, 'send_video_url'),
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return WAITING_FOR_VIDEO_URL


async def url_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ"""
    message = update.message
    url = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ URL
    if not url.startswith(('http://', 'https://')):
        await message.reply_text(
            text=get_text(context, 'invalid_url'),
            parse_mode=ParseMode.MARKDOWN
        )
        return WAITING_FOR_VIDEO_URL
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
    platform = video_downloader.detect_platform(url)
    if not platform:
        await message.reply_text(
            text=get_text(context, 'unsupported_platform'),
            parse_mode=ParseMode.MARKDOWN
        )
        return WAITING_FOR_VIDEO_URL
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
    context.user_data['video_url'] = url
    context.user_data['video_platform'] = platform
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
    keyboard = [
        [
            InlineKeyboardButton(get_text(context, 'download_video'), callback_data="download_video"),
            InlineKeyboardButton(get_text(context, 'download_audio'), callback_data="download_audio")
        ],
        [
            InlineKeyboardButton(get_text(context, 'back'), callback_data="main_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_text(
        text=get_text(context, 'choose_video_action', platform=platform),
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return WAITING_FOR_ACTION


async def action_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    url = context.user_data.get('video_url')
    platform = context.user_data.get('video_platform')
    
    if not url:
        await query.message.reply_text(
            text=get_text(context, 'error_no_url')
        )
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await query.message.reply_text(
        text=get_text(context, 'downloading_video', platform=platform)
    )
    
    try:
        if action == "download_video":
            await download_video_task(query.message, url, platform, context, processing_msg)
            
        elif action == "download_audio":
            await download_audio_task(query.message, url, platform, context, processing_msg)
            
            
        elif action == "main_menu":
            await processing_msg.delete()
            from .subscription import show_main_menu
            await show_main_menu(update, context)
            return ConversationHandler.END
            
    except Exception as e:
        logger.error(f"Error in action_handler: {e}")
        await processing_msg.edit_text(
            text=get_text(context, 'error_downloading')
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [[
        InlineKeyboardButton(get_text(context, 'video_downloader'), callback_data='video_downloader'),
        InlineKeyboardButton(get_text(context, 'main_menu'), callback_data='main_menu')
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        text=get_text(context, 'download_more_or_menu'),
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END


async def download_video_task(message, url: str, platform: str, context: ContextTypes.DEFAULT_TYPE, 
                              processing_msg):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π cookies"""
    temp_dir = None
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = tempfile.mkdtemp()
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        await processing_msg.edit_text(
            text=get_text(context, 'downloading_in_progress')
        )
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        user_id = message.from_user.id if message.from_user else None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Ç—Ä–µ–∫–∏–Ω–≥–æ–º
        if hasattr(video_downloader, 'download_video_async'):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            video_path, error = await video_downloader.download_video_async(
                url=url,
                message=processing_msg,
                output_dir=temp_dir,
                user_id=user_id
            )
        elif hasattr(video_downloader, 'download_video_with_retry'):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
            video_path, error = await video_downloader.download_video_with_retry(
                url=url,
                user_id=user_id,
                output_dir=temp_dir
            )
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            loop = asyncio.get_event_loop()
            video_path, error = await loop.run_in_executor(
                None,
                video_downloader.download_video,
                url,
                temp_dir
            )
        
        if error:
            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
            if not hasattr(video_downloader, 'download_video_async'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
                if cookies_manager and any(word in error.lower() for word in ['–ø—Ä–∏–≤–∞—Ç–Ω–æ–µ', 'private', '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü']):
                    await processing_msg.edit_text(
                        text=f"‚ùå {error}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
                    )
                else:
                    await processing_msg.edit_text(
                        text=f"‚ùå {error}"
                    )
            return
        
        if video_path and os.path.exists(video_path):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(video_path)
            
            await processing_msg.edit_text(
                text=get_text(context, 'uploading_video')
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
            with open(video_path, 'rb') as video_file:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–µ 50MB, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                LARGE_FILE_LIMIT = 50 * 1024 * 1024  # 50MB –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                if file_size > LARGE_FILE_LIMIT:
                    await message.reply_document(
                        document=video_file,
                        filename=os.path.basename(video_path),
                        caption=get_text(context, 'video_downloaded_large', 
                                       platform=platform, 
                                       size_mb=file_size // 1024 // 1024)
                    )
                else:
                    await message.reply_video(
                        video=video_file,
                        caption=get_text(context, 'video_downloaded', 
                                       platform=platform)
                    )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
            if not hasattr(video_downloader, 'download_video_async'):
                await processing_msg.delete()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            logger.info(f"Successfully downloaded video from {platform}: {url}")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
            if not hasattr(video_downloader, 'download_video_async'):
                await processing_msg.edit_text(
                    text=get_text(context, 'error_downloading')
                )
            
    except Exception as e:
        logger.error(f"Error downloading video: {e}")
        await processing_msg.edit_text(
            text=get_text(context, 'error_downloading')
        )
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if temp_dir and os.path.exists(temp_dir):
            import shutil
            try:
                shutil.rmtree(temp_dir)
            except:
                pass


async def download_audio_task(message, url: str, platform: str, context: ContextTypes.DEFAULT_TYPE, processing_msg):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ"""
    temp_dir = None
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = tempfile.mkdtemp()
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        await processing_msg.edit_text(
            text=get_text(context, 'extracting_audio')
        )
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        user_id = message.from_user.id if message.from_user else None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
        if hasattr(video_downloader, 'download_audio') and asyncio.iscoroutinefunction(video_downloader.download_audio):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ EnhancedVideoDownloader
            audio_path, error = await video_downloader.download_audio(
                url=url,
                user_id=user_id,
                output_dir=temp_dir
            )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            audio_path, error = await loop.run_in_executor(
                None,
                video_downloader.download_audio,
                url,
                temp_dir
            )
        
        if error:
            await processing_msg.edit_text(
                text=f"‚ùå {error}"
            )
            return
        
        if audio_path and os.path.exists(audio_path):
            await processing_msg.edit_text(
                text=get_text(context, 'uploading_audio')
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
            with open(audio_path, 'rb') as audio_file:
                await message.reply_audio(
                    audio=audio_file,
                    caption=get_text(context, 'audio_extracted', platform=platform),
                    title=os.path.basename(audio_path).replace('.mp3', '')
                )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            await processing_msg.delete()
            
            logger.info(f"Successfully extracted audio from {platform}: {url}")
        else:
            await processing_msg.edit_text(
                text=get_text(context, 'error_extracting_audio')
            )
            
    except Exception as e:
        logger.error(f"Error extracting audio: {e}")
        await processing_msg.edit_text(
            text=get_text(context, 'error_extracting_audio')
        )
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if temp_dir and os.path.exists(temp_dir):
            import shutil
            try:
                shutil.rmtree(temp_dir)
            except:
                pass


async def cancel_video_download(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
    # –û—á–∏—â–∞–µ–º user_data
    context.user_data.pop('video_url', None)
    context.user_data.pop('video_platform', None)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from .subscription import show_main_menu
    await show_main_menu(update, context)
    
    return ConversationHandler.END
