"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
"""

import os
import logging
import asyncio
import zipfile
import tempfile
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode
from utils import create_multiple_unique_images, create_multiple_unique_videos
from utils.localization import get_text
import config

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_FILE = 0
WAITING_FOR_COPIES = 1


async def start_uniqizer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [[InlineKeyboardButton(get_text(context, 'back'), callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
    await query.message.reply_text(
        text=get_text(context, 'upload_file'),
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return WAITING_FOR_FILE


async def copies_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π"""
    message = update.message
    text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
    try:
        copies = int(text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        if copies < 1 or copies > 25:
            keyboard = [[InlineKeyboardButton(get_text(context, 'back'), callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await message.reply_text(
                text=get_text(context, 'invalid_copies_number'),
                reply_markup=reply_markup
            )
            return WAITING_FOR_COPIES
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π
        context.user_data['copies_count'] = copies
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ
        file_obj = context.user_data.get('file_obj')
        file_name = context.user_data.get('file_name')
        is_compressed = context.user_data.get('is_compressed', False)
        
        if not file_obj or not file_name:
            await message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return ConversationHandler.END
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        processing_msg = await message.reply_text(
            text=f"üîÑ –°–æ–∑–¥–∞–µ–º {copies} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π..."
        )
        
        # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞
        return await process_media_file(update, context, file_obj, file_name, processing_msg, is_compressed)
        
    except ValueError:
        # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ
        keyboard = [[InlineKeyboardButton(get_text(context, 'back'), callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await message.reply_text(
            text=get_text(context, 'invalid_copies_number'),
            reply_markup=reply_markup
        )
        return WAITING_FOR_COPIES


async def wrong_media_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∂–∞—Ç–æ–≥–æ –º–µ–¥–∏–∞ (–≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ –Ω–µ –∫–∞–∫ —Ñ–∞–π–ª)"""
    message = update.message
    user = update.effective_user
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ–±—ä–µ–∫—Ç
    if message.video:
        media_type = "–≤–∏–¥–µ–æ"
        file_obj = message.video
        file_name = f"video_{user.id}_{message.message_id}.mp4"
    elif message.photo:
        media_type = "—Ñ–æ—Ç–æ"
        file_obj = message.photo[-1]
        file_name = f"photo_{user.id}_{message.message_id}.jpg"
    else:
        await message.reply_text(text=get_text(context, 'error_no_file'))
        return WAITING_FOR_FILE
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–æ—Ç–∏–≤ –Ω–∞—à–∏—Ö –ª–∏–º–∏—Ç–æ–≤
    if file_obj.file_size > config.MAX_FILE_SIZE:
        max_size_mb = config.MAX_FILE_SIZE // (1024 * 1024)
        await message.reply_text(text=get_text(context, 'error_file_too_large', max_size=max_size_mb))
        return WAITING_FOR_FILE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    context.user_data['file_obj'] = file_obj
    context.user_data['file_name'] = file_name
    context.user_data['is_compressed'] = True
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π
    keyboard = [[InlineKeyboardButton(get_text(context, 'back'), callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_text(
        text=get_text(context, 'choose_copies'),
        reply_markup=reply_markup
    )
    
    return WAITING_FOR_COPIES


async def process_media_file(update: Update, context: ContextTypes.DEFAULT_TYPE, file_obj, file_name: str, processing_msg=None, is_compressed: bool = False) -> int:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    message = update.message
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π
    copies_count = context.user_data.get('copies_count', 1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)
    if not processing_msg:
        processing_msg = await message.reply_text(text=get_text(context, 'processing', count=copies_count))
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            from utils.smart_compressor import compress_for_telegram, compress_video_ffmpeg, compress_image_pillow
            
            input_path = None
            file_size_mb = file_obj.file_size / (1024 * 1024)
            
            # Progress callback - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            async def progress_callback(stage, info):
                # –ù–∏–∫–∞–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–∂–∞—Ç–∏–∏ - –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                pass
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–∂–∞—Ç–∏–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            input_path, error = await compress_for_telegram(
                bot=context.bot,
                file_id=file_obj.file_id,
                original_filename=file_name,
                progress_callback=progress_callback
            )
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å - –æ—à–∏–±–∫–∞
            if not input_path:
                await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞")
                return WAITING_FOR_FILE
            
            # –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - —Å–∂–∞—Ç–∏–µ —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_extension = input_path.suffix.lower()
            is_video = file_extension in config.SUPPORTED_VIDEO_FORMATS or file_name.endswith('.mp4')
            is_image = file_extension in config.SUPPORTED_IMAGE_FORMATS or file_name.endswith('.jpg')
            
            if not is_video and not is_image:
                await processing_msg.edit_text(text=get_text(context, 'error_unsupported_format'))
                return WAITING_FOR_FILE
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            output_dir = temp_path / 'output'
            output_dir.mkdir(exist_ok=True)
            
            logger.info(f"User {user.id} uploaded {file_name} ({file_obj.file_size} bytes, compressed: {is_compressed})")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            if is_video:
                # Callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                async def progress_callback(current, total):
                    await processing_msg.edit_text(
                        text=get_text(context, 'processing_video', current=current, total=total)
                    )
                
                results = await create_multiple_unique_videos(
                    str(input_path),
                    str(output_dir),
                    copies_count,
                    config.VIDEO_UNIQUENESS_PARAMS,
                    progress_callback
                )
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                await processing_msg.edit_text(
                    text=get_text(context, 'processing_image', current=1, total=copies_count)
                )
                
                results = create_multiple_unique_images(
                    str(input_path),
                    str(output_dir),
                    copies_count,
                    config.IMAGE_UNIQUENESS_PARAMS
                )
            
            # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await processing_msg.edit_text(text=get_text(context, 'creating_archive'))
            
            zip_path = temp_path / f"unique_{user.id}.zip"
            with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for result_path in results:
                    arcname = os.path.basename(result_path)
                    zipf.write(result_path, arcname)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await processing_msg.delete()
            
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π
            caption_text = get_text(context, 'success', count=len(results))
            
            with open(zip_path, 'rb') as zip_file:
                await message.reply_document(
                    document=zip_file,
                    filename=f"unique_files_{copies_count}.zip",
                    caption=caption_text
                )
            
            logger.info(f"Successfully processed {file_name} for user {user.id}, created {len(results)} copies")
            
    except Exception as e:
        logger.error(f"Error processing media file: {e}")
        
        # –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await processing_msg.edit_text(
            text=f"‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞**\n\n"
                 f"üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                 f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞\n"
                 f"‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞\n"
                 f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑\n\n"
                 f"üí≠ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        )
        return WAITING_FOR_FILE
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
    keyboard = [[
        InlineKeyboardButton(get_text(context, 'uniqueness_tool'), callback_data='uniqueness_tool'),
        InlineKeyboardButton(get_text(context, 'main_menu'), callback_data='main_menu')
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_text(
        text=get_text(context, 'uniqueness_more_or_menu'),
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END


async def file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
    if not message.document:
        await message.reply_text(text=get_text(context, 'error_no_file'))
        return WAITING_FOR_FILE
    
    document = message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–æ—Ç–∏–≤ –Ω–∞—à–∏—Ö –ª–∏–º–∏—Ç–æ–≤
    if document.file_size > config.MAX_FILE_SIZE:
        max_size_mb = config.MAX_FILE_SIZE // (1024 * 1024)
        await message.reply_text(text=get_text(context, 'error_file_too_large', max_size=max_size_mb))
        return WAITING_FOR_FILE
    
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    file_extension = Path(document.file_name).suffix.lower()
    is_video = file_extension in config.SUPPORTED_VIDEO_FORMATS
    is_image = file_extension in config.SUPPORTED_IMAGE_FORMATS
    
    if not is_video and not is_image:
        await message.reply_text(text=get_text(context, 'error_unsupported_format'))
        return WAITING_FOR_FILE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    context.user_data['file_obj'] = document
    context.user_data['file_name'] = document.file_name
    context.user_data['is_compressed'] = False
    
    # –¢–µ–ø–µ—Ä—å —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π
    keyboard = [[InlineKeyboardButton(get_text(context, 'back'), callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_text(
        text=get_text(context, 'choose_copies'),
        reply_markup=reply_markup
    )
    
    return WAITING_FOR_COPIES


async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    # –û—á–∏—â–∞–µ–º user_data
    context.user_data.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from .subscription import show_main_menu
    await show_main_menu(update, context)
    
    return ConversationHandler.END


async def main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º user_data –∫—Ä–æ–º–µ —è–∑—ã–∫–∞
    lang = context.user_data.get('language')
    context.user_data.clear()
    if lang:
        context.user_data['language'] = lang
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from .subscription import show_main_menu
    await show_main_menu(update, context)
    
    return ConversationHandler.END
