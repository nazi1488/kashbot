"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ ROI-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–≤
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode
from utils.localization import get_text
from .roi.states import ROIStates
from .roi.validators import validate_number
from .roi.metrics import ROIMetrics

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
SKIP_BUTTON = "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
CANCEL_BUTTON = "‚ùå –û—Ç–º–µ–Ω–∞"

def get_input_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
    keyboard = [
        [KeyboardButton(SKIP_BUTTON)],
        [KeyboardButton(CANCEL_BUTTON)]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

async def roi_calculator_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'ROI-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'"""
    query = update.callback_query
    await query.answer()
    
    # –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    if 'event_tracker' in context.bot_data:
        await context.bot_data['event_tracker'].track_event(update, context, 'command', 'roi_calculator')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['roi_data'] = {}
    
    text = (
        "üìä **ROI-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–∞**\n\n"
        "üí° **–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ?**\n"
        "–≠—Ç–æ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—á–∏—Ç–∞–µ—Ç –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏. "
        "–í–≤–æ–¥–∏ —Ü–∏—Ñ—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏. –ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Ü–∏—Ñ—Ä—ã –Ω–µ—Ç ‚Äî –∂–º–∏ **–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å**.\n\n"
        "üìà **–ß—Ç–æ –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å:**\n"
        "‚Ä¢ ROI, –ø—Ä–æ—Ñ–∏—Ç, ROAS\n"
        "‚Ä¢ CTR, CPC, CPA, CPM\n"
        "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏ —Å—Ä–µ–¥–Ω–∏–µ —á–µ–∫–∏\n\n"
        "‚ö° –ó–∞–π–º–µ—Ç 2 –º–∏–Ω—É—Ç—ã, –ø–æ–ª—É—á–∏—à—å –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É!"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç", callback_data='roi_start')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return ROIStates.MENU.value

async def roi_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö - –ø–µ—Ä–≤—ã–π —à–∞–≥ (—Ä–∞—Å—Ö–æ–¥)"""
    query = update.callback_query
    await query.answer()
    
    text = (
        "üí∞ **–®–∞–≥ 1/6: –†–∞—Å—Ö–æ–¥**\n\n"
        "–°–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ —Ä–µ–∫–ª–∞–º—É? (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö)\n\n"
        "üí° *–ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞:*\n"
        "`1500`, `1,500`, `1 500`, `1500.50`"
    )
    
    await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:",
        reply_markup=get_input_keyboard()
    )
    
    return ROIStates.INPUT_SPEND.value

async def input_spend(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —Ä–∞—Å—Ö–æ–¥–∞"""
    text = update.message.text
    
    if text == CANCEL_BUTTON:
        return await cancel_roi(update, context)
    
    if text == SKIP_BUTTON:
        context.user_data['roi_data']['spend'] = None
    else:
        is_valid, number, error = validate_number(text, "—Ä–∞—Å—Ö–æ–¥")
        if not is_valid:
            await update.message.reply_text(error, reply_markup=get_input_keyboard())
            return ROIStates.INPUT_SPEND.value
        context.user_data['roi_data']['spend'] = number
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    text = (
        "üíµ **–®–∞–≥ 2/6: –î–æ—Ö–æ–¥**\n\n"
        "–°–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª —Å —ç—Ç–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞?\n\n"
        "üí° *–≠—Ç–æ –≤—ã—Ä—É—á–∫–∞ –æ—Ç –ø—Ä–æ–¥–∞–∂, –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –≤—ã–ø–ª–∞—Ç—ã –∏ —Ç.–¥.*"
    )
    
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=get_input_keyboard())
    
    return ROIStates.INPUT_INCOME.value

async def input_income(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –¥–æ—Ö–æ–¥–∞"""
    text = update.message.text
    
    if text == CANCEL_BUTTON:
        return await cancel_roi(update, context)
    
    if text == SKIP_BUTTON:
        context.user_data['roi_data']['income'] = None
    else:
        is_valid, number, error = validate_number(text, "–¥–æ—Ö–æ–¥")
        if not is_valid:
            await update.message.reply_text(error, reply_markup=get_input_keyboard())
            return ROIStates.INPUT_INCOME.value
        context.user_data['roi_data']['income'] = number
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    text = (
        "üëÅ **–®–∞–≥ 3/6: –ü–æ–∫–∞–∑—ã**\n\n"
        "–°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–æ–≤ —Ä–µ–∫–ª–∞–º—ã?\n\n"
        "üí° *Impressions –≤ —Ä–µ–∫–ª–∞–º–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ*"
    )
    
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=get_input_keyboard())
    
    return ROIStates.INPUT_SHOWS.value

async def input_shows(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–∫–∞–∑–æ–≤"""
    text = update.message.text
    
    if text == CANCEL_BUTTON:
        return await cancel_roi(update, context)
    
    if text == SKIP_BUTTON:
        context.user_data['roi_data']['shows'] = None
    else:
        is_valid, number, error = validate_number(text, "–ø–æ–∫–∞–∑—ã")
        if not is_valid:
            await update.message.reply_text(error, reply_markup=get_input_keyboard())
            return ROIStates.INPUT_SHOWS.value
        context.user_data['roi_data']['shows'] = number
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    text = (
        "üëÜ **–®–∞–≥ 4/6: –ö–ª–∏–∫–∏**\n\n"
        "–°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∫–ª–∏–∫–æ–≤ –ø–æ —Ä–µ–∫–ª–∞–º–µ?\n\n"
        "üí° *Clicks –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ*"
    )
    
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=get_input_keyboard())
    
    return ROIStates.INPUT_CLICKS.value

async def input_clicks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∫–ª–∏–∫–æ–≤"""
    text = update.message.text
    
    if text == CANCEL_BUTTON:
        return await cancel_roi(update, context)
    
    if text == SKIP_BUTTON:
        context.user_data['roi_data']['clicks'] = None
    else:
        is_valid, number, error = validate_number(text, "–∫–ª–∏–∫–∏")
        if not is_valid:
            await update.message.reply_text(error, reply_markup=get_input_keyboard())
            return ROIStates.INPUT_CLICKS.value
        context.user_data['roi_data']['clicks'] = number
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    text = (
        "üìù **–®–∞–≥ 5/6: –ó–∞—è–≤–∫–∏ (–ª–∏–¥—ã)**\n\n"
        "–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?\n\n"
        "üí° *Leads, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏ —Ç.–¥.*"
    )
    
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=get_input_keyboard())
    
    return ROIStates.INPUT_LEADS.value

async def input_leads(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∑–∞—è–≤–æ–∫"""
    text = update.message.text
    
    if text == CANCEL_BUTTON:
        return await cancel_roi(update, context)
    
    if text == SKIP_BUTTON:
        context.user_data['roi_data']['leads'] = None
    else:
        is_valid, number, error = validate_number(text, "–∑–∞—è–≤–∫–∏")
        if not is_valid:
            await update.message.reply_text(error, reply_markup=get_input_keyboard())
            return ROIStates.INPUT_LEADS.value
        context.user_data['roi_data']['leads'] = number
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    text = (
        "üí∞ **–®–∞–≥ 6/6: –ü—Ä–æ–¥–∞–∂–∏**\n\n"
        "–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –∫—É–ø–∏–ª–∏/–æ–ø–ª–∞—Ç–∏–ª–∏?\n\n"
        "üí° *–§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: –ø–æ–∫—É–ø–∫–∏, –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã*"
    )
    
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=get_input_keyboard())
    
    return ROIStates.INPUT_SALES.value

async def input_sales(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø—Ä–æ–¥–∞–∂ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    text = update.message.text
    
    if text == CANCEL_BUTTON:
        return await cancel_roi(update, context)
    
    if text == SKIP_BUTTON:
        context.user_data['roi_data']['sales'] = None
    else:
        is_valid, number, error = validate_number(text, "–ø—Ä–æ–¥–∞–∂–∏")
        if not is_valid:
            await update.message.reply_text(error, reply_markup=get_input_keyboard())
            return ROIStates.INPUT_SALES.value
        context.user_data['roi_data']['sales'] = number
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await update.message.reply_text(
        "üßÆ –°—á–∏—Ç–∞—é –º–µ—Ç—Ä–∏–∫–∏...", 
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    return await show_results(update, context)

async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞"""
    roi_data = context.user_data.get('roi_data', {})
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏ —Å—á–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    calculator = ROIMetrics(roi_data)
    results_card = calculator.format_results_card()
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    keyboard = [
        [InlineKeyboardButton("üîÅ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='roi_calculator')],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        text=results_card,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('roi_data', None)
    
    logger.info(f"ROI calculation completed for user {update.effective_user.id}")
    
    return ConversationHandler.END

async def cancel_roi(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç ROI"""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('roi_data', None)
    
    await update.message.reply_text(
        "‚ùå –†–∞—Å—á–µ—Ç ROI –æ—Ç–º–µ–Ω–µ–Ω", 
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from .subscription import show_main_menu
    await show_main_menu(update, context)
    
    return ConversationHandler.END
