"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Å Celery
"""

import os
import logging
import tempfile
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode

from celery_app import app as celery_app
from tasks.video_tasks import process_video_uniqueness_task
from tasks.image_tasks import process_image_uniqueness_task
from utils.localization import get_text
from utils import is_video_file, is_image_file
import config

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_COPIES, WAITING_FOR_FILE = range(2)


async def uniqueness_tool_callback_async(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä' —Å Celery"""
    query = update.callback_query
    await query.answer()
    
    # –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    if 'event_tracker' in context.bot_data:
        await context.bot_data['event_tracker'].track_event(update, context, 'command', 'uniqueness_tool')
    
    text = get_text(context, 'copies_prompt')
    await query.edit_message_text(text=text)
    
    return WAITING_FOR_COPIES


async def process_media_file_async(
    message,
    document=None,
    file_obj=None,
    file_name: str = None,
    context: ContextTypes.DEFAULT_TYPE = None,
    is_compressed: bool = False
) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ Celery"""
    
    user = message.from_user
    copies_count = context.user_data.get('copies_count', 3)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if document:
        file_to_process = document
        file_name = file_name or document.file_name
    else:
        file_to_process = file_obj
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
    if file_to_process.file_size > config.MAX_FILE_SIZE:
        max_size_mb = config.MAX_FILE_SIZE // (1024 * 1024)
        await message.reply_text(text=get_text(context, 'error_file_too_large', max_size=max_size_mb))
        return WAITING_FOR_FILE
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    is_video = is_video_file(file_name)
    is_image = is_image_file(file_name)
    
    if not is_video and not is_image:
        await message.reply_text(text=get_text(context, 'error_unsupported_format'))
        return WAITING_FOR_FILE
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
    processing_msg = await message.reply_text(
        text="‚è≥ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏...\n"
             "üìä –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã..."
    )
    
    temp_dir = None
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        temp_dir = tempfile.mkdtemp(prefix=f"unique_{user.id}_")
        input_path = Path(temp_dir) / file_name
        
        file_download = await file_to_process.get_file()
        await file_download.download_to_drive(str(input_path))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ Celery
        if is_video:
            task = process_video_uniqueness_task.apply_async(
                args=[],
                kwargs={
                    'file_path': str(input_path),
                    'copies_count': copies_count,
                    'user_id': user.id,
                    'chat_id': message.chat_id,
                    'message_id': processing_msg.message_id,
                },
                queue='video',
                priority=5
            )
        else:
            task = process_image_uniqueness_task.apply_async(
                args=[],
                kwargs={
                    'file_path': str(input_path),
                    'copies_count': copies_count,
                    'user_id': user.id,
                    'chat_id': message.chat_id,
                    'message_id': processing_msg.message_id,
                },
                queue='image',
                priority=3
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º task_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        context.user_data[f'task_{task.id}'] = {
            'type': 'uniqueness',
            'file_type': 'video' if is_video else 'image',
            'temp_dir': temp_dir
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–µ
        await processing_msg.edit_text(
            text=f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å!\n\n"
                 f"üÜî ID –∑–∞–¥–∞—á–∏: `{task.id[:8]}...`\n"
                 f"üìÅ –¢–∏–ø: {'–í–∏–¥–µ–æ' if is_video else '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}\n"
                 f"üî¢ –ö–æ–ø–∏–π: {copies_count}\n\n"
                 f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç...\n"
                 f"üí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á–∏
        context.application.create_task(
            monitor_task_progress(
                task_id=task.id,
                message=message,
                processing_msg=processing_msg,
                context=context
            )
        )
        
    except Exception as e:
        logger.error(f"Error processing file for user {user.id}: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if temp_dir and os.path.exists(temp_dir):
            import shutil
            shutil.rmtree(temp_dir, ignore_errors=True)
        
        await processing_msg.edit_text(
            text=get_text(context, 'error_processing')
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard = [[
        InlineKeyboardButton(get_text(context, 'uniqueness_tool'), callback_data='uniqueness_tool'),
        InlineKeyboardButton(get_text(context, 'main_menu'), callback_data='main_menu')
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_text(
        text=get_text(context, 'uniqueness_more_or_menu'),
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END


async def monitor_task_progress(
    task_id: str,
    message,
    processing_msg,
    context: ContextTypes.DEFAULT_TYPE
):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ Celery –∑–∞–¥–∞—á–∏"""
    import asyncio
    from celery.result import AsyncResult
    
    try:
        task = AsyncResult(task_id, app=celery_app)
        last_status = None
        
        while not task.ready():
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            if task.state == 'PROCESSING':
                info = task.info
                if info and info != last_status:
                    last_status = info
                    current = info.get('current', 0)
                    total = info.get('total', 0)
                    status = info.get('status', '–û–±—Ä–∞–±–æ—Ç–∫–∞...')
                    
                    progress_text = f"‚öôÔ∏è {status}\n"
                    if total > 0:
                        progress_bar = create_progress_bar(current, total)
                        progress_text += f"{progress_bar} {current}/{total}"
                    
                    try:
                        await processing_msg.edit_text(progress_text)
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
            await asyncio.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        
        # –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        result = task.get()
        
        if result.get('success'):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            zip_path = result.get('zip_path')
            count = result.get('count', 0)
            
            if zip_path and os.path.exists(zip_path):
                await processing_msg.delete()
                
                with open(zip_path, 'rb') as zip_file:
                    await message.reply_document(
                        document=zip_file,
                        filename=f"unique_files_{count}.zip",
                        caption=get_text(context, 'success', count=count)
                    )
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                temp_dir = result.get('temp_dir')
                if temp_dir and os.path.exists(temp_dir):
                    import shutil
                    shutil.rmtree(temp_dir, ignore_errors=True)
        else:
            # –û—à–∏–±–∫–∞
            error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await processing_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {error}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        context.user_data.pop(f'task_{task_id}', None)
        
    except Exception as e:
        logger.error(f"Error monitoring task {task_id}: {e}")
        await processing_msg.edit_text(
            text="‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∑–∂–µ."
        )


def create_progress_bar(current: int, total: int, length: int = 10) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if total == 0:
        return "‚¨ú" * length
    
    filled = int(length * current / total)
    bar = "üü©" * filled + "‚¨ú" * (length - filled)
    percent = int(100 * current / total)
    
    return f"{bar} {percent}%"
