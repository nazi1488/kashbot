"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils import check_subscription
from utils.localization import get_text
import config

logger = logging.getLogger(__name__)


async def check_subscription_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é"""
    user = update.effective_user
    
    logger.info(f"Checking subscription for user {user.id} to channel {config.CHANNEL_USERNAME}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    is_subscribed = await check_subscription(
        context.bot,
        user.id,
        config.CHANNEL_USERNAME
    )
    
    if is_subscribed:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context)
    else:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—å–±—É –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        keyboard = [[
            InlineKeyboardButton(
                get_text(context, 'check_subscription'),
                callback_data='check_subscription'
            )
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = get_text(
            context,
            'subscription_required',
            channel=config.CHANNEL_USERNAME
        )
        
        if update.callback_query:
            await update.callback_query.message.reply_text(
                message_text,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup
            )


async def check_subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    is_subscribed = await check_subscription(
        context.bot,
        user.id,
        config.CHANNEL_USERNAME
    )
    
    if is_subscribed:
        # –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
        await query.edit_message_text(
            text=get_text(context, 'subscription_verified')
        )
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context)
    else:
        # –í—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        keyboard = [[
            InlineKeyboardButton(
                get_text(context, 'check_subscription'),
                callback_data='check_subscription'
            )
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=get_text(
                context,
                'subscription_required',
                channel=config.CHANNEL_USERNAME
            ),
            reply_markup=reply_markup
        )


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton(
            get_text(context, 'uniqueness_tool'),
            callback_data='uniqueness_tool'
        )],
        [InlineKeyboardButton(
            get_text(context, 'hide_text'),
            callback_data='hide_text'
        )],
        [InlineKeyboardButton(
            get_text(context, 'smart_compress'),
            callback_data='smart_compress'
        )],
        [InlineKeyboardButton(
            get_text(context, 'video_downloader'),
            callback_data='video_downloader'
        )],
        [InlineKeyboardButton(
            get_text(context, 'totp_generator'),
            callback_data='totp_menu'
        )],
        [InlineKeyboardButton(
            get_text(context, 'roi_calculator'),
            callback_data='roi_calculator'
        )],
        [InlineKeyboardButton(
            get_text(context, 'gmail_aliases'),
            callback_data='gmail_menu'
        )],
        [InlineKeyboardButton(
            "üì© –í—Ä–µ–º–µ–Ω–Ω–∞—è –ü–æ—á—Ç–∞",
            callback_data='kashmail_menu'
        )],
        [InlineKeyboardButton(
            "üë§ Random Face",
            callback_data='random_face_menu'
        )],
        [InlineKeyboardButton(
            get_text(context, 'keitaro_menu'),
            callback_data='keitaro_menu'
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = get_text(context, 'welcome')
    
    if update.callback_query:
        await update.callback_query.message.reply_text(
            message_text,
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup
        )
