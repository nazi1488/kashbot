"""
–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –±–æ—Ç–∞
"""

import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler, MessageHandler, filters, ConversationHandler
from telegram.constants import ParseMode
from typing import List, Dict, Any

from analytics import Analytics
from database import Database
from utils.localization import get_text
import config

logger = logging.getLogger(__name__)


class AdminPanel:
    """–ö–ª–∞—Å—Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    BROADCAST_TYPE, BROADCAST_CONTENT, BROADCAST_CONFIRM = range(3)
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è cookies
    COOKIES_INPUT = 4

    def __init__(self, database: Database):
        self.db = database
        self.analytics = Analytics(database)
        self.broadcast_data: Dict[str, Any] = {}

    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        admin_ids = config.BOT_ADMINS or []
        return user_id in admin_ids
    
    async def show_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        user_id = update.effective_user.id
        if not self.is_admin(user_id):
            await update.effective_message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
            return
        
        keyboard = [
            [InlineKeyboardButton("üìä –ú–µ—Ç—Ä–∏–∫–∏", callback_data="admin_metrics")],
            [InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_detailed")],
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton("üç™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Cookies", callback_data="admin_cookies")],
            [InlineKeyboardButton("‚öôÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="admin_status")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üîß **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def show_metrics(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–µ—Ç—Ä–∏–∫–∏...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            dau_wau_mau = await self.analytics.get_dau_wau_mau()
            total_users = await self.analytics.get_total_users()
            retention = {
                'D1': await self.analytics.get_average_retention(1, 30),
                'D7': await self.analytics.get_average_retention(7, 30),
                'D30': await self.analytics.get_average_retention(30, 30)
            }
            churn_rate = await self.analytics.get_churn_rate(30)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            text = f"""üìä **–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞**

üéØ **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ **DAU: {dau_wau_mau['DAU']}** - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
‚Ä¢ **WAU: {dau_wau_mau['WAU']}** - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
‚Ä¢ **MAU: {dau_wau_mau['MAU']}** - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π

üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ **–í—Å–µ–≥–æ: {total_users['total']}** - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ **–ê–∫—Ç–∏–≤–Ω—ã—Ö: {total_users['active']}** - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏–µ –±–æ—Ç–∞
‚Ä¢ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {total_users['blocked']}** - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏–µ –±–æ—Ç–∞

üîÑ **Retention (—É–¥–µ—Ä–∂–∞–Ω–∏–µ):**
‚Ä¢ **D1: {retention['D1']}%** - –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å 100 —á–µ–ª, –∞ –≤–µ—Ä–Ω—É–ª–æ—Å—å 70 = 70%
‚Ä¢ **D7: {retention['D7']}%** - –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  –ü—Ä–∏–º–µ—Ä: –∏–∑ 100 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –æ—Å—Ç–∞–ª–æ—Å—å 25 = 25%
‚Ä¢ **D30: {retention['D30']}%** - –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  –ü—Ä–∏–º–µ—Ä: –∏–∑ 100 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü –æ—Å—Ç–∞–ª–æ—Å—å 10 = 10%

üìâ **Churn Rate: {churn_rate}%** - –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—à–µ–¥—à–∏—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
  –ü—Ä–∏–º–µ—Ä: –∏–∑ 100 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 5 —É—à–ª–∏ = 5% –æ—Ç—Ç–æ–∫–∞

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:** 16 –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
‚Ä¢ –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä, –°–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞, –°–∂–∞—Ç–∏–µ —Ñ–∞–π–ª–æ–≤
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ (TikTok/YT/Instagram)  
‚Ä¢ 2FA –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, Gmail-–∞–ª–∏–∞—Å—ã, –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—á—Ç–∞
‚Ä¢ Random Face –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, Keitaro –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
‚Ä¢ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å, –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å, –ê–Ω–∞–ª–∏—Ç–∏–∫–∞

_–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M')}_"""
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Error showing metrics: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç—Ä–∏–∫")
    
    async def show_detailed_analytics(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ (–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º)
            command_usage = await self.analytics.get_command_usage(30)
            top_commands = command_usage  # –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∞ –Ω–µ —Ç–æ–ø-10
            
            # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            new_users_data = await self.analytics.get_new_users(7)
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
            hourly_activity = await self.analytics.get_hourly_activity(7)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç (—É–±–∏—Ä–∞–µ–º markdown –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
            text = "üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"

            # –¢–æ–ø –∫–æ–º–∞–Ω–¥
            text += "üéØ –¢–æ–ø —Ñ—É–Ω–∫—Ü–∏–π (30 –¥–Ω–µ–π):\n"
            if top_commands:
                for i, (cmd, count) in enumerate(top_commands, 1):
                    cmd_name = {
                        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                        '/start': 'üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞',
                        'uniqueness_tool': 'üé® –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä',
                        'hide_text': 'ü•∑ –°–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞', 
                        'smart_compress': 'üìâ –£–º–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –¥–ª—è FB',
                        'video_downloader': 'üé¨ –°–∫–∞—á–∞—Ç—å TikTok Reels Shorts',
                        'totp_menu': 'üîê 2FA –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä',
                        'gmail_aliases': 'üìß Gmail-–∑–µ—Ä–∫–∞–ª–æ',
                        'gmail_menu': 'üìß Gmail-–∑–µ—Ä–∫–∞–ª–æ',
                        'kashmail_menu': 'üì© –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—á—Ç–∞',
                        'random_face_menu': 'üë§ Random Face',
                        'keitaro_menu': 'üíö Keitaro —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                        
                        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
                        'language_selection': 'üåê –í—ã–±–æ—Ä —è–∑—ã–∫–∞',
                        'main_menu': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                        'back': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                        
                        # –Ø–∑—ã–∫–∏
                        'lang_uk': 'üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫',
                        'lang_ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫', 
                        'lang_en': 'üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫',
                        
                        # –ü–æ–¥–ø–∏—Å–∫–∞
                        'check_subscription': '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
                        'subscription_verified': '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
                        
                        # –í–∏–¥–µ–æ —Ñ—É–Ω–∫—Ü–∏–∏
                        'download_video': 'üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ',
                        'download_audio': 'üéµ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ',
                        
                        # TOTP —Ñ—É–Ω–∫—Ü–∏–∏
                        'totp_generate_new': 'üîÑ –ù–æ–≤—ã–π 2FA –∫–æ–¥',
                        'totp_custom_secret': '‚öôÔ∏è –°–≤–æ–π —Å–µ–∫—Ä–µ—Ç 2FA',
                        'totp_refresh': 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥',
                        'totp_qr_code': 'üì± QR –∫–æ–¥',
                        
                        # Gmail —Ñ—É–Ω–∫—Ü–∏–∏  
                        'generate_aliases': 'üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–ª–∏–∞—Å—ã',
                        'back_to_gmail': 'üîô –ö Gmail-–∑–µ—Ä–∫–∞–ª—É',
                        
                        # Keitaro —Ñ—É–Ω–∫—Ü–∏–∏
                        'keitaro_create': '‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å',
                        'keitaro_copy_url': 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL',
                        'keitaro_test': 'üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                        'keitaro_toggle': 'üîÑ –í–∫–ª/–í—ã–∫–ª –ø—Ä–æ—Ñ–∏–ª—å',
                        'keitaro_howto': 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
                        
                        # –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
                        '/admin': '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å',
                        '/stats': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                        'admin_metrics': 'üìä –ê–¥–º–∏–Ω –º–µ—Ç—Ä–∏–∫–∏',
                        'admin_detailed': 'üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
                        'admin_users': 'üë• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö',
                        'admin_broadcast': 'üì® –†–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–æ–≤',
                        'admin_cookies': 'üç™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É–∫–∞–º–∏',
                        'admin_status': '‚öôÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã'
                    }.get(cmd, f'üì± {str(cmd)}')
                    text += f"{i}. {cmd_name}: {count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"
            else:
                text += "üìä –î–∞–Ω–Ω—ã–µ –∑–∞ 30 –¥–Ω–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"

            # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            text += "\nüìÖ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (7 –¥–Ω–µ–π):\n"
            if new_users_data:
                total_new = sum(count for _, count in new_users_data)
                text += f"‚Ä¢ –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö: {total_new}\n"
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
                for date_str, count in new_users_data[:3]:
                    text += f"‚Ä¢ {date_str}: +{count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            else:
                text += "üìä –î–∞–Ω–Ω—ã–µ –∑–∞ 7 –¥–Ω–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"

            # –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã
            text += "\n‚è∞ –ü–∏–∫–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (7 –¥–Ω–µ–π):\n"
            if hourly_activity:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–µ–π—Å—Ç–≤–∏–π (hourly_activity —É–∂–µ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π)
                sorted_hours = sorted(hourly_activity, key=lambda x: x[1], reverse=True)[:3]
                for hour, count in sorted_hours:
                    if count > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        text += f"‚Ä¢ {hour:02d}:00 - {count} –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                if not any(count > 0 for _, count in hourly_activity):
                    text += "üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
            else:
                text += "üìä –î–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Keitaro –ø—Ä–æ—Ñ–∏–ª–µ–π —á–µ—Ä–µ–∑ ORM
                with self.db.get_session() as db_session:
                    from database.models import KeitaroProfile
                    keitaro_count = db_session.query(KeitaroProfile).filter(KeitaroProfile.enabled == True).count()
                    if keitaro_count > 0:
                        text += f"\nüíö Keitaro –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:\n‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {keitaro_count}\n"
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π Keitaro –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
                    from database.models import KeitaroEvent
                    cutoff_date = datetime.utcnow() - timedelta(days=7)
                    events_count = db_session.query(KeitaroEvent).filter(KeitaroEvent.created_at >= cutoff_date).count()
                    if events_count > 0:
                        text += f"‚Ä¢ –°–æ–±—ã—Ç–∏—è –∑–∞ 7 –¥–Ω–µ–π: {events_count}\n"
            except Exception:
                # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                pass
            
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
            text += "\nüîß –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n"
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            text += "\nüì± **–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:**\n"
            text += "‚Ä¢ üé® –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (1-25 –∫–æ–ø–∏–π)\n"
            text += "‚Ä¢ üìù –°–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–≤–∏–¥–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏\n" 
            text += "‚Ä¢ üóú –£–º–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –¥–ª—è Facebook Ads\n"
            text += "‚Ä¢ üé¨ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ (TikTok/YT/Instagram)\n"
            
            # –£—Ç–∏–ª–∏—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
            text += "\nüõ† **–£—Ç–∏–ª–∏—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã:**\n"
            text += "‚Ä¢ üîê 2FA TOTP –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å QR-–∫–æ–¥–∞–º–∏\n"
            text += "‚Ä¢ üìß Gmail-–∞–ª–∏–∞—Å—ã (dot-trick + –ø–ª—é—Å—ã)\n"
            text += "‚Ä¢ üì© –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–∂–∏–¥–∞–Ω–∏–µ–º\n"
            text += "‚Ä¢ üë§ Random Face –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (AI –ª–∏—Ü–∞)\n"
            
            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            text += "\nüîó **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:**\n"
            text += "‚Ä¢ üíö Keitaro ‚Üí Telegram (S2S Postback)\n"
            text += "‚Ä¢ üåê –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å (RU/UA/EN)\n"
            text += "‚Ä¢ ‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å –ø–æ–ª–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π\n"
            text += "‚Ä¢ üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª\n"
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            text += "\n‚öôÔ∏è **–°–∏—Å—Ç–µ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            text += "‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            text += "‚Ä¢ üóÉ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π\n"
            text += "‚Ä¢ üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤\n"
            text += "‚Ä¢ üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
            
            text += f"\nüí° –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"Error showing detailed analytics: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    
    async def show_users_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""
        query = update.callback_query
        await query.answer()
        
        try:
            total_users = await self.analytics.get_total_users()
            
            # –°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (get_users_for_broadcast –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
            all_users_list = await self.analytics.get_users_for_broadcast()
            all_users = len(all_users_list)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            from datetime import datetime, timedelta
            now = datetime.now()
            active_7d = len([u for u in all_users_list if u['last_seen'] and (now - u['last_seen']).days <= 7])
            active_30d = len([u for u in all_users_list if u['last_seen'] and (now - u['last_seen']).days <= 30])
            inactive_7d = len([u for u in all_users_list if u['last_seen'] and (now - u['last_seen']).days > 7])
            
            text = f"""üë• **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö**

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ **–í—Å–µ–≥–æ: {total_users['total']}** - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ **–ê–∫—Ç–∏–≤–Ω—ã—Ö: {total_users['active']}** - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏–µ –±–æ—Ç–∞
‚Ä¢ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {total_users['blocked']}** - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏–µ –±–æ—Ç–∞

üéØ **–°–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:**
‚Ä¢ **–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ: {all_users}** - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º –±–æ—Ç–æ–º
‚Ä¢ **–ê–∫—Ç–∏–≤–Ω—ã–µ 7–¥: {active_7d}** - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
‚Ä¢ **–ê–∫—Ç–∏–≤–Ω—ã–µ 30–¥: {active_30d}** - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
‚Ä¢ **–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ 7–¥: {inactive_7d}** - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–ª–µ–µ 7 –¥–Ω–µ–π

üí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ–≥–º–µ–Ω—Ç—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:**
‚Ä¢ "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ" - –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ "–ê–∫—Ç–∏–≤–Ω—ã–µ 7–¥" - –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ "–ê–∫—Ç–∏–≤–Ω—ã–µ 30–¥" - –¥–ª—è –≤—Å–µ—Ö, –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç–∞
‚Ä¢ "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ 7–¥" - –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Error showing users info: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    
    async def show_system_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                from utils.queue_manager import compression_queue
                queue_stats = compression_queue.get_stats()
                queue_info = f"""
üîÑ **–û—á–µ—Ä–µ–¥—å —Å–∂–∞—Ç–∏—è:**
‚Ä¢ –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {queue_stats['queue_size']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {queue_stats['current_tasks']}/{queue_stats['max_concurrent']}
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {queue_stats['tasks_processed']}
‚Ä¢ –û—à–∏–±–æ–∫: {queue_stats['tasks_failed']}
‚Ä¢ CPU: {queue_stats['cpu_usage']:.1f}%"""
            except:
                queue_info = "\nüîÑ **–û—á–µ—Ä–µ–¥—å —Å–∂–∞—Ç–∏—è:** –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
            with self.db.get_session() as db_session:
                from database.models import User, Event, Session
                users_count = db_session.query(User).count()
                events_count = db_session.query(Event).count()
                sessions_count = db_session.query(Session).count()
            
            text = f"""‚öôÔ∏è **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –±–æ—Ç–∞**

üíæ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}** - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ **–°–æ–±—ã—Ç–∏–π: {events_count}** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ **–°–µ—Å—Å–∏–π: {sessions_count}** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π —Ä–∞–±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–æ—Ç–æ–º
{queue_info}

üìä **–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —ç—Ç–∏ —Ü–∏—Ñ—Ä—ã:**
‚Ä¢ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏** - —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å –≤ –±–æ—Ç–µ
‚Ä¢ **–°–æ–±—ã—Ç–∏—è** - –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–∞–Ω–¥–∞, –∫–Ω–æ–ø–∫–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ)
‚Ä¢ **–°–µ—Å—Å–∏–∏** - –ø–µ—Ä–∏–æ–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ä–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è ~30 –º–∏–Ω)

‚úÖ **–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ**

_–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M')}_"""
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Error showing system status: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–∞")
    
    # === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Cookies ===
    
    async def show_cookies_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è cookies"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫—É–∫–æ–≤
            from utils.cookies_manager import CookiesManager
            cookies_manager = CookiesManager(self.db)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await cookies_manager.get_statistics()
            
            text = "üç™ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Cookies**\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
            platforms = ['instagram', 'youtube', 'tiktok']
            for platform in platforms:
                emoji = {'instagram': 'üì∏', 'youtube': 'üì∫', 'tiktok': 'üéµ'}[platform]
                platform_stats = stats.get(platform, {})
                total = platform_stats.get('total', 0)
                active = platform_stats.get('active', 0)
                success = platform_stats.get('total_success', 0)
                errors = platform_stats.get('total_errors', 0)
                
                text += f"{emoji} **{platform.title()}**\n"
                text += f"  ‚Ä¢ –í—Å–µ–≥–æ: {total} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active})\n"
                text += f"  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {success} | –û—à–∏–±–æ–∫: {errors}\n"
                
                if active == 0:
                    text += f"  ‚ö†Ô∏è _–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö cookies!_\n"
                elif active < 3:
                    text += f"  ‚ö†Ô∏è _–ú–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö cookies_\n"
                    
                text += "\n"
            
            text += "\nüí° _–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è cookies –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏–ª–∏ Netscape_"
            
            keyboard = [
                [
                    InlineKeyboardButton("‚ûï Instagram", callback_data="add_cookies_instagram"),
                    InlineKeyboardButton("‚ûï YouTube", callback_data="add_cookies_youtube"),
                    InlineKeyboardButton("‚ûï TikTok", callback_data="add_cookies_tiktok")
                ],
                [
                    InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ", callback_data="cleanup_cookies"),
                    InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="cookies_stats")
                ],
                [
                    InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫—É–∫–∏", callback_data="delete_cookies_menu")
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Error showing cookies menu: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é cookies")
    
    async def add_cookies_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è cookies"""
        query = update.callback_query
        await query.answer()
        
        platform = query.data.replace('add_cookies_', '')
        context.user_data['adding_cookies_platform'] = platform

        platform_domains = {
            'instagram': '.instagram.com',
            'youtube': '.youtube.com',
            'tiktok': '.tiktok.com'
        }
        sample_domain = platform_domains.get(platform, f'.{platform}.com')

        text = (
            f"üç™ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Cookies –¥–ª—è {platform.title()}**\n\n"
            "üìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ cookies –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
            "**1. JSON —Ñ–æ—Ä–º–∞—Ç (–∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞):**\n"
            "```json\n"
            f"[{{\"domain\":\"{sample_domain}\",\"name\":\"sessionid\",\"value\":\"...\"}}]\n"
            "```\n\n"
            "**2. Netscape —Ñ–æ—Ä–º–∞—Ç (–∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞):**\n"
            "```\n"
            f"{sample_domain}\tTRUE\t/\tTRUE\t0\tsessionid\tvalue\n"
            "```\n\n"
            "üìÅ **–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª** (.json –∏–ª–∏ .txt) ‚Äî –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—á–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.\n\n"
            f"üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å cookies:\n"
            f"1. –û—Ç–∫—Ä–æ–π—Ç–µ {platform} –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"
            "2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç\n"
            "3. F12 ‚Üí Application ‚Üí Cookies\n"
            "4. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ cookies\n\n"
            "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç, –Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π!"
        )
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cookies")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        
        return self.COOKIES_INPUT
    
    async def process_cookies_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ cookies"""
        try:
            message = update.message
            if not message:
                await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return ConversationHandler.END
                
            platform = context.user_data.get('adding_cookies_platform')
            if not platform:
                await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
                return ConversationHandler.END

            from utils.cookies_manager import CookiesManager
            cookies_manager = CookiesManager(self.db)

            cookies_data = None
            source_hint = "—Å–æ–æ–±—â–µ–Ω–∏—è"

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if message.document:
                try:
                    document = message.document
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    file_ext = (document.file_name or '').lower().split('.')[-1]
                    if file_ext not in ['json', 'txt']:
                        await message.reply_text(
                            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .json –∏–ª–∏ .txt",
                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"add_cookies_{platform}")]])
                        )
                        return ConversationHandler.END

                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
                    telegram_file = await document.get_file()
                    file_bytes = await telegram_file.download_as_bytearray()
                    cookies_data = bytes(file_bytes).decode('utf-8', errors='replace').strip()
                    source_hint = f"—Ñ–∞–π–ª–∞ {document.file_name or '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}"
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ (–±–µ–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
                    logger.info(f"Received cookies file: {document.file_name}, size: {len(cookies_data)} chars")
                    
                except Exception as e:
                    logger.error(f"Error processing uploaded file: {e}")
                    await message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"add_cookies_{platform}")]])
                    )
                    return ConversationHandler.END
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            elif message.text:
                cookies_data = message.text.strip()
            else:
                await message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å cookies –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∏—Ö —Ç–µ–∫—Å—Ç",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"add_cookies_{platform}")]])
                )
                return ConversationHandler.END

            if not cookies_data:
                await message.reply_text(
                    "‚ùå –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å cookies –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∏—Ö —Ç–µ–∫—Å—Ç",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"add_cookies_{platform}")]])
                )
                return ConversationHandler.END

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
            success = await cookies_manager.add_cookies(
                platform=platform,
                cookies_data=cookies_data,
                added_by=update.effective_user.id,
                notes=f"Added via admin panel by {update.effective_user.username or update.effective_user.id}"
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
            context.user_data.pop('adding_cookies_platform', None)
            
            if success:
                await message.reply_text(
                    f"‚úÖ Cookies –¥–ª—è {platform.title()} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–∑ {source_hint}!\n\n"
                    f"–¢–µ–ø–µ—Ä—å –æ–Ω–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üç™ –ö –º–µ–Ω—é Cookies", callback_data="admin_cookies")]
                    ])
                )
                return ConversationHandler.END
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                context.user_data['adding_cookies_platform'] = platform
                await message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ cookies. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"add_cookies_{platform}"),
                        InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="admin_cookies")
                    ]])
                )
                return self.COOKIES_INPUT

        except Exception as e:
            logger.error(f"Error processing cookies: {e}", exc_info=True)
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
            if 'adding_cookies_platform' in context.user_data:
                platform = context.user_data['adding_cookies_platform']
                await message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
                    reply_markup=InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"add_cookies_{platform}"),
                            InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="admin_cookies")
                        ]
                    ])
                )
                return self.COOKIES_INPUT
            else:
                await message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="admin_menu")]
                    ])
                )
                return ConversationHandler.END
    
    async def cleanup_cookies(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ cookies"""
        query = update.callback_query
        await query.answer()
        
        try:
            from utils.cookies_manager import CookiesManager
            cookies_manager = CookiesManager(self.db)
            
            count = await cookies_manager.cleanup_expired()
            
            await query.answer(f"üóë –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {count} –∏—Å—Ç–µ–∫—à–∏—Ö cookies", show_alert=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            await self.show_cookies_menu(update, context)
            
        except Exception as e:
            logger.error(f"Error cleaning up cookies: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ", show_alert=True)
    
    async def delete_cookies_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∫—É–∫–∏—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        try:
            from utils.cookies_manager import CookiesManager
            cookies_manager = CookiesManager(self.db)
            
            platforms = ['youtube', 'instagram', 'tiktok']
            keyboard = []
            
            for platform in platforms:
                cookies_list = await cookies_manager.get_cookies_list(platform)
                count = len(cookies_list)
                if count > 0:
                    emoji = {'youtube': 'üì∫', 'instagram': 'üì∏', 'tiktok': 'üéµ'}[platform]
                    keyboard.append([
                        InlineKeyboardButton(
                            f"{emoji} {platform.title()} ({count} —à—Ç)", 
                            callback_data=f"delete_platform_{platform}"
                        )
                    ])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_cookies")])
            
            text = "üóë **–£–¥–∞–ª–µ–Ω–∏–µ Cookies**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫—É–∫–∏—Å–æ–≤:"
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Error showing delete menu: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è")
    
    async def delete_platform_cookies(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫—É–∫–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        query = update.callback_query
        await query.answer()
        
        try:
            platform = query.data.replace('delete_platform_', '')
            
            from utils.cookies_manager import CookiesManager
            cookies_manager = CookiesManager(self.db)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É–∫–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            cookies_list = await cookies_manager.get_cookies_list(platform)
            
            if not cookies_list:
                await query.answer("–ù–µ—Ç –∫—É–∫–∏—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            keyboard = []
            for cookie in cookies_list:
                notes = cookie.get('notes', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
                if len(notes) > 30:
                    notes = notes[:27] + "..."
                
                status = "‚úÖ" if cookie['is_active'] else "‚ùå"
                keyboard.append([
                    InlineKeyboardButton(
                        f"{status} #{cookie['id']} - {notes}",
                        callback_data=f"delete_single_{cookie['id']}"
                    )
                ])
            
            keyboard.append([
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data=f"delete_all_{platform}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="delete_cookies_menu")
            ])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_cookies")])
            
            text = f"üóë **–£–¥–∞–ª–µ–Ω–∏–µ {platform.title()} cookies**\n\n–í—Å–µ–≥–æ –∫—É–∫–∏—Å–æ–≤: {len(cookies_list)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ:"
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"Error showing platform cookies: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞")
    
    async def delete_single_cookie(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–£–¥–∞–ª—è–µ—Ç –æ–¥–∏–Ω –∫—É–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        try:
            cookie_id = int(query.data.replace('delete_single_', ''))
            
            from utils.cookies_manager import CookiesManager
            cookies_manager = CookiesManager(self.db)
            
            success = await cookies_manager.delete_cookie(cookie_id)
            
            if success:
                await query.answer("‚úÖ –ö—É–∫–∏ —É–¥–∞–ª–µ–Ω—ã", show_alert=True)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
            await self.delete_cookies_menu(update, context)
            
        except Exception as e:
            logger.error(f"Error deleting single cookie: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
    
    async def delete_all_platform_cookies(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫—É–∫–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        query = update.callback_query
        await query.answer()
        
        try:
            platform = query.data.replace('delete_all_', '')
            
            from utils.cookies_manager import CookiesManager
            cookies_manager = CookiesManager(self.db)
            
            count = await cookies_manager.delete_cookies_by_platform(platform)
            
            await query.answer(f"üóë –£–¥–∞–ª–µ–Ω–æ {count} –∫—É–∫–∏—Å–æ–≤ –¥–ª—è {platform.title()}", show_alert=True)
            await self.delete_cookies_menu(update, context)
            
        except Exception as e:
            logger.error(f"Error deleting all platform cookies: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
    
    # === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ ===
    
    async def start_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ - –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç"""
        query = update.callback_query
        await query.answer()

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        context.user_data.pop('broadcast_data', None)
        context.user_data.pop('broadcast_segment', None)

        logger.info(f"Broadcast started by user {query.from_user.id}")

        text = """üì® **–†–∞—Å—Å—ã–ª–∫–∞**

–ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:
‚Ä¢ üìù –¢–µ–∫—Å—Ç
‚Ä¢ üñº –§–æ—Ç–æ
‚Ä¢ üé¨ –í–∏–¥–µ–æ
‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ üéµ –ê—É–¥–∏–æ
‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ
‚Ä¢ üéØ –°—Ç–∏–∫–µ—Ä—ã
‚Ä¢ üéû –ê–Ω–∏–º–∞—Ü–∏–∏

–ü–æ—Å–ª–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π."""

        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

        return self.BROADCAST_TYPE
    
    async def broadcast_type_selected(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        broadcast_type = query.data.split('_')[1]
        context.user_data['broadcast_type'] = broadcast_type
        
        # –í—ã–±–æ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üë• –í—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º", callback_data="segment_all")],
            [InlineKeyboardButton("üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ 7–¥", callback_data="segment_active_7d")],
            [InlineKeyboardButton("üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ 30–¥", callback_data="segment_active_30d")],
            [InlineKeyboardButton("üò¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ 7–¥", callback_data="segment_inactive_7d")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = f"""üì® **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**

–¢–∏–ø: {broadcast_type}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"""
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        
        return BROADCAST_CONTENT
    
    async def segment_selected(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()

        segment = query.data.split('_', 1)[1] if '_' in query.data else None
        context.user_data['broadcast_segment'] = segment

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        recipients = self.analytics.get_users_for_broadcast(segment)
        recipient_count = len(recipients)

        segment_name = {
            'all': '–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ',
            'active_7d': '–ê–∫—Ç–∏–≤–Ω—ã–µ 7 –¥–Ω–µ–π',
            'active_30d': '–ê–∫—Ç–∏–≤–Ω—ã–µ 30 –¥–Ω–µ–π',
            'inactive_7d': '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ 7 –¥–Ω–µ–π',
            'test': '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤–∞–º)'
        }.get(segment, '–í—Å–µ')

        # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
        if segment == 'test':
            recipients = [update.callback_query.from_user.id]
            recipient_count = 1

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_send"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        text = f"""üì® **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**

–°–µ–≥–º–µ–Ω—Ç: {segment_name}
–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {recipient_count}

–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?"""

        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

        return ConversationHandler.END
    
    async def receive_broadcast_content(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        message = update.message

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
        if message.from_user.id not in config.BOT_ADMINS:
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
        if not any([
            message.text, message.photo, message.video, message.document,
            message.audio, message.voice, message.sticker, message.animation
        ]):
            await message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.")
            return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        broadcast_data = {
            'message_id': message.message_id,
            'text': message.text,
            'caption': message.caption,
            'parse_mode': ParseMode.MARKDOWN if message.text and ('*' in message.text or '_' in message.text) else None,
            'reply_markup': None,  # –ö–Ω–æ–ø–∫–∏ –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
            'is_forwarded': bool(message.forward_from or message.forward_from_chat)
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id
        if message.photo:
            broadcast_data['content_type'] = 'photo'
            broadcast_data['file_id'] = message.photo[-1].file_id
        elif message.video:
            broadcast_data['content_type'] = 'video'
            broadcast_data['file_id'] = message.video.file_id
        elif message.document:
            broadcast_data['content_type'] = 'document'
            broadcast_data['file_id'] = message.document.file_id
        elif message.audio:
            broadcast_data['content_type'] = 'audio'
            broadcast_data['file_id'] = message.audio.file_id
        elif message.voice:
            broadcast_data['content_type'] = 'voice'
            broadcast_data['file_id'] = message.voice.file_id
        elif message.sticker:
            broadcast_data['content_type'] = 'sticker'
            broadcast_data['file_id'] = message.sticker.file_id
        elif message.animation:
            broadcast_data['content_type'] = 'animation'
            broadcast_data['file_id'] = message.animation.file_id
        elif message.text:
            broadcast_data['content_type'] = 'text'
            broadcast_data['file_id'] = None
        else:
            await message.reply_text("‚ùå –≠—Ç–æ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data['broadcast_data'] = broadcast_data

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üë• –í—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º", callback_data="segment_all")],
            [InlineKeyboardButton("üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ 7 –¥–Ω–µ–π", callback_data="segment_active_7d")],
            [InlineKeyboardButton("üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ 30 –¥–Ω–µ–π", callback_data="segment_active_30d")],
            [InlineKeyboardButton("üò¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ 7 –¥–Ω–µ–π", callback_data="segment_inactive_7d")],
            [InlineKeyboardButton("üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="segment_test")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        preview_text = self._get_content_preview(broadcast_data)
        forward_info = " (–ø–µ—Ä–µ—Å–ª–∞–Ω–æ)" if broadcast_data['is_forwarded'] else ""

        text = f"""üì® **–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏**{forward_info}

{preview_text}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:"""

        await message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

        return ConversationHandler.END

    def _get_content_preview(self, broadcast_data: dict) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        content_type = broadcast_data['content_type']

        if content_type == 'text':
            text = broadcast_data['text'][:100] + "..." if broadcast_data['text'] and len(broadcast_data['text']) > 100 else broadcast_data['text']
            return f"üìù –¢–µ–∫—Å—Ç:\n{text or '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}"

        elif content_type == 'photo':
            return f"üñº –§–æ—Ç–æ{(' —Å –ø–æ–¥–ø–∏—Å—å—é' if broadcast_data['caption'] else '')}"

        elif content_type == 'video':
            return f"üé¨ –í–∏–¥–µ–æ{(' —Å –ø–æ–¥–ø–∏—Å—å—é' if broadcast_data['caption'] else '')}"

        elif content_type == 'document':
            return "üìÑ –î–æ–∫—É–º–µ–Ω—Ç"

        elif content_type == 'audio':
            return "üéµ –ê—É–¥–∏–æ"

        elif content_type == 'voice':
            return "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

        elif content_type == 'sticker':
            return "üéØ –°—Ç–∏–∫–µ—Ä"

        elif content_type == 'animation':
            return "üéû –ê–Ω–∏–º–∞—Ü–∏—è"

        else:
            return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
    
    async def send_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        query = update.callback_query
        await query.answer()

        if query.data == "broadcast_cancel":
            await query.edit_message_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            context.user_data.clear()
            return

        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        await query.edit_message_text("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

        broadcast_data = context.user_data.get('broadcast_data')
        if not broadcast_data:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        segment = context.user_data.get('broadcast_segment')
        recipients = self.analytics.get_users_for_broadcast(segment)

        if not recipients:
            await query.edit_message_text("‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
        if segment == 'test':
            recipients = [query.from_user.id]
            recipient_count = 1
        else:
            recipient_count = len(recipients)

        sent = 0
        failed = 0
        blocked = 0

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for tg_id in recipients:
            try:
                await self._send_message_to_user(context.bot, tg_id, broadcast_data)
                sent += 1

                # –ü–∞—É–∑–∞ –∫–∞–∂–¥—ã–µ 30 —Å–æ–æ–±—â–µ–Ω–∏–π
                if sent % 30 == 0:
                    await asyncio.sleep(1)

            except Exception as e:
                error_str = str(e).lower()
                if "blocked" in error_str or "bot was blocked" in error_str:
                    blocked += 1
                    # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
                    try:
                        with self.db.get_session() as db_session:
                            from database.models import User
                            user = db_session.query(User).filter_by(tg_id=tg_id).first()
                            if user:
                                user.is_blocked = True
                                db_session.commit()
                    except:
                        pass
                else:
                    failed += 1

                logger.error(f"Failed to send broadcast to {tg_id}: {e}")

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        total = len(recipients)
        success_rate = (sent / total * 100) if total > 0 else 0

        text = f"""‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked}
‚Ä¢ –û—à–∏–±–æ–∫: {failed}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total}

üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%"""

        await query.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('broadcast_data', None)
        context.user_data.pop('broadcast_segment', None)

    async def _send_message_to_user(self, bot, user_id: int, broadcast_data: dict):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ç–æ–º –∂–µ –≤–∏–¥–µ"""
        content_type = broadcast_data['content_type']
        text = broadcast_data['text']
        caption = broadcast_data['caption']
        file_id = broadcast_data['file_id']

        try:
            if content_type == 'text':
                await bot.send_message(
                    chat_id=user_id,
                    text=text,
                    parse_mode=broadcast_data['parse_mode']
                )

            elif content_type == 'photo':
                await bot.send_photo(
                    chat_id=user_id,
                    photo=file_id,
                    caption=caption,
                    parse_mode=ParseMode.MARKDOWN if caption else None
                )

            elif content_type == 'video':
                await bot.send_video(
                    chat_id=user_id,
                    video=file_id,
                    caption=caption,
                    parse_mode=ParseMode.MARKDOWN if caption else None
                )

            elif content_type == 'document':
                await bot.send_document(
                    chat_id=user_id,
                    document=file_id,
                    caption=caption,
                    parse_mode=ParseMode.MARKDOWN if caption else None
                )

            elif content_type == 'audio':
                await bot.send_audio(
                    chat_id=user_id,
                    audio=file_id,
                    caption=caption,
                    parse_mode=ParseMode.MARKDOWN if caption else None
                )

            elif content_type == 'voice':
                await bot.send_voice(
                    chat_id=user_id,
                    voice=file_id,
                    caption=caption,
                    parse_mode=ParseMode.MARKDOWN if caption else None
                )

            elif content_type == 'sticker':
                await bot.send_sticker(
                    chat_id=user_id,
                    sticker=file_id
                )

            elif content_type == 'animation':
                await bot.send_animation(
                    chat_id=user_id,
                    animation=file_id,
                    caption=caption,
                    parse_mode=ParseMode.MARKDOWN if caption else None
                )

        except Exception as e:
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
            raise e
    
    async def cancel_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        context.user_data.pop('broadcast_data', None)
        context.user_data.pop('broadcast_segment', None)
        context.user_data.clear()

        if update.callback_query:
            await update.callback_query.edit_message_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            await update.message.reply_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

        return ConversationHandler.END
